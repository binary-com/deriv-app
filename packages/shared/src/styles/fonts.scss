/*
    Constants
*/
$FONT_STACK: roboto, sans-serif;
$BASE_FONT_SIZE: 10px;

/*
    Variables
*/
$FONT_SIZES: (
    'heading'   em(30px),
    'large'     em(28px),
    'title'     em(16px),
    'paragraph' em(14px),
    'small'     em(12px),
    'xsmall'    em(10px),
    'xxsmall'   em(8px),
    'xxxsmall'  em(6px),
);

$FONT_COLORS: (
    'active'   $COLOR_WHITE,
    'black'    $COLOR_LIGHT_BLACK_1,
    'grey'     $COLOR_LIGHT_BLACK_2,
    'disabled' $COLOR_LIGHT_BLACK_3,
    'green'    $COLOR_GREEN_1,
    'red'      $COLOR_RED,
    'orange'   $COLOR_ORANGE,
);

$FONT_WEIGHTS: (
    'bold'     700,
    'semibold' 500,
    'normal'   400,
    'light'    300,
);

$TEXT_ALIGN: (
    'center' center,
    'left'   left,
    'right'  right,
);

$LINEHEIGHTS: (
    'large' : 1.75,
    'medium': 1.5,
    'small' : 1.25,
);

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
$TYPEFACES_LIST: generate-typefaces();

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
@function em($px, $base: $BASE_FONT_SIZE) {
    $list: ();
    @if length($px) != 1 {
        @for $i from 1 through length($px) {
            $val_em: (nth($px, $i) / $base) * 1em;
            $list: append($list, $val_em, space);
        }
        @return $list;
    }
    @else {
        @return ($px / $base) * 1em;
    }
}

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {
    #{$property}: em($values, $font-size);
}

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
@mixin setTypeface($size, $align, $weight, $colour, $tt) {
    @if $size {
        font-size: $size;
    }
    @if $colour {
        color: $colour;
    }
    @if $weight {
        font-weight: $weight;
    }
    @if $tt {
        text-transform: $tt;
    }
    @if $align {
        text-align: $align;
    }
    @if $size == 1.6em {
        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');
    }
    @else if $size == 1.4em {
        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');
    }
    @else if $size == 1.2em {
        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');
    }
    @else {
        line-height: unset;
    }
}

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
@mixin typeface($var, $tt: capitalize) {
    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);

    $size  : nth($typeface_config, 1); // font-size
    $align : nth($typeface_config, 2); // text-align
    $weight: nth($typeface_config, 3); // font-weight
    $color : nth($typeface_config, 4); // color
    @include setTypeface($size, $align, $weight, $color, $tt);
}
