/* -------------------------------------------------------------------------- */
/* RESPONSIVE MIXIN                                                           */
/* -------------------------------------------------------------------------- */

// These variables are the max-width of the breakpoints
$breakpoints: (
    'mobile': 926,
    'tablet': 1081,
    'desktop': 'infinity',
);
$unit: 1px;

/// Add unit to the given number
///
/// @param {number} $number
/// @return {string}
///
@function unit($number) {
    @return $number * $unit;
}

/// Get Breakpoints values
/// Returns previous and next breakpoint of the given breakpoint
///
/// @param {string} $breakpoint
/// @param {map} $breakpoints [$breakpoints]
/// @return {map}
///
/// @example
///    $bp: get-breakpoint('mobile')
///
@function get-breakpoint($breakpoint, $breakpoints: $breakpoints) {
    $breakpoints-list: map-keys($breakpoints);

    $bp-values: (
        'prev':
            if(
                (index($breakpoints-list, $breakpoint) - 1) == 0,
                '',
                nth($breakpoints-list, (index($breakpoints-list, $breakpoint) - 1))
            ),
        'next':
            if(
                (index($breakpoints-list, $breakpoint) + 1) == 0 or
                    ((index($breakpoints-list, $breakpoint) + 1) > length($breakpoints-list)),
                '',
                nth($breakpoints-list, (index($breakpoints-list, $breakpoint) + 1))
            ),
    );

    @return $bp-values;
}

/// Use media query in Breakpoints
///
/// @param {string} $breakpoint
/// @param {string} $extend [""] | @accept "down" | "up"
/// @param {string} $orientation [""] | @accept "portrait" | "landscape"
/// @param {string} $screen ['']
/// @param {string} $extra ['']
/// @param {map} $breakpoints [$breakpoints]
///
/// @example
///     @include('mobile') {
///         /* CSS STYLES */
///     }
///
///     /* This mixin include tablet and all the breakpoints down the tablet */
///     @include('tablet', 'down') {
///         /* CSS STYLES */
///     }
///
@mixin bp($breakpoint, $extend: '', $orientation: '', $screen: '', $extra: '', $breakpoints: $breakpoints) {
    @if index($breakpoints, $breakpoint) != 'null' {
        $bp: get-breakpoint($breakpoint);
        $min-query: '';
        $max-query: '';
        $query: '';

        @if map-get($bp, 'prev') != '' {
            $min-query: if(
                $extend == 'down',
                '',
                'min-width: #{unit(map-get($breakpoints, map-get($bp, ' prev ')) + 1)}'
            );
        }

        @if map-get($bp, 'next') != '' {
            $max-query: if($extend == 'up', '', 'max-width: #{unit(map-get($breakpoints, $breakpoint))}');
        }

        $screen-query: if($screen != '', 'only #{$screen} and ', null);
        $width-query: "(#{$min-query} #{if($min-query != '' and $max-query != '', ') and (', null)} #{$max-query})";
        $orientation-query: if($orientation != '', ' and (orientation: #{$orientation})', null);
        $extra-query: if($extra != '', ' and #{$extra}', null);

        $query: '#{$screen-query} #{$width-query} #{$orientation-query} #{$extra-query}';

        @media #{$query} {
            @content;
        }
    } @else {
        @error "Sorry but #{$breakpoint} is not a breakpoint in the project";
    }
}

// Alias --------------------------------------------------------------------
// These aliases are added to support deprecated mixins, which were used in the devices.scss.
// TODO: These aliases should be removed when all the deprecated mixins replaced with the bp mixin.

@mixin mobile {
    @include bp('mobile') {
        @content;
    }
}

@mixin tablet {
    @include bp('tablet') {
        @content;
    }
}

@mixin tablet-up {
    @include bp('tablet', 'up') {
        @content;
    }
}

@mixin desktop {
    @include bp('desktop') {
        @content;
    }
}
