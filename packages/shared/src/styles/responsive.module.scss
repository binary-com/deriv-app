/* -------------------------------------------------------------------------- */
/* RESPONSIVE MIXINS                                                          */
/* -------------------------------------------------------------------------- */

// Variables ----------------------------------------------------------------
$unit: 1px;

// These variables are the max-width of the breakpoints
$breakpoints: (
    'mobile': 926,
    'tablet': 1081,
    'desktop': 'infinity',
);

// Functions ----------------------------------------------------------------

/// Add unit to the given number
///
/// @param {number} $number
/// @return {string}
///
@function unit($number) {
    @return $number * $unit;
}

/// Get Breakpoints values
/// Returns previous and next breakpoint of the given breakpoint
///
/// @param {string} $breakpoint
/// @param {map} $breakpoints [$breakpoints]
/// @return {map}
///
/// @example
///    $bp: get-breakpoint('mobile')
///
@function get-breakpoint($breakpoint, $breakpoints: $breakpoints) {
    $breakpoints-list: map-keys($breakpoints);

    $bp-indexes: (
        'prev': (
            index($breakpoints-list, $breakpoint) - 1,
        ),
        'next': (
            index($breakpoints-list, $breakpoint) + 1,
        ),
    );

    $bp-values: (
        'prev': if(map-get($bp-indexes, 'prev') == 0, '', nth($breakpoints-list, map-get($bp-indexes, 'prev'))),
        'next': if(map-get($bp-indexes, 'next') == 0, '', nth($breakpoints-list, map-get($bp-indexes, 'next'))),
    );

    @return $bp-values;
}

// Mixins -------------------------------------------------------------------

/// Use media query in Breakpoints
///
/// @param {string} $breakpoint
/// @param {string} $extend [""] | @accept "down" | "up"
/// @param {map} $breakpoints [$breakpoints]
///
/// @example
///     @include('mobile') {
///         /* CSS STYLES */
///     }
///
///     /* This mixin include tablet and all the breakpoints down the tablet */
///     @include('tablet', 'down') {
///         /* CSS STYLES */
///     }
///
@mixin bp($breakpoint, $extend: '', $breakpoints: $breakpoints) {
    $bp: get-breakpoint($breakpoint);

    @if index($breakpoints, $breakpoint) != 'null' {
        $min-query: '';
        $max-query: '';
        $query: '';

        @if map-get($bp, 'prev') != '' {
            $min-query: 'min-width: #{unit(map-get($breakpoints, map-get($bp, ' prev ')) + 1)}';
        }

        @if map-get($bp, 'next') != '' {
            $max-query: 'max-width: #{unit(map-get($breakpoints, $breakpoint))}';
        }

        // Handle Extend
        @if $extend == 'down' {
            $min-query: '';
        } @else if $extend == 'up' {
            $max-query: '';
        }

        $query: "#{$min-query} #{if($min-query != '' and $max-query != '', ') and (', null)} #{$max-query}";

        @media ($query) {
            @content;
        }
    } @else {
        @error "Sorry but #{$breakpoint} is not a breakpoint in the project";
    }
}

// Alias --------------------------------------------------------------------
// TODO: uncomment these aliases when it is safe and they won't be overwritten the mixins in file: `devices.scss`
// @mixin mobile {
//     @include bp("mobile") {
//         @content;
//     }
// }

// @mixin tablet {
//     @include bp("tablet") {
//         @content;
//     }
// }

// @mixin desktop {
//     @include bp("desktop") {
//         @content;
//     }
// }

// Export -------------------------------------------------------------------
:export {
    mobileWidth: map-get($breakpoints, 'mobile');
    TabletWidth: map-get($breakpoints, 'tablet');
    DesktopWidth: map-get($breakpoints, 'desktop');
}
