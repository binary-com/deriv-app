<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="4687" failures="0" errors="0" time="1706.503">
  <testsuite name="PortfolioStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:56:53" time="10.288" tests="1">
    <testcase classname="PortfolioStore getPositionById() should return a position by its id, or undefined when id is incorrect or not provided" name="PortfolioStore getPositionById() should return a position by its id, or undefined when id is incorrect or not provided" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="createTickMarkers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:56:53" time="11.107" tests="8">
    <testcase classname="createTickMarkers should return an empty array if tick_stream is empty" name="createTickMarkers should return an empty array if tick_stream is empty" time="0.002">
    </testcase>
    <testcase classname="createTickMarkers should return an array with markers for every tick in tick_stream when contract is open" name="createTickMarkers should return an array with markers for every tick in tick_stream when contract is open" time="0.003">
    </testcase>
    <testcase classname="createTickMarkers should return an array with markers for all ticks when any tick contract is closed" name="createTickMarkers should return an array with markers for all ticks when any tick contract is closed" time="0.073">
    </testcase>
    <testcase classname="createTickMarkers should correctly handle accumulator contract markers when contract is open" name="createTickMarkers should correctly handle accumulator contract markers when contract is open" time="0.004">
    </testcase>
    <testcase classname="createTickMarkers should append --preexit class to previous spot of accumulator contract to highlight it when is_delayed_markers_update=false or contract is closed" name="createTickMarkers should append --preexit class to previous spot of accumulator contract to highlight it when is_delayed_markers_update=false or contract is closed" time="0.001">
    </testcase>
    <testcase classname="createTickMarkers should not append --preexit class to previous spot of accumulator contract when is_delayed_markers_update=true for open contract only" name="createTickMarkers should not append --preexit class to previous spot of accumulator contract when is_delayed_markers_update=true for open contract only" time="0.002">
    </testcase>
    <testcase classname="createTickMarkers should get the correct contract type" name="createTickMarkers should get the correct contract type" time="0.001">
    </testcase>
    <testcase classname="createTickMarkers should get the correct start text" name="createTickMarkers should get the correct start text" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="MarkerSpotLabel" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:56:53" time="11.216" tests="8">
    <testcase classname="MarkerSpotLabel should have &quot;chart-spot-label__time-value-container--top&quot; class if no &quot;align_label&quot; is passed in the props" name="MarkerSpotLabel should have &quot;chart-spot-label__time-value-container--top&quot; class if no &quot;align_label&quot; is passed in the props" time="0.168">
    </testcase>
    <testcase classname="MarkerSpotLabel should have &quot;chart-spot-label__time-value-container--bottom&quot; class if &quot;align_label&quot; &quot;bottom&quot; is passed in the props" name="MarkerSpotLabel should have &quot;chart-spot-label__time-value-container--bottom&quot; class if &quot;align_label&quot; &quot;bottom&quot; is passed in the props" time="0.013">
    </testcase>
    <testcase classname="MarkerSpotLabel should have &quot;chart-spot-label__value-container--won&quot; class if &quot;status&quot; &quot;won&quot; is passed in the props" name="MarkerSpotLabel should have &quot;chart-spot-label__value-container--won&quot; class if &quot;status&quot; &quot;won&quot; is passed in the props" time="0.002">
    </testcase>
    <testcase classname="MarkerSpotLabel should have &quot;chart-spot-label__value-container--lost&quot; class if &quot;status&quot; &quot;lost&quot; is passed in the props" name="MarkerSpotLabel should have &quot;chart-spot-label__value-container--lost&quot; class if &quot;status&quot; &quot;lost&quot; is passed in the props" time="0.002">
    </testcase>
    <testcase classname="MarkerSpotLabel should render &quot;spot_value&quot; with the correct commas if it is passed in the props" name="MarkerSpotLabel should render &quot;spot_value&quot; with the correct commas if it is passed in the props" time="0.005">
    </testcase>
    <testcase classname="MarkerSpotLabel should render &quot;spot_epoch&quot; with the correct format if it is passed in the props" name="MarkerSpotLabel should render &quot;spot_epoch&quot; with the correct format if it is passed in the props" time="0.009">
    </testcase>
    <testcase classname="MarkerSpotLabel should &quot;HoverToggle&quot; if &quot;has_hover_toggle&quot; is passed in the props" name="MarkerSpotLabel should &quot;HoverToggle&quot; if &quot;has_hover_toggle&quot; is passed in the props" time="0.002">
    </testcase>
    <testcase classname="MarkerSpotLabel should not &quot;HoverToggle&quot; if &quot;has_hover_toggle&quot; is not passed in the props" name="MarkerSpotLabel should not &quot;HoverToggle&quot; if &quot;has_hover_toggle&quot; is not passed in the props" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VerificationModalContent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:56:53" time="12.525" tests="3">
    <testcase classname="&lt;VerificationModalContent /&gt; should render VerificationModalContent component" name="&lt;VerificationModalContent /&gt; should render VerificationModalContent component" time="0.106">
    </testcase>
    <testcase classname="&lt;VerificationModalContent /&gt; should render properly for the first step content" name="&lt;VerificationModalContent /&gt; should render properly for the first step content" time="0.064">
    </testcase>
    <testcase classname="&lt;VerificationModalContent /&gt; should render properly for the second step content" name="&lt;VerificationModalContent /&gt; should render properly for the second step content" time="0.268">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VerificationDocumentSubmited /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:56:53" time="12.477" tests="4">
    <testcase classname="&lt;VerificationDocumentSubmited /&gt; should not render the VerificationModal component" name="&lt;VerificationDocumentSubmited /&gt; should not render the VerificationModal component" time="0.047">
    </testcase>
    <testcase classname="&lt;VerificationDocumentSubmited /&gt; should render the VerificationModal component" name="&lt;VerificationDocumentSubmited /&gt; should render the VerificationModal component" time="0.064">
    </testcase>
    <testcase classname="&lt;VerificationDocumentSubmited /&gt; should setIsVerificationModalVisible to false" name="&lt;VerificationDocumentSubmited /&gt; should setIsVerificationModalVisible to false" time="0.198">
    </testcase>
    <testcase classname="&lt;VerificationDocumentSubmited /&gt; should setIsVerificationModalVisible to be false in isMobile" name="&lt;VerificationDocumentSubmited /&gt; should setIsVerificationModalVisible to be false in isMobile" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="SetResidenceForm" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:03" time="2.681" tests="3">
    <testcase classname="SetResidenceForm should render the component with autocomplete input box" name="SetResidenceForm should render the component with autocomplete input box" time="0.153">
    </testcase>
    <testcase classname="SetResidenceForm should not display the hint text if there are errors" name="SetResidenceForm should not display the hint text if there are errors" time="0.006">
    </testcase>
    <testcase classname="SetResidenceForm should display the hint text if there are no errors" name="SetResidenceForm should display the hint text if there are no errors" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="buildCurrenciesList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:06" time="1.529" tests="3">
    <testcase classname="buildCurrenciesList It Returns the desired currencies" name="buildCurrenciesList It Returns the desired currencies" time="0.003">
    </testcase>
    <testcase classname="buildCurrenciesList Returns correct default currency when currency is passed" name="buildCurrenciesList Returns correct default currency when currency is passed" time="0.001">
    </testcase>
    <testcase classname="buildCurrenciesList Returns first currency in currencies list when currency is not passed" name="buildCurrenciesList Returns first currency in currencies list when currency is not passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="TradeNotifications" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:04" time="3.827" tests="5">
    <testcase classname="TradeNotifications should not render notifications if show_trade_notifications is not passed" name="TradeNotifications should not render notifications if show_trade_notifications is not passed" time="0.062">
    </testcase>
    <testcase classname="TradeNotifications should not render notifications if show_trade_notifications is passed but has no notifications" name="TradeNotifications should not render notifications if show_trade_notifications is passed but has no notifications" time="0.005">
    </testcase>
    <testcase classname="TradeNotifications should render &quot;Trade opened&quot; notification without timestamp" name="TradeNotifications should render &quot;Trade opened&quot; notification without timestamp" time="0.064">
    </testcase>
    <testcase classname="TradeNotifications should render &quot;Trade closed&quot; notification with timestamp" name="TradeNotifications should render &quot;Trade closed&quot; notification with timestamp" time="0.014">
    </testcase>
    <testcase classname="TradeNotifications should display no more than 3 notifications" name="TradeNotifications should display no more than 3 notifications" time="0.059">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FeatureFlagsSection/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:56:53" time="15.281" tests="7">
    <testcase classname="&lt;FeatureFlagsSection/&gt; should render all flags except for the wallet flag on localhost" name="&lt;FeatureFlagsSection/&gt; should render all flags except for the wallet flag on localhost" time="0.876">
    </testcase>
    <testcase classname="&lt;FeatureFlagsSection/&gt; should render checked next_wallet, sharkfin &amp; dtrader_v2 flags on localhost" name="&lt;FeatureFlagsSection/&gt; should render checked next_wallet, sharkfin &amp; dtrader_v2 flags on localhost" time="0.548">
    </testcase>
    <testcase classname="&lt;FeatureFlagsSection/&gt; should render all flags except for the wallet flag on binary.sx domain" name="&lt;FeatureFlagsSection/&gt; should render all flags except for the wallet flag on binary.sx domain" time="0.545">
    </testcase>
    <testcase classname="&lt;FeatureFlagsSection/&gt; should render all flags except for the wallet flag on staging" name="&lt;FeatureFlagsSection/&gt; should render all flags except for the wallet flag on staging" time="0.709">
    </testcase>
    <testcase classname="&lt;FeatureFlagsSection/&gt; should render a single next_wallet flag on production" name="&lt;FeatureFlagsSection/&gt; should render a single next_wallet flag on production" time="0.271">
    </testcase>
    <testcase classname="&lt;FeatureFlagsSection/&gt; should not render any flags or &quot;Feature flags&quot; title when data object with flags is undefined" name="&lt;FeatureFlagsSection/&gt; should not render any flags or &quot;Feature flags&quot; title when data object with flags is undefined" time="0.006">
    </testcase>
    <testcase classname="&lt;FeatureFlagsSection/&gt; should call feature_flags.update() method when a flag is checked" name="&lt;FeatureFlagsSection/&gt; should call feature_flags.update() method when a flag is checked" time="0.098">
    </testcase>
  </testsuite>
  <testsuite name="AccountSwitcherWalletComponent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:05" time="4.182" tests="3">
    <testcase classname="AccountSwitcherWalletComponent should render the component" name="AccountSwitcherWalletComponent should render the component" time="0.035">
    </testcase>
    <testcase classname="AccountSwitcherWalletComponent should render list items based on the number of wallets" name="AccountSwitcherWalletComponent should render list items based on the number of wallets" time="0.018">
    </testcase>
    <testcase classname="AccountSwitcherWalletComponent should toggle the switcher on button click" name="AccountSwitcherWalletComponent should toggle the switcher on button click" time="0.166">
    </testcase>
  </testsuite>
  <testsuite name="QuestionnaireModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:06" time="3.398" tests="2">
    <testcase classname="QuestionnaireModal renders QuestionnaireModal component correctly" name="QuestionnaireModal renders QuestionnaireModal component correctly" time="0.343">
    </testcase>
    <testcase classname="QuestionnaireModal calls handleSignup when an answer is clicked" name="QuestionnaireModal calls handleSignup when an answer is clicked" time="0.081">
    </testcase>
  </testsuite>
  <testsuite name="getAllowedLanguages method" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:08" time="1.524" tests="1">
    <testcase classname="getAllowedLanguages method should return the desired allowed languages" name="getAllowedLanguages method should return the desired allowed languages" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getOauthAppsObject" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:09" time="1.279" tests="2">
    <testcase classname="getOauthAppsObject Expects default oauth object when there are no arguments" name="getOauthAppsObject Expects default oauth object when there are no arguments" time="0.002">
    </testcase>
    <testcase classname="getOauthAppsObject Expects correct value when arguments passed" name="getOauthAppsObject Expects correct value when arguments passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="MarkerSpot Component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:09" time="1.7" tests="2">
    <testcase classname="MarkerSpot Component should render MarkerSpot component" name="MarkerSpot Component should render MarkerSpot component" time="0.024">
    </testcase>
    <testcase classname="MarkerSpot Component should not has class &quot;.chart-spot__spot--lost&quot; or &quot;.chart-spot__spot--won&quot; if no status is passed in props" name="MarkerSpot Component should not has class &quot;.chart-spot__spot--lost&quot; or &quot;.chart-spot__spot--won&quot; if no status is passed in props" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="AccountSwitcherWalletItem" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:06" time="4.942" tests="7">
    <testcase classname="AccountSwitcherWalletItem should render the component" name="AccountSwitcherWalletItem should render the component" time="0.197">
    </testcase>
    <testcase classname="AccountSwitcherWalletItem should NOT show SVG badge" name="AccountSwitcherWalletItem should NOT show SVG badge" time="0.015">
    </testcase>
    <testcase classname="AccountSwitcherWalletItem should show MALTA badge if show_badge is true" name="AccountSwitcherWalletItem should show MALTA badge if show_badge is true" time="0.011">
    </testcase>
    <testcase classname="AccountSwitcherWalletItem should render Demo Badge if show_badge is true" name="AccountSwitcherWalletItem should render Demo Badge if show_badge is true" time="0.035">
    </testcase>
    <testcase classname="AccountSwitcherWalletItem should call closeAccountsDialog when clicked" name="AccountSwitcherWalletItem should call closeAccountsDialog when clicked" time="0.215">
    </testcase>
    <testcase classname="AccountSwitcherWalletItem should call switchAccount when clicked not selected" name="AccountSwitcherWalletItem should call switchAccount when clicked not selected" time="0.022">
    </testcase>
    <testcase classname="AccountSwitcherWalletItem should not call switchAccount when clicked the already selected" name="AccountSwitcherWalletItem should not call switchAccount when clicked the already selected" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="AppNotificationMessages" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:09" time="2.763" tests="1">
    <testcase classname="AppNotificationMessages should render the component" name="AppNotificationMessages should render the component" time="0.096">
    </testcase>
  </testsuite>
  <testsuite name="Header" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:08" time="5.945" tests="3">
    <testcase classname="Header should render the &quot;TradersHubHeader&quot; component if user is logged in and in traders hub route" name="Header should render the &quot;TradersHubHeader&quot; component if user is logged in and in traders hub route" time="0.148">
    </testcase>
    <testcase classname="Header should render the &quot;DTraderHeader&quot; component if user is logged in and not in the traders hub route" name="Header should render the &quot;DTraderHeader&quot; component if user is logged in and not in the traders hub route" time="0.003">
    </testcase>
    <testcase classname="Header should render the &quot;DefaultHeader&quot; component if user is not logged in" name="Header should render the &quot;DefaultHeader&quot; component if user is not logged in" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VerificationDocumentSubmited /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:11" time="3.129" tests="4">
    <testcase classname="&lt;VerificationDocumentSubmited /&gt; should not render the VerificationDocumentSubmited component" name="&lt;VerificationDocumentSubmited /&gt; should not render the VerificationDocumentSubmited component" time="0.018">
    </testcase>
    <testcase classname="&lt;VerificationDocumentSubmited /&gt; should render the VerificationDocumentSubmited component" name="&lt;VerificationDocumentSubmited /&gt; should render the VerificationDocumentSubmited component" time="0.042">
    </testcase>
    <testcase classname="&lt;VerificationDocumentSubmited /&gt; should render VerificationDocumentSubmited component with Messages and Button" name="&lt;VerificationDocumentSubmited /&gt; should render VerificationDocumentSubmited component with Messages and Button" time="0.225">
    </testcase>
    <testcase classname="&lt;VerificationDocumentSubmited /&gt; should render VerificationDocumentSubmited click on Button to called false function" name="&lt;VerificationDocumentSubmited /&gt; should render VerificationDocumentSubmited click on Button to called false function" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RealAccountSignup /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:10" time="3.977" tests="3">
    <testcase classname="&lt;RealAccountSignup /&gt; should render RealAccountSignupModal if is_real_account_signup is true" name="&lt;RealAccountSignup /&gt; should render RealAccountSignupModal if is_real_account_signup is true" time="0.071">
    </testcase>
    <testcase classname="&lt;RealAccountSignup /&gt; should call Analytics.trackEvent on mount if real account signup target is not maltainvest" name="&lt;RealAccountSignup /&gt; should call Analytics.trackEvent on mount if real account signup target is not maltainvest" time="0.043">
    </testcase>
    <testcase classname="&lt;RealAccountSignup /&gt; should render TestWarningModal if should_show_appropriateness_warning_modal is set to true" name="&lt;RealAccountSignup /&gt; should render TestWarningModal if should_show_appropriateness_warning_modal is set to true" time="0.067">
    </testcase>
  </testsuite>
  <testsuite name="AccountSwitcherWalletMobile" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:11" time="3.747" tests="3">
    <testcase classname="AccountSwitcherWalletMobile should render the component" name="AccountSwitcherWalletMobile should render the component" time="0.255">
    </testcase>
    <testcase classname="AccountSwitcherWalletMobile should render list wallets" name="AccountSwitcherWalletMobile should render list wallets" time="0.068">
    </testcase>
    <testcase classname="AccountSwitcherWalletMobile should toggle the switcher on footer click" name="AccountSwitcherWalletMobile should toggle the switcher on footer click" time="0.092">
    </testcase>
  </testsuite>
  <testsuite name="ShowNotifications" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:11" time="4.09" tests="2">
    <testcase classname="ShowNotifications should render and display the &quot;ShowNotifications&quot; component on screen" name="ShowNotifications should render and display the &quot;ShowNotifications&quot; component on screen" time="0.02">
    </testcase>
    <testcase classname="ShowNotifications should render the ToggleNotifications child component" name="ShowNotifications should render the ToggleNotifications child component" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="LinkExpiredModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:11" time="5.676" tests="6">
    <testcase classname="LinkExpiredModal should render the component when is_link_expired_modal_visible is true" name="LinkExpiredModal should render the component when is_link_expired_modal_visible is true" time="0.241">
    </testcase>
    <testcase classname="LinkExpiredModal should not render the component when is_link_expired_modal_visible is false" name="LinkExpiredModal should not render the component when is_link_expired_modal_visible is false" time="0.004">
    </testcase>
    <testcase classname="LinkExpiredModal should not render the component close and resend email buttons" name="LinkExpiredModal should not render the component close and resend email buttons" time="0.448">
    </testcase>
    <testcase classname="LinkExpiredModal should keep the resend mail button disabled until a valid email is entered" name="LinkExpiredModal should keep the resend mail button disabled until a valid email is entered" time="0.324">
    </testcase>
    <testcase classname="LinkExpiredModal should close the modal on clicking close button" name="LinkExpiredModal should close the modal on clicking close button" time="0.254">
    </testcase>
    <testcase classname="LinkExpiredModal should call the verify email websocket API on clicking resend mail button" name="LinkExpiredModal should call the verify email websocket API on clicking resend mail button" time="1.008">
    </testcase>
  </testsuite>
  <testsuite name="AccountSwitcher" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:14" time="4.59" tests="4">
    <testcase classname="AccountSwitcher should render account switcher" name="AccountSwitcher should render account switcher" time="0.45">
    </testcase>
    <testcase classname="AccountSwitcher should render a loader when landing companies are not loaded" name="AccountSwitcher should render a loader when landing companies are not loaded" time="0.179">
    </testcase>
    <testcase classname="AccountSwitcher should list the real accounts in real tab when landing companies are loaded" name="AccountSwitcher should list the real accounts in real tab when landing companies are loaded" time="0.159">
    </testcase>
    <testcase classname="AccountSwitcher should list the demo accounts in demo tab when landing companies are loaded" name="AccountSwitcher should list the demo accounts in demo tab when landing companies are loaded" time="0.451">
    </testcase>
  </testsuite>
  <testsuite name="BinaryLink component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:14" time="5.037" tests="5">
    <testcase classname="BinaryLink component should render &quot;children&quot; when passed in" name="BinaryLink component should render &quot;children&quot; when passed in" time="0.053">
    </testcase>
    <testcase classname="BinaryLink component should have &quot;active_class__link-wrapper&quot; class when &quot;active_class&quot; property is passed" name="BinaryLink component should have &quot;active_class__link-wrapper&quot; class when &quot;active_class&quot; property is passed" time="0.011">
    </testcase>
    <testcase classname="BinaryLink component should render &quot;NavLink&quot; when &quot;to&quot; property is passed and we do not have &quot;href&quot;" name="BinaryLink component should render &quot;NavLink&quot; when &quot;to&quot; property is passed and we do not have &quot;href&quot;" time="0.024">
    </testcase>
    <testcase classname="BinaryLink component should render &quot;a&quot; element whe property &quot;to&quot; is not passed" name="BinaryLink component should render &quot;a&quot; element whe property &quot;to&quot; is not passed" time="0.002">
    </testcase>
    <testcase classname="BinaryLink component should call &quot;setError&quot; property when &quot;has_error&quot; property is &quot;true&quot;" name="BinaryLink component should call &quot;setError&quot; property when &quot;has_error&quot; property is &quot;true&quot;" time="0.056">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountWizard /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:14" time="4.717" tests="4">
    <testcase classname="&lt;AccountWizard /&gt; should render AccountWizard component" name="&lt;AccountWizard /&gt; should render AccountWizard component" time="0.085">
    </testcase>
    <testcase classname="&lt;AccountWizard /&gt; should fetch ResidenceList if ResidenceList is empty " name="&lt;AccountWizard /&gt; should fetch ResidenceList if ResidenceList is empty " time="0.046">
    </testcase>
    <testcase classname="&lt;AccountWizard /&gt; should fetch StatesList if StatesList is empty " name="&lt;AccountWizard /&gt; should fetch StatesList if StatesList is empty " time="0.013">
    </testcase>
    <testcase classname="&lt;AccountWizard /&gt; should invoke Create account and IDV data submission APIs on click of Submit button" name="&lt;AccountWizard /&gt; should invoke Create account and IDV data submission APIs on click of Submit button" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="NotificationsDialog" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:14" time="5.093" tests="2">
    <testcase classname="NotificationsDialog should render the component CSSTranition in desktop mode" name="NotificationsDialog should render the component CSSTranition in desktop mode" time="0.033">
    </testcase>
    <testcase classname="NotificationsDialog should render the component MobileDialog in mobile mode" name="NotificationsDialog should render the component MobileDialog in mobile mode" time="0.187">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OneTimeDepositModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:15" time="5.456" tests="5">
    <testcase classname="&lt;OneTimeDepositModal /&gt; should render one time deposit modal" name="&lt;OneTimeDepositModal /&gt; should render one time deposit modal" time="0.206">
    </testcase>
    <testcase classname="&lt;OneTimeDepositModal /&gt; should render loading component if iframe has not loaded" name="&lt;OneTimeDepositModal /&gt; should render loading component if iframe has not loaded" time="0.026">
    </testcase>
    <testcase classname="&lt;OneTimeDepositModal /&gt; should close modal if user unable to deposit because they have deposited" name="&lt;OneTimeDepositModal /&gt; should close modal if user unable to deposit because they have deposited" time="0.099">
    </testcase>
    <testcase classname="&lt;OneTimeDepositModal /&gt; should close modal after cllicking ESC key" name="&lt;OneTimeDepositModal /&gt; should close modal after cllicking ESC key" time="0.038">
    </testcase>
    <testcase classname="&lt;OneTimeDepositModal /&gt; should open live chat widget on click" name="&lt;OneTimeDepositModal /&gt; should open live chat widget on click" time="0.077">
    </testcase>
  </testsuite>
  <testsuite name="LanguageLink component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:18" time="4.307" tests="2">
    <testcase classname="LanguageLink component should render language icon with language when not clickable" name="LanguageLink component should render language icon with language when not clickable" time="0.023">
    </testcase>
    <testcase classname="LanguageLink component should render language icon with language when clickable" name="LanguageLink component should render language icon with language when clickable" time="0.157">
    </testcase>
  </testsuite>
  <testsuite name="DTraderHeader" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:19" time="3.526" tests="2">
    <testcase classname="DTraderHeader should render Platform switcher, Traders Home button, Menu Links, Account actions and Real Account SignUp components, in Desktop view" name="DTraderHeader should render Platform switcher, Traders Home button, Menu Links, Account actions and Real Account SignUp components, in Desktop view" time="0.263">
    </testcase>
    <testcase classname="DTraderHeader should render Toggle Menu Drawer, Menu Links, Header Account Action and Real Account SignUp components, in Mobile view" name="DTraderHeader should render Toggle Menu Drawer, Menu Links, Header Account Action and Real Account SignUp components, in Mobile view" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="TradersHubOnboarding" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:18" time="4.708" tests="3">
    <testcase classname="TradersHubOnboarding should render &quot;TradersHubOnboarding&quot; component, and redirect to onboarding should work" name="TradersHubOnboarding should render &quot;TradersHubOnboarding&quot; component, and redirect to onboarding should work" time="0.266">
    </testcase>
    <testcase classname="TradersHubOnboarding should display Traders hub onboarding icon + popover tooltip should appear on hover in desktop" name="TradersHubOnboarding should display Traders hub onboarding icon + popover tooltip should appear on hover in desktop" time="0.304">
    </testcase>
    <testcase classname="TradersHubOnboarding should not display popover tooltip in mobile, and redirect to onboarding should work" name="TradersHubOnboarding should not display popover tooltip in mobile, and redirect to onboarding should work" time="0.289">
    </testcase>
  </testsuite>
  <testsuite name="TradersHubHeader" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:19" time="4.245" tests="6">
    <testcase classname="TradersHubHeader should render &quot;CurrencySelectionModal&quot; as a child component" name="TradersHubHeader should render &quot;CurrencySelectionModal&quot; as a child component" time="0.363">
    </testcase>
    <testcase classname="TradersHubHeader should render &quot;RealAccountSignup&quot; as a child component" name="TradersHubHeader should render &quot;RealAccountSignup&quot; as a child component" time="0.017">
    </testcase>
    <testcase classname="TradersHubHeader should render &quot;View onboarding&quot; option in the header" name="TradersHubHeader should render &quot;View onboarding&quot; option in the header" time="0.168">
    </testcase>
    <testcase classname="TradersHubHeader should render &quot;Notifications&quot; option in the header" name="TradersHubHeader should render &quot;Notifications&quot; option in the header" time="0.013">
    </testcase>
    <testcase classname="TradersHubHeader should render &quot;Manage account settings&quot; option in the header" name="TradersHubHeader should render &quot;Manage account settings&quot; option in the header" time="0.091">
    </testcase>
    <testcase classname="TradersHubHeader should render the Cashier button in mobile view" name="TradersHubHeader should render the Cashier button in mobile view" time="0.106">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ToggleMenuDrawer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:19" time="4.532" tests="1">
    <testcase classname="&lt;ToggleMenuDrawer /&gt; should clear timeout after component was unmount" name="&lt;ToggleMenuDrawer /&gt; should clear timeout after component was unmount" time="0.386">
    </testcase>
  </testsuite>
  <testsuite name="RouteWithSubRoutes component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:21" time="4.169" tests="2">
    <testcase classname="RouteWithSubRoutes component should render the &quot;RouteWithSubRoutes&quot; component" name="RouteWithSubRoutes component should render the &quot;RouteWithSubRoutes&quot; component" time="0.207">
    </testcase>
    <testcase classname="RouteWithSubRoutes component should render properties" name="RouteWithSubRoutes component should render properties" time="0.054">
    </testcase>
  </testsuite>
  <testsuite name="NotificationListWrapper" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:22" time="4.592" tests="4">
    <testcase classname="NotificationListWrapper should render and display the &quot;NotificationListWrapper&quot; component on screen" name="NotificationListWrapper should render and display the &quot;NotificationListWrapper&quot; component on screen" time="0.093">
    </testcase>
    <testcase classname="NotificationListWrapper should render the &quot;EmptyNotification&quot; component if notifications list is empty" name="NotificationListWrapper should render the &quot;EmptyNotification&quot; component if notifications list is empty" time="0.029">
    </testcase>
    <testcase classname="NotificationListWrapper should render the &quot;NotificationsList&quot; component if notifications list is not empty" name="NotificationListWrapper should render the &quot;NotificationsList&quot; component if notifications list is not empty" time="0.083">
    </testcase>
    <testcase classname="NotificationListWrapper should render the &quot;NotificationsClearAllFooter&quot; component" name="NotificationListWrapper should render the &quot;NotificationsClearAllFooter&quot; component" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Helpers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:24" time="3.688" tests="12">
    <testcase classname="Helpers normalizePath should return / as if path is empty" name="Helpers normalizePath should return / as if path is empty" time="0.006">
    </testcase>
    <testcase classname="Helpers normalizePath should return / + path as if path does not have /" name="Helpers normalizePath should return / + path as if path does not have /" time="0.002">
    </testcase>
    <testcase classname="Helpers normalizePath should return / + path as if path does have /" name="Helpers normalizePath should return / + path as if path does have /" time="0.001">
    </testcase>
    <testcase classname="Helpers findRouteByPath should return undefined when path is not in routes_config" name="Helpers findRouteByPath should return undefined when path is not in routes_config" time="0.008">
    </testcase>
    <testcase classname="Helpers findRouteByPath should return route_info when path is in routes_config and is not nested" name="Helpers findRouteByPath should return route_info when path is in routes_config and is not nested" time="0.004">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return true if route needs user to be authenticated and user is logged in" name="Helpers isRouteVisible should return true if route needs user to be authenticated and user is logged in" time="0.001">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return false if route needs user to be authenticated and user is not logged in" name="Helpers isRouteVisible should return false if route needs user to be authenticated and user is not logged in" time="0.001">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is not logged in" name="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is not logged in" time="0.001">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is logged in" name="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is logged in" time="0.001">
    </testcase>
    <testcase classname="Helpers getPath should return param values in params as a part of path" name="Helpers getPath should return param values in params as a part of path" time="0.006">
    </testcase>
    <testcase classname="Helpers getPath should return path as before if there is no params" name="Helpers getPath should return path as before if there is no params" time="0.003">
    </testcase>
    <testcase classname="Helpers getContractPath should return the path of contract with contract_id passed" name="Helpers getContractPath should return the path of contract with contract_id passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="DefaultHeader" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:23" time="4.38" tests="2">
    <testcase classname="DefaultHeader should render Platform switcher, Menu Links, Account action and Real Account SignUp components, in Desktop view" name="DefaultHeader should render Platform switcher, Menu Links, Account action and Real Account SignUp components, in Desktop view" time="0.114">
    </testcase>
    <testcase classname="DefaultHeader should render Toggle Menu Drawer, Menu Links, Account action and Real Account SignUp components, in Mobile view" name="DefaultHeader should render Toggle Menu Drawer, Menu Links, Account action and Real Account SignUp components, in Mobile view" time="0.053">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AppContents/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:23" time="4.581" tests="3">
    <testcase classname="&lt;AppContents/&gt; should render the Cookie banner with Accept reject button" name="&lt;AppContents/&gt; should render the Cookie banner with Accept reject button" time="0.366">
    </testcase>
    <testcase classname="&lt;AppContents/&gt; should not render the cookie banner when it is not a eu country" name="&lt;AppContents/&gt; should not render the cookie banner when it is not a eu country" time="0.02">
    </testcase>
    <testcase classname="&lt;AppContents/&gt; should move scroll to top" name="&lt;AppContents/&gt; should move scroll to top" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="AccountInfo component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:24" time="5.222" tests="13">
    <testcase classname="AccountInfo component should show &quot;disabled_message&quot; when &quot;is_disabled&quot; property is &quot;true&quot;" name="AccountInfo component should show &quot;disabled_message&quot; when &quot;is_disabled&quot; property is &quot;true&quot;" time="0.139">
    </testcase>
    <testcase classname="AccountInfo component should have &quot;acc-info--is-disabled&quot; class when &quot;is_disabled&quot; property is &quot;true&quot;" name="AccountInfo component should have &quot;acc-info--is-disabled&quot; class when &quot;is_disabled&quot; property is &quot;true&quot;" time="0.055">
    </testcase>
    <testcase classname="AccountInfo component should have &quot;acc-info--is-virtual&quot; class when &quot;is_virtual&quot; property is &quot;true&quot;" name="AccountInfo component should have &quot;acc-info--is-virtual&quot; class when &quot;is_virtual&quot; property is &quot;true&quot;" time="0.008">
    </testcase>
    <testcase classname="AccountInfo component should not have &quot;acc-info--show&quot; class when &quot;is_dialog_on&quot; property is &quot;false&quot;" name="AccountInfo component should not have &quot;acc-info--show&quot; class when &quot;is_dialog_on&quot; property is &quot;false&quot;" time="0.002">
    </testcase>
    <testcase classname="AccountInfo component can not &quot;toggleDialog&quot; when &quot;is_disabled&quot; property is &quot;true&quot;" name="AccountInfo component can not &quot;toggleDialog&quot; when &quot;is_disabled&quot; property is &quot;true&quot;" time="0.006">
    </testcase>
    <testcase classname="AccountInfo component should render &quot;AccountInfoIcon&quot; with the proper className" name="AccountInfo component should render &quot;AccountInfoIcon&quot; with the proper className" time="0.056">
    </testcase>
    <testcase classname="AccountInfo component should render &quot;IcLock&quot; icon when &quot;is_disabled&quot; property is &quot;true&quot;" name="AccountInfo component should render &quot;IcLock&quot; icon when &quot;is_disabled&quot; property is &quot;true&quot;" time="0.003">
    </testcase>
    <testcase classname="AccountInfo component should render &quot;IcChevronDownBold&quot; icon when &quot;is_disabled&quot; property is &quot;false&quot;" name="AccountInfo component should render &quot;IcChevronDownBold&quot; icon when &quot;is_disabled&quot; property is &quot;false&quot;" time="0.003">
    </testcase>
    <testcase classname="AccountInfo component should not render balance section when &quot;currency&quot; property passed" name="AccountInfo component should not render balance section when &quot;currency&quot; property passed" time="0.039">
    </testcase>
    <testcase classname="AccountInfo component should have &quot;acc-info__balance--no-currency&quot; class when &quot;is_virtual&quot; property is &quot;false&quot; and we don&apos;t have &quot;currency&quot; property" name="AccountInfo component should have &quot;acc-info__balance--no-currency&quot; class when &quot;is_virtual&quot; property is &quot;false&quot; and we don&apos;t have &quot;currency&quot; property" time="0.005">
    </testcase>
    <testcase classname="AccountInfo component should have &quot;No currency assigned&quot; text when we don&apos;t have &quot;currency&quot; property" name="AccountInfo component should have &quot;No currency assigned&quot; text when we don&apos;t have &quot;currency&quot; property" time="0.002">
    </testcase>
    <testcase classname="AccountInfo component should have &quot;123456789 USD&quot; text when we have &quot;currency&quot; and &quot;balance&quot; properties" name="AccountInfo component should have &quot;123456789 USD&quot; text when we have &quot;currency&quot; and &quot;balance&quot; properties" time="0.003">
    </testcase>
    <testcase classname="AccountInfo component should render proper &quot;AccountType&quot; base on the passed properties" name="AccountInfo component should render proper &quot;AccountType&quot; base on the passed properties" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="NotificationsClearAllFooter" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:25" time="4.105" tests="5">
    <testcase classname="NotificationsClearAllFooter should render and display the &quot;NotificationsClearAllFooter&quot; component on screen" name="NotificationsClearAllFooter should render and display the &quot;NotificationsClearAllFooter&quot; component on screen" time="0.021">
    </testcase>
    <testcase classname="NotificationsClearAllFooter should render the &quot;Clear All&quot; button" name="NotificationsClearAllFooter should render the &quot;Clear All&quot; button" time="0.092">
    </testcase>
    <testcase classname="NotificationsClearAllFooter should render the button in disabled state if there are no notifications" name="NotificationsClearAllFooter should render the button in disabled state if there are no notifications" time="0.099">
    </testcase>
    <testcase classname="NotificationsClearAllFooter should render the button in enabled state if there are notifications available" name="NotificationsClearAllFooter should render the button in enabled state if there are notifications available" time="0.068">
    </testcase>
    <testcase classname="NotificationsClearAllFooter should fire the &quot;clearNotifications&quot; method on clicking the button" name="NotificationsClearAllFooter should fire the &quot;clearNotifications&quot; method on clicking the button" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="NotificationsList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:28" time="2.847" tests="3">
    <testcase classname="NotificationsList should render the notification header" name="NotificationsList should render the notification header" time="0.151">
    </testcase>
    <testcase classname="NotificationsList should render the notification message" name="NotificationsList should render the notification message" time="0.106">
    </testcase>
    <testcase classname="NotificationsList should render the notification action button" name="NotificationsList should render the notification action button" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="DefaultMobileLinks" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:28" time="2.905" tests="3">
    <testcase classname="DefaultMobileLinks should render &quot;DefaultMobileLinks&quot; with Onboarding, Notifications &amp; link to Account Settings" name="DefaultMobileLinks should render &quot;DefaultMobileLinks&quot; with Onboarding, Notifications &amp; link to Account Settings" time="0.077">
    </testcase>
    <testcase classname="DefaultMobileLinks should display the cashier button" name="DefaultMobileLinks should display the cashier button" time="0.273">
    </testcase>
    <testcase classname="DefaultMobileLinks should fire the &quot;handleClickCashier&quot; event on clicking the button" name="DefaultMobileLinks should fire the &quot;handleClickCashier&quot; event on clicking the button" time="0.11">
    </testcase>
  </testsuite>
  <testsuite name="AccountInfoWallets component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:27" time="4.397" tests="12">
    <testcase classname="AccountInfoWallets component should show &quot;disabled_message&quot; when &quot;is_disabled&quot; property is &quot;true&quot;" name="AccountInfoWallets component should show &quot;disabled_message&quot; when &quot;is_disabled&quot; property is &quot;true&quot;" time="0.247">
    </testcase>
    <testcase classname="AccountInfoWallets component should have &quot;acc-info--is-disabled&quot; class when &quot;is_disabled&quot; property is &quot;true&quot;" name="AccountInfoWallets component should have &quot;acc-info--is-disabled&quot; class when &quot;is_disabled&quot; property is &quot;true&quot;" time="0.285">
    </testcase>
    <testcase classname="AccountInfoWallets component should not have &quot;acc-info--show&quot; class when &quot;is_dialog_on&quot; property is &quot;false&quot;" name="AccountInfoWallets component should not have &quot;acc-info--show&quot; class when &quot;is_dialog_on&quot; property is &quot;false&quot;" time="0.016">
    </testcase>
    <testcase classname="AccountInfoWallets component can not &quot;toggleDialog&quot; when &quot;is_disabled&quot; property is &quot;true&quot;" name="AccountInfoWallets component can not &quot;toggleDialog&quot; when &quot;is_disabled&quot; property is &quot;true&quot;" time="0.028">
    </testcase>
    <testcase classname="AccountInfoWallets component should render &quot;Options&quot; icon and &quot;WalletIcon&quot;" name="AccountInfoWallets component should render &quot;Options&quot; icon and &quot;WalletIcon&quot;" time="0.125">
    </testcase>
    <testcase classname="AccountInfoWallets component should render &quot;DEMO&quot; label" name="AccountInfoWallets component should render &quot;DEMO&quot; label" time="0.022">
    </testcase>
    <testcase classname="AccountInfoWallets component should NOT render &quot;SVG&quot; label" name="AccountInfoWallets component should NOT render &quot;SVG&quot; label" time="0.067">
    </testcase>
    <testcase classname="AccountInfoWallets component should render &quot;MALTA&quot; label" name="AccountInfoWallets component should render &quot;MALTA&quot; label" time="0.026">
    </testcase>
    <testcase classname="AccountInfoWallets component should render &quot;IcLock&quot; icon when &quot;is_disabled&quot; property is &quot;true&quot;" name="AccountInfoWallets component should render &quot;IcLock&quot; icon when &quot;is_disabled&quot; property is &quot;true&quot;" time="0.011">
    </testcase>
    <testcase classname="AccountInfoWallets component should render &quot;IcChevronDownBold&quot; icon when &quot;is_disabled&quot; property is &quot;false&quot;" name="AccountInfoWallets component should render &quot;IcChevronDownBold&quot; icon when &quot;is_disabled&quot; property is &quot;false&quot;" time="0.007">
    </testcase>
    <testcase classname="AccountInfoWallets component should render balance section when currency exists" name="AccountInfoWallets component should render balance section when currency exists" time="0.007">
    </testcase>
    <testcase classname="AccountInfoWallets component should have &quot;1.234.56 USD&quot; text" name="AccountInfoWallets component should have &quot;1.234.56 USD&quot; text" time="0.102">
    </testcase>
  </testsuite>
  <testsuite name="MenuLink" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:27" time="3.892" tests="7">
    <testcase classname="MenuLink should render no links with icon and text without passing link_to" name="MenuLink should render no links with icon and text without passing link_to" time="0.153">
    </testcase>
    <testcase classname="MenuLink should render menu link if deriv_static_url" name="MenuLink should render menu link if deriv_static_url" time="0.097">
    </testcase>
    <testcase classname="MenuLink should render with passing link_to" name="MenuLink should render with passing link_to" time="0.159">
    </testcase>
    <testcase classname="MenuLink should not render if  is_hidden is passed" name="MenuLink should not render if  is_hidden is passed" time="0.004">
    </testcase>
    <testcase classname="MenuLink should render menu link for mobile and two icons with passed suffix_icon" name="MenuLink should render menu link for mobile and two icons with passed suffix_icon" time="0.067">
    </testcase>
    <testcase classname="MenuLink should render menu link for cashier for real account on traders hub" name="MenuLink should render menu link for cashier for real account on traders hub" time="0.032">
    </testcase>
    <testcase classname="MenuLink should render menu link for cashier for virtual account on traders hub" name="MenuLink should render menu link for cashier for virtual account on traders hub" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="TradersHubHomeButton" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:29" time="3.475" tests="2">
    <testcase classname="TradersHubHomeButton should display the text Trader&apos;s Hub in the header" name="TradersHubHomeButton should display the text Trader&apos;s Hub in the header" time="0.037">
    </testcase>
    <testcase classname="TradersHubHomeButton should have the --active class if in traders hub route" name="TradersHubHomeButton should have the --active class if in traders hub route" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InformationSubmittedModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:29" time="3.674" tests="2">
    <testcase classname="&lt;InformationSubmittedModal/&gt; should render InformationSubmittedModal component" name="&lt;InformationSubmittedModal/&gt; should render InformationSubmittedModal component" time="0.201">
    </testcase>
    <testcase classname="&lt;InformationSubmittedModal/&gt; should render InformationSubmittedModal component with title and content" name="&lt;InformationSubmittedModal/&gt; should render InformationSubmittedModal component with title and content" time="0.156">
    </testcase>
  </testsuite>
  <testsuite name="EmptyNotification Component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:31" time="3.523" tests="2">
    <testcase classname="EmptyNotification Component should render EmptyNotification component" name="EmptyNotification Component should render EmptyNotification component" time="0.073">
    </testcase>
    <testcase classname="EmptyNotification Component should render the &quot;IcBell&quot; Icon" name="EmptyNotification Component should render the &quot;IcBell&quot; Icon" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="PlatformSwitcher component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:31" time="4.371" tests="5">
    <testcase classname="PlatformSwitcher component should render &lt;PlatformSwitcherLoader /&gt; component if &quot;app_routing_history&quot; is an empty array" name="PlatformSwitcher component should render &lt;PlatformSwitcherLoader /&gt; component if &quot;app_routing_history&quot; is an empty array" time="0.037">
    </testcase>
    <testcase classname="PlatformSwitcher component should have &quot;platform-switcher__preloader--is-mobile&quot; class if &quot;app_routing_history&quot; is an empty array and &quot;isMobile&quot; is &quot;true&quot;" name="PlatformSwitcher component should have &quot;platform-switcher__preloader--is-mobile&quot; class if &quot;app_routing_history&quot; is an empty array and &quot;isMobile&quot; is &quot;true&quot;" time="0.003">
    </testcase>
    <testcase classname="PlatformSwitcher component should render &quot;platform-switcher&quot; if &quot;app_routing_history&quot; is not an empty array" name="PlatformSwitcher component should render &quot;platform-switcher&quot; if &quot;app_routing_history&quot; is not an empty array" time="0.004">
    </testcase>
    <testcase classname="PlatformSwitcher component should not have &quot;platform-switcher--active&quot; class if &quot;app_routing_history&quot; is not an empty array and &quot;is_open&quot; is &quot;false&quot;" name="PlatformSwitcher component should not have &quot;platform-switcher--active&quot; class if &quot;app_routing_history&quot; is not an empty array and &quot;is_open&quot; is &quot;false&quot;" time="0.016">
    </testcase>
    <testcase classname="PlatformSwitcher component should have &quot;platform-switcher--is-mobile&quot; class if &quot;app_routing_history&quot; is not an empty array and &quot;isMobile&quot; is &quot;true&quot;" name="PlatformSwitcher component should have &quot;platform-switcher--is-mobile&quot; class if &quot;app_routing_history&quot; is not an empty array and &quot;isMobile&quot; is &quot;true&quot;" time="0.141">
    </testcase>
  </testsuite>
  <testsuite name="PlatformBox component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:31" time="4.307" tests="2">
    <testcase classname="PlatformBox component should render &quot;icon&quot; and &quot;description&quot;" name="PlatformBox component should render &quot;icon&quot; and &quot;description&quot;" time="0.015">
    </testcase>
    <testcase classname="PlatformDropdown component should render proper component base on the &quot;link_to&quot; property" name="PlatformDropdown component should render proper component base on the &quot;link_to&quot; property" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ReadyToVerifyModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:32" time="4.607" tests="2">
    <testcase classname="&lt;ReadyToVerifyModal /&gt; should render the component with deposit success message if client deposited for the first time" name="&lt;ReadyToVerifyModal /&gt; should render the component with deposit success message if client deposited for the first time" time="0.431">
    </testcase>
    <testcase classname="&lt;ReadyToVerifyModal /&gt; should render the component with account created messages if client skip first_time deposit" name="&lt;ReadyToVerifyModal /&gt; should render the component with account created messages if client skip first_time deposit" time="0.051">
    </testcase>
  </testsuite>
  <testsuite name="Notification component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:33" time="3.803" tests="6">
    <testcase classname="Notification component should render the NotificationBanner component when &quot;data.type&quot; is &quot;news&quot;" name="Notification component should render the NotificationBanner component when &quot;data.type&quot; is &quot;news&quot;" time="0.02">
    </testcase>
    <testcase classname="Notification component should render the NotificationBanner component when &quot;data.type&quot; is &quot;trustpilot&quot;" name="Notification component should render the NotificationBanner component when &quot;data.type&quot; is &quot;trustpilot&quot;" time="0.005">
    </testcase>
    <testcase classname="Notification component should render the NotificationPromo component when &quot;data.type&quot; is &quot;promotions&quot;" name="Notification component should render the NotificationPromo component when &quot;data.type&quot; is &quot;promotions&quot;" time="0.003">
    </testcase>
    <testcase classname="Notification component should render the NotificationOrder component when &quot;data.type&quot; is &quot;p2p_completed_order&quot;" name="Notification component should render the NotificationOrder component when &quot;data.type&quot; is &quot;p2p_completed_order&quot;" time="0.003">
    </testcase>
    <testcase classname="Notification component should render the default component when &quot;data.type&quot; is not one of the above" name="Notification component should render the default component when &quot;data.type&quot; is not one of the above" time="0.002">
    </testcase>
    <testcase classname="Notification component should render the &quot;notify_financial_assessment&quot; notification" name="Notification component should render the &quot;notify_financial_assessment&quot; notification" time="0.048">
    </testcase>
  </testsuite>
  <testsuite name="ToggleLanguageSettings Component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:33" time="4.266" tests="2">
    <testcase classname="ToggleLanguageSettings Component should has &quot;ic-settings-active&quot; class when &quot;is_settings_visible&quot; is true" name="ToggleLanguageSettings Component should has &quot;ic-settings-active&quot; class when &quot;is_settings_visible&quot; is true" time="0.203">
    </testcase>
    <testcase classname="ToggleLanguageSettings Component should call &quot;toggleSettings&quot; function when the user clicked on the link" name="ToggleLanguageSettings Component should call &quot;toggleSettings&quot; function when the user clicked on the link" time="0.062">
    </testcase>
  </testsuite>
  <testsuite name="AccountInfoIcon component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:35" time="3.131" tests="3">
    <testcase classname="AccountInfoIcon component should render icon with testid" name="AccountInfoIcon component should render icon with testid" time="0.028">
    </testcase>
    <testcase classname="AccountInfoIcon component should render icon for virtual" name="AccountInfoIcon component should render icon for virtual" time="0.007">
    </testcase>
    <testcase classname="AccountInfoIcon component should render icon for not virtual and usd currency" name="AccountInfoIcon component should render icon for not virtual and usd currency" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="LoginButton" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:35" time="3.419" tests="1">
    <testcase classname="LoginButton should have the right className base on the property" name="LoginButton should have the right className base on the property" time="0.145">
    </testcase>
  </testsuite>
  <testsuite name="EmailResent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:35" time="3.757" tests="2">
    <testcase classname="EmailResent should render the component" name="EmailResent should render the component" time="0.046">
    </testcase>
    <testcase classname="EmailResent should display the email sent svg icon" name="EmailResent should display the email sent svg icon" time="0.161">
    </testcase>
  </testsuite>
  <testsuite name="AccountInfoWrapper component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:36" time="915.346" tests="4">
    <testcase classname="AccountInfoWrapper component should render children when is_disabled and disabled_message are undefined" name="AccountInfoWrapper component should render children when is_disabled and disabled_message are undefined" time="0.013">
    </testcase>
    <testcase classname="AccountInfoWrapper component should render children when is_disabled = true and disabled_message is undefined" name="AccountInfoWrapper component should render children when is_disabled = true and disabled_message is undefined" time="0.002">
    </testcase>
    <testcase classname="AccountInfoWrapper component should render children when is_disabled = false and disabled_message is test" name="AccountInfoWrapper component should render children when is_disabled = false and disabled_message is test" time="0.002">
    </testcase>
    <testcase classname="AccountInfoWrapper component should render children inside of Popover when is_disabled = true and disabled_message is test" name="AccountInfoWrapper component should render children inside of Popover when is_disabled = true and disabled_message is test" time="0.072">
    </testcase>
  </testsuite>
  <testsuite name="network-status component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:36" time="916.053" tests="6">
    <testcase classname="network-status component should has &quot;network-status__wrapper--is-mobile&quot; class when the &quot;is_mobile&quot; property is true" name="network-status component should has &quot;network-status__wrapper--is-mobile&quot; class when the &quot;is_mobile&quot; property is true" time="0.044">
    </testcase>
    <testcase classname="network-status component should has correct class based on class passed in the &quot;status&quot; property" name="network-status component should has correct class based on class passed in the &quot;status&quot; property" time="0.023">
    </testcase>
    <testcase classname="network-status component should has correct class based on class passed in the &quot;status&quot; as online property" name="network-status component should has correct class based on class passed in the &quot;status&quot; as online property" time="0.009">
    </testcase>
    <testcase classname="network-status component should has correct class based on class passed in the &quot;status&quot; as blinker property" name="network-status component should has correct class based on class passed in the &quot;status&quot; as blinker property" time="0.09">
    </testcase>
    <testcase classname="network-status component should contain &quot;Popover&quot; with default message when &quot;status.tooltip&quot; is empty" name="network-status component should contain &quot;Popover&quot; with default message when &quot;status.tooltip&quot; is empty" time="0.143">
    </testcase>
    <testcase classname="network-status component should contain &quot;Tooltip&quot; message passed in the status property" name="network-status component should contain &quot;Tooltip&quot; message passed in the status property" time="0.062">
    </testcase>
  </testsuite>
  <testsuite name="CloseButton component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:50" time="2.323" tests="2">
    <testcase classname="CloseButton component should render the CloseButton component" name="CloseButton component should render the CloseButton component" time="0.104">
    </testcase>
    <testcase classname="CloseButton component the button should has the &quot;test-class&quot; className" name="CloseButton component the button should has the &quot;test-class&quot; className" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="WalletBadge" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:38" time="915.173" tests="3">
    <testcase classname="WalletBadge Should render demo badge" name="WalletBadge Should render demo badge" time="0.052">
    </testcase>
    <testcase classname="WalletBadge Should render svg badge" name="WalletBadge Should render svg badge" time="0.012">
    </testcase>
    <testcase classname="WalletBadge Should render malta badge" name="WalletBadge Should render malta badge" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="DisplayAccountType component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:52" time="1.688" tests="5">
    <testcase classname="DisplayAccountType component should render &quot;Multipliers&quot;" name="DisplayAccountType component should render &quot;Multipliers&quot;" time="0.026">
    </testcase>
    <testcase classname="DisplayAccountType component should render &quot;Gaming&quot; if is_united_kingdom = true" name="DisplayAccountType component should render &quot;Gaming&quot; if is_united_kingdom = true" time="0.016">
    </testcase>
    <testcase classname="DisplayAccountType component should render &quot;Options&quot; for Belgium" name="DisplayAccountType component should render &quot;Options&quot; for Belgium" time="0.004">
    </testcase>
    <testcase classname="DisplayAccountType component should render &quot;Options&quot; when is_isle_of_man = false" name="DisplayAccountType component should render &quot;Options&quot; when is_isle_of_man = false" time="0.009">
    </testcase>
    <testcase classname="DisplayAccountType component should render &quot;Derived&quot; when is_isle_of_man = false" name="DisplayAccountType component should render &quot;Derived&quot; when is_isle_of_man = false" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="ToggleFullScreen Component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:38" time="915.417" tests="3">
    <testcase classname="ToggleFullScreen Component should not have &quot;ic-fullscreen--active&quot; class when &quot;is_full_screen&quot; is &quot;false&quot;" name="ToggleFullScreen Component should not have &quot;ic-fullscreen--active&quot; class when &quot;is_full_screen&quot; is &quot;false&quot;" time="0.047">
    </testcase>
    <testcase classname="ToggleFullScreen Component should have &quot;Full screen&quot; text when &quot;is_full_screen&quot; is &quot;false&quot;" name="ToggleFullScreen Component should have &quot;Full screen&quot; text when &quot;is_full_screen&quot; is &quot;false&quot;" time="0.196">
    </testcase>
    <testcase classname="ToggleFullScreen Component should render &quot;IcFullScreen&quot; icon when &quot;is_full_screen&quot; is &quot;false&quot;" name="ToggleFullScreen Component should render &quot;IcFullScreen&quot; icon when &quot;is_full_screen&quot; is &quot;false&quot;" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="ToggleSettings Component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T02:57:39" time="915.399" tests="3">
    <testcase classname="ToggleSettings Component should render toggle settings with &quot;ic-settings&quot; footer class" name="ToggleSettings Component should render toggle settings with &quot;ic-settings&quot; footer class" time="0.054">
    </testcase>
    <testcase classname="ToggleSettings Component should contain &quot;IcGear&quot; icon" name="ToggleSettings Component should contain &quot;IcGear&quot; icon" time="0.098">
    </testcase>
    <testcase classname="ToggleSettings Component should call &quot;toggleSettings&quot; function when the user clicked on the link" name="ToggleSettings Component should call &quot;toggleSettings&quot; function when the user clicked on the link" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="AccountSwitcherWalletList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:52" time="1.784" tests="1">
    <testcase classname="AccountSwitcherWalletList should render list items based on the number of wallets" name="AccountSwitcherWalletList should render list items based on the number of wallets" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="validations" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:53" time="2.585" tests="8">
    <testcase classname="validations validates addressLine1 correctly without svg flag" name="validations validates addressLine1 correctly without svg flag" time="0.007">
    </testcase>
    <testcase classname="validations validates addressLine1 correctly with svg flag" name="validations validates addressLine1 correctly with svg flag" time="0.006">
    </testcase>
    <testcase classname="validations validates addressLine2 correctly" name="validations validates addressLine2 correctly" time="0.004">
    </testcase>
    <testcase classname="validations validates addressLine2 correctly with svg flag" name="validations validates addressLine2 correctly with svg flag" time="0.004">
    </testcase>
    <testcase classname="validations validates addressPostcode correctly with country gb" name="validations validates addressPostcode correctly with country gb" time="0.004">
    </testcase>
    <testcase classname="validations validates addressPostcode correctly with country id" name="validations validates addressPostcode correctly with country id" time="0.018">
    </testcase>
    <testcase classname="validations validates addressState correctly" name="validations validates addressState correctly" time="0.006">
    </testcase>
    <testcase classname="validations validates addressCity correctly" name="validations validates addressCity correctly" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="getSelectedDocumentConfigData" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:53" time="2.678" tests="4">
    <testcase classname="getSelectedDocumentConfigData should return undefined if list is empty" name="getSelectedDocumentConfigData should return undefined if list is empty" time="0.001">
    </testcase>
    <testcase classname="getSelectedDocumentConfigData should return document congfig if document type is matched" name="getSelectedDocumentConfigData should return document congfig if document type is matched" time="0.001">
    </testcase>
    <testcase classname="getIDVFormValidationSchema should return return true when data matches schema" name="getIDVFormValidationSchema should return return true when data matches schema" time="0.06">
    </testcase>
    <testcase classname="getIDVFormValidationSchema should return false when data fails to match schema" name="getIDVFormValidationSchema should return false when data fails to match schema" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="CashierModalRoute" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:54" time="2.837" tests="1">
    <testcase classname="CashierModalRoute renders WalletCashier" name="CashierModalRoute renders WalletCashier" time="0.105">
    </testcase>
  </testsuite>
  <testsuite name="WalletsListingRoute" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:54" time="2.876" tests="5">
    <testcase classname="WalletsListingRoute renders DesktopWalletsList, WalletsAddMoreCarousel and WalletTourGuide correctly on desktop" name="WalletsListingRoute renders DesktopWalletsList, WalletsAddMoreCarousel and WalletTourGuide correctly on desktop" time="0.019">
    </testcase>
    <testcase classname="WalletsListingRoute renders WalletsCarousel and WalletsAddMoreCarousel correctly on mobile" name="WalletsListingRoute renders WalletsCarousel and WalletsAddMoreCarousel correctly on mobile" time="0.006">
    </testcase>
    <testcase classname="WalletsListingRoute calls switchAccount when there is no active wallet" name="WalletsListingRoute calls switchAccount when there is no active wallet" time="0.003">
    </testcase>
    <testcase classname="WalletsListingRoute does not call switchAccount when there is an active wallet" name="WalletsListingRoute does not call switchAccount when there is an active wallet" time="0.002">
    </testcase>
    <testcase classname="WalletsListingRoute calls switchAccount with the first account when there is no active wallet" name="WalletsListingRoute calls switchAccount with the first account when there is no active wallet" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useDevice" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:54" time="121.086" tests="3">
    <testcase classname="useDevice should correctly identify a desktop device" name="useDevice should correctly identify a desktop device" time="0.208">
    </testcase>
    <testcase classname="useDevice should correctly identify a mobile device" name="useDevice should correctly identify a mobile device" time="0.04">
    </testcase>
    <testcase classname="useDevice should correctly identify a tablet device" name="useDevice should correctly identify a tablet device" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Divider" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:56" time="121.381" tests="3">
    <testcase classname="Divider should render proper borderColor" name="Divider should render proper borderColor" time="0.02">
    </testcase>
    <testcase classname="Divider should render proper margin" name="Divider should render proper margin" time="0.003">
    </testcase>
    <testcase classname="Divider should has proper class" name="Divider should has proper class" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useInputDecimalFormatter" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:55" time="121.597" tests="11">
    <testcase classname="useInputDecimalFormatter should add zeros when fractionDigits is more then the actual fractional digits" name="useInputDecimalFormatter should add zeros when fractionDigits is more then the actual fractional digits" time="0.1">
    </testcase>
    <testcase classname="useInputDecimalFormatter should update the input value correctly when onChange is called" name="useInputDecimalFormatter should update the input value correctly when onChange is called" time="0.005">
    </testcase>
    <testcase classname="useInputDecimalFormatter should handle fractional digits and sign options correctly" name="useInputDecimalFormatter should handle fractional digits and sign options correctly" time="0.002">
    </testcase>
    <testcase classname="useInputDecimalFormatter should round initial value to 2 digits when fractionDigits is undefined" name="useInputDecimalFormatter should round initial value to 2 digits when fractionDigits is undefined" time="0.006">
    </testcase>
    <testcase classname="useInputDecimalFormatter should return empty string when inital is undefined" name="useInputDecimalFormatter should return empty string when inital is undefined" time="0.047">
    </testcase>
    <testcase classname="useInputDecimalFormatter should return empty string when the user clears the input" name="useInputDecimalFormatter should return empty string when the user clears the input" time="0.085">
    </testcase>
    <testcase classname="useInputDecimalFormatter should return old value when an user add 2 dots" name="useInputDecimalFormatter should return old value when an user add 2 dots" time="0.011">
    </testcase>
    <testcase classname="useInputDecimalFormatter should return value with sign after adding sign for integer number" name="useInputDecimalFormatter should return value with sign after adding sign for integer number" time="0.012">
    </testcase>
    <testcase classname="useInputDecimalFormatter should return 0 if the user types 0" name="useInputDecimalFormatter should return 0 if the user types 0" time="0.025">
    </testcase>
    <testcase classname="useInputDecimalFormatter should return previous value if the user types non-digit characters" name="useInputDecimalFormatter should return previous value if the user types non-digit characters" time="0.027">
    </testcase>
    <testcase classname="useInputDecimalFormatter should return previous value if the user types integer part matching this pattern: 0*" name="useInputDecimalFormatter should return previous value if the user types integer part matching this pattern: 0*" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="HelperMessage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:57" time="120.433" tests="4">
    <testcase classname="HelperMessage should render without errors and display message when provided" name="HelperMessage should render without errors and display message when provided" time="0.021">
    </testcase>
    <testcase classname="HelperMessage should display error message when isError is true" name="HelperMessage should display error message when isError is true" time="0.002">
    </testcase>
    <testcase classname="HelperMessage should display character count when maxLength is provided" name="HelperMessage should display character count when maxLength is provided" time="0.004">
    </testcase>
    <testcase classname="HelperMessage should display 0 as character count when inputValue is not provided" name="HelperMessage should display 0 as character count when inputValue is not provided" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="InlineMessage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:57" time="120.55" tests="9">
    <testcase classname="InlineMessage renders with correct size" name="InlineMessage renders with correct size" time="0.076">
    </testcase>
    <testcase classname="InlineMessage renders with correct size on mobile device " name="InlineMessage renders with correct size on mobile device " time="0.011">
    </testcase>
    <testcase classname="InlineMessage renders with correct font size on desktop" name="InlineMessage renders with correct font size on desktop" time="0.019">
    </testcase>
    <testcase classname="InlineMessage renders with correct font size on mobile" name="InlineMessage renders with correct font size on mobile" time="0.06">
    </testcase>
    <testcase classname="InlineMessage renders the correct icon for each type" name="InlineMessage renders the correct icon for each type" time="0.01">
    </testcase>
    <testcase classname="InlineMessage renders the correct variant" name="InlineMessage renders the correct variant" time="0.003">
    </testcase>
    <testcase classname="InlineMessage renders the title if provided" name="InlineMessage renders the title if provided" time="0.001">
    </testcase>
    <testcase classname="InlineMessage renders the message if provided" name="InlineMessage renders the message if provided" time="0.001">
    </testcase>
    <testcase classname="InlineMessage renders the children if provided" name="InlineMessage renders the children if provided" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="WalletTextField" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:55" time="2.159" tests="8">
    <testcase classname="WalletTextField should render the component with default props" name="WalletTextField should render the component with default props" time="0.017">
    </testcase>
    <testcase classname="WalletTextField should handle change event correctly" name="WalletTextField should handle change event correctly" time="0.007">
    </testcase>
    <testcase classname="WalletTextField should render disabled state correctly" name="WalletTextField should render disabled state correctly" time="0.002">
    </testcase>
    <testcase classname="WalletTextField should render left and right icons correctly" name="WalletTextField should render left and right icons correctly" time="0.003">
    </testcase>
    <testcase classname="WalletTextField should render with a label correctly" name="WalletTextField should render with a label correctly" time="0.091">
    </testcase>
    <testcase classname="WalletTextField should render with a helper message correctly" name="WalletTextField should render with a helper message correctly" time="0.004">
    </testcase>
    <testcase classname="WalletTextField should render with an error message correctly" name="WalletTextField should render with an error message correctly" time="0.003">
    </testcase>
    <testcase classname="WalletTextField should render with a warning message if error message exist but value is valid" name="WalletTextField should render with a warning message if error message exist but value is valid" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useSyncLocalStorageClientAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:12:54" time="123.555" tests="2">
    <testcase classname="useSyncLocalStorageClientAccounts Should correctly put data in localStorage for new TRADING account" name="useSyncLocalStorageClientAccounts Should correctly put data in localStorage for new TRADING account" time="0.025">
    </testcase>
    <testcase classname="useSyncLocalStorageClientAccounts Should correctly put data in localStorage for new WALLET account" name="useSyncLocalStorageClientAccounts Should correctly put data in localStorage for new WALLET account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ProgressBar" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:57" time="1.547" tests="3">
    <testcase classname="ProgressBar should render properly with list of indexes" name="ProgressBar should render properly with list of indexes" time="0.047">
    </testcase>
    <testcase classname="ProgressBar should render the active item correctly" name="ProgressBar should render the active item correctly" time="0.056">
    </testcase>
    <testcase classname="ProgressBar should set the active index on Click" name="ProgressBar should set the active index on Click" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="Loader" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:57" time="1.406" tests="2">
    <testcase classname="Loader should render Loader component with default props" name="Loader should render Loader component with default props" time="0.021">
    </testcase>
    <testcase classname="Loader should render Loader component with custom props" name="Loader should render Loader component with custom props" time="0.102">
    </testcase>
  </testsuite>
  <testsuite name="ModalStepWrapper" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:57" time="1.97" tests="10">
    <testcase classname="ModalStepWrapper should render ModalStepWrapper on default values" name="ModalStepWrapper should render ModalStepWrapper on default values" time="0.146">
    </testcase>
    <testcase classname="ModalStepWrapper should render the children passed to ModalStepWrapper" name="ModalStepWrapper should render the children passed to ModalStepWrapper" time="0.01">
    </testcase>
    <testcase classname="ModalStepWrapper should render correctly with title" name="ModalStepWrapper should render correctly with title" time="0.006">
    </testcase>
    <testcase classname="ModalStepWrapper should render correctly with shouldHideHeader true" name="ModalStepWrapper should render correctly with shouldHideHeader true" time="0.003">
    </testcase>
    <testcase classname="ModalStepWrapper should render correctly with shouldHideDerivAppHeader true" name="ModalStepWrapper should render correctly with shouldHideDerivAppHeader true" time="0.002">
    </testcase>
    <testcase classname="ModalStepWrapper should render correctly with renderFooter" name="ModalStepWrapper should render correctly with renderFooter" time="0.023">
    </testcase>
    <testcase classname="ModalStepWrapper should render correctly with shouldFixedFooter false and renderFooter" name="ModalStepWrapper should render correctly with shouldFixedFooter false and renderFooter" time="0.003">
    </testcase>
    <testcase classname="ModalStepWrapper should close modal on close icon click" name="ModalStepWrapper should close modal on close icon click" time="0.02">
    </testcase>
    <testcase classname="ModalStepWrapper should close modal on escape if shouldPreventCloseOnEscape false" name="ModalStepWrapper should close modal on escape if shouldPreventCloseOnEscape false" time="0.029">
    </testcase>
    <testcase classname="ModalStepWrapper should not close modal on escape if shouldPreventCloseOnEscape true" name="ModalStepWrapper should not close modal on escape if shouldPreventCloseOnEscape true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="TradingAccountCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:58" time="1.707" tests="4">
    <testcase classname="TradingAccountCard should render the component with the children" name="TradingAccountCard should render the component with the children" time="0.009">
    </testcase>
    <testcase classname="TradingAccountCard should render the component with the leading component" name="TradingAccountCard should render the component with the leading component" time="0.118">
    </testcase>
    <testcase classname="TradingAccountCard should render the component with the trailing component" name="TradingAccountCard should render the component with the trailing component" time="0.099">
    </testcase>
    <testcase classname="TradingAccountCard should render the component with the leading and trailing component" name="TradingAccountCard should render the component with the leading and trailing component" time="0.134">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletSuccess /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:59" time="1.429" tests="2">
    <testcase classname="&lt;WalletSuccess /&gt; should render with the info provided" name="&lt;WalletSuccess /&gt; should render with the info provided" time="0.043">
    </testcase>
    <testcase classname="&lt;WalletSuccess /&gt; should render with the buttons" name="&lt;WalletSuccess /&gt; should render with the buttons" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="WalletListCardActions" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:57" time="459.003" tests="11">
    <testcase classname="WalletListCardActions should show the actions texts if the real wallet is active" name="WalletListCardActions should show the actions texts if the real wallet is active" time="0.063">
    </testcase>
    <testcase classname="WalletListCardActions should show the actions texts if the demo wallet is active" name="WalletListCardActions should show the actions texts if the demo wallet is active" time="0.01">
    </testcase>
    <testcase classname="WalletListCardActions shouldn&apos;t show the actions texts if the real wallet is inactive" name="WalletListCardActions shouldn&apos;t show the actions texts if the real wallet is inactive" time="0.008">
    </testcase>
    <testcase classname="WalletListCardActions should switch account and redirect to the correct page when clicking on one of the actions and wallet is inactive" name="WalletListCardActions should switch account and redirect to the correct page when clicking on one of the actions and wallet is inactive" time="0.046">
    </testcase>
    <testcase classname="WalletListCardActions should render the actions for mobile" name="WalletListCardActions should render the actions for mobile" time="448.661">
    </testcase>
    <testcase classname="WalletListCardActions should switch account and redirect to the correct page when clicking on one of the actions and wallet is inactive for mobile" name="WalletListCardActions should switch account and redirect to the correct page when clicking on one of the actions and wallet is inactive for mobile" time="0.25">
    </testcase>
    <testcase classname="WalletListCardActions should redirect to cashier page when clicking on deposit" name="WalletListCardActions should redirect to cashier page when clicking on deposit" time="0.122">
    </testcase>
    <testcase classname="WalletListCardActions should redirect to cashier page when clicking on withdraw" name="WalletListCardActions should redirect to cashier page when clicking on withdraw" time="0.042">
    </testcase>
    <testcase classname="WalletListCardActions should redirect to cashier page when clicking on transfer" name="WalletListCardActions should redirect to cashier page when clicking on transfer" time="0.029">
    </testcase>
    <testcase classname="WalletListCardActions should redirect to cashier page when clicking on transactions" name="WalletListCardActions should redirect to cashier page when clicking on transactions" time="0.108">
    </testcase>
    <testcase classname="WalletListCardActions should redirect to cashier page when clicking on reset balance" name="WalletListCardActions should redirect to cashier page when clicking on reset balance" time="0.18">
    </testcase>
  </testsuite>
  <testsuite name="Dropzone" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:58" time="459.313" tests="7">
    <testcase classname="Dropzone should open file explorer when clicking on the button" name="Dropzone should open file explorer when clicking on the button" time="0.534">
    </testcase>
    <testcase classname="Dropzone should remove file when clicking on the remove button" name="Dropzone should remove file when clicking on the remove button" time="0.011">
    </testcase>
    <testcase classname="Dropzone should show error message if file type is invalid" name="Dropzone should show error message if file type is invalid" time="0.076">
    </testcase>
    <testcase classname="Dropzone should call onFileChange when file is changed" name="Dropzone should call onFileChange when file is changed" time="0.011">
    </testcase>
    <testcase classname="Dropzone should show error message if file size is invalid" name="Dropzone should show error message if file size is invalid" time="0.105">
    </testcase>
    <testcase classname="Dropzone should show hover message when dragging the file" name="Dropzone should show hover message when dragging the file" time="0.006">
    </testcase>
    <testcase classname="Dropzone should be able to drop the file" name="Dropzone should be able to drop the file" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="WalletListCardDetails" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:59" time="458.469" tests="5">
    <testcase classname="WalletListCardDetails should render with active demo account details correctly" name="WalletListCardDetails should render with active demo account details correctly" time="0.154">
    </testcase>
    <testcase classname="WalletListCardDetails should render with active real account details correctly" name="WalletListCardDetails should render with active real account details correctly" time="0.123">
    </testcase>
    <testcase classname="WalletListCardDetails should render with inactive demo account details correctly" name="WalletListCardDetails should render with inactive demo account details correctly" time="0.03">
    </testcase>
    <testcase classname="WalletListCardDetails should render with inactive real account details correctly" name="WalletListCardDetails should render with inactive real account details correctly" time="0.072">
    </testcase>
    <testcase classname="WalletListCardDetails should show badge if badge is provided" name="WalletListCardDetails should show badge if badge is provided" time="0.056">
    </testcase>
  </testsuite>
  <testsuite name="WalletListCardBadge" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:59" time="459.965" tests="3">
    <testcase classname="WalletListCardBadge should render the badge with default label" name="WalletListCardBadge should render the badge with default label" time="0.134">
    </testcase>
    <testcase classname="WalletListCardBadge should render demo badge with the correct label and class names" name="WalletListCardBadge should render demo badge with the correct label and class names" time="0.011">
    </testcase>
    <testcase classname="WalletListCardBadge should render real account badge with the correct label and class name" name="WalletListCardBadge should render real account badge with the correct label and class name" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="WalletListCardBalance" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:14:59" time="460.294" tests="2">
    <testcase classname="WalletListCardBalance should show account balance" name="WalletListCardBalance should show account balance" time="0.112">
    </testcase>
    <testcase classname="WalletListCardBalance should show loader when balance has not been loaded" name="WalletListCardBalance should show loader when balance has not been loaded" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletsAppLinkedWithWalletIcon/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:39" time="2.395" tests="4">
    <testcase classname="&lt;WalletsAppLinkedWithWalletIcon/&gt; renders" name="&lt;WalletsAppLinkedWithWalletIcon/&gt; renders" time="0.027">
    </testcase>
    <testcase classname="&lt;WalletsAppLinkedWithWalletIcon/&gt; renders both icons" name="&lt;WalletsAppLinkedWithWalletIcon/&gt; renders both icons" time="0.004">
    </testcase>
    <testcase classname="&lt;WalletsAppLinkedWithWalletIcon/&gt; applies correct size" name="&lt;WalletsAppLinkedWithWalletIcon/&gt; applies correct size" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletsAppLinkedWithWalletIcon/&gt; displays proper gradient inside wallet icon" name="&lt;WalletsAppLinkedWithWalletIcon/&gt; displays proper gradient inside wallet icon" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="WalletCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:15:00" time="461.201" tests="7">
    <testcase classname="WalletCard should render the correct wallet card and gradient background for USD wallet" name="WalletCard should render the correct wallet card and gradient background for USD wallet" time="0.336">
    </testcase>
    <testcase classname="WalletCard should render the correct wallet card and gradient background for BTC wallet" name="WalletCard should render the correct wallet card and gradient background for BTC wallet" time="0.008">
    </testcase>
    <testcase classname="WalletCard should render the correct wallet card and gradient background for demo wallet" name="WalletCard should render the correct wallet card and gradient background for demo wallet" time="0.083">
    </testcase>
    <testcase classname="WalletCard should show balance loader when balance is loading" name="WalletCard should show balance loader when balance is loading" time="0.015">
    </testcase>
    <testcase classname="WalletCard should show balance when balance is loaded" name="WalletCard should show balance when balance is loaded" time="0.037">
    </testcase>
    <testcase classname="WalletCard should show the landing company name when provided" name="WalletCard should show the landing company name when provided" time="0.024">
    </testcase>
    <testcase classname="WalletCard should show the icon with the correct size" name="WalletCard should show the icon with the correct size" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="ToggleSwitch" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:39" time="2.275" tests="4">
    <testcase classname="ToggleSwitch should render the toggle switch with disabled state" name="ToggleSwitch should render the toggle switch with disabled state" time="0.217">
    </testcase>
    <testcase classname="ToggleSwitch should render the toggle switch with enabled state" name="ToggleSwitch should render the toggle switch with enabled state" time="0.02">
    </testcase>
    <testcase classname="ToggleSwitch should call onChange toggle" name="ToggleSwitch should call onChange toggle" time="0.017">
    </testcase>
    <testcase classname="ToggleSwitch should render toggle switch with ref and update the state when clicking on it" name="ToggleSwitch should render toggle switch with ref and update the state when clicking on it" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="DatePicker Component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:37" time="5.521" tests="5">
    <testcase classname="DatePicker Component should render with default props" name="DatePicker Component should render with default props" time="0.076">
    </testcase>
    <testcase classname="DatePicker Component should open and close calendar on button click" name="DatePicker Component should open and close calendar on button click" time="0.593">
    </testcase>
    <testcase classname="DatePicker Component should render with mobileAlignment &quot;above&quot;" name="DatePicker Component should render with mobileAlignment &quot;above&quot;" time="0.286">
    </testcase>
    <testcase classname="DatePicker Component should trigger onDateChange callback with correct date when date is selected" name="DatePicker Component should trigger onDateChange callback with correct date when date is selected" time="0.265">
    </testcase>
    <testcase classname="DatePicker Component should close calendar on click outside of the component" name="DatePicker Component should close calendar on click outside of the component" time="0.348">
    </testcase>
  </testsuite>
  <testsuite name="WalletListCardTitle" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:37" time="6.161" tests="1">
    <testcase classname="WalletListCardTitle should render the title with provided currency" name="WalletListCardTitle should render the title with provided currency" time="0.089">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletResponsiveSvg/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:42" time="2.129" tests="3">
    <testcase classname="&lt;WalletResponsiveSvg/&gt; render container and svg properly" name="&lt;WalletResponsiveSvg/&gt; render container and svg properly" time="0.032">
    </testcase>
    <testcase classname="&lt;WalletResponsiveSvg/&gt; renders svg in responsive manner" name="&lt;WalletResponsiveSvg/&gt; renders svg in responsive manner" time="0.001">
    </testcase>
    <testcase classname="&lt;WalletResponsiveSvg/&gt; renders nothing when there is no svg provided" name="&lt;WalletResponsiveSvg/&gt; renders nothing when there is no svg provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="WalletError" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:39" time="5.862" tests="2">
    <testcase classname="WalletError should show error message and the title" name="WalletError should show error message and the title" time="0.116">
    </testcase>
    <testcase classname="WalletError should call hide modal when close button is clicked" name="WalletError should call hide modal when close button is clicked" time="0.148">
    </testcase>
  </testsuite>
  <testsuite name="FlowTextField" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:42" time="3.017" tests="6">
    <testcase classname="FlowTextField should set field value with default value provided" name="FlowTextField should set field value with default value provided" time="0.346">
    </testcase>
    <testcase classname="FlowTextField should set hasTouched value when user is on focus" name="FlowTextField should set hasTouched value when user is on focus" time="0.012">
    </testcase>
    <testcase classname="FlowTextField should validate field when user typing" name="FlowTextField should validate field when user typing" time="0.237">
    </testcase>
    <testcase classname="FlowTextField should catch error when trying to validate field" name="FlowTextField should catch error when trying to validate field" time="0.039">
    </testcase>
    <testcase classname="FlowTextField should show error message when field is invalid" name="FlowTextField should show error message when field is invalid" time="0.101">
    </testcase>
    <testcase classname="FlowTextField should not allow user to type when field is disabled" name="FlowTextField should not allow user to type when field is disabled" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="unixToDateString" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:43" time="2.016" tests="1">
    <testcase classname="unixToDateString should convert current date to formatted string in default locale" name="unixToDateString should convert current date to formatted string in default locale" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="WalletListCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:41" time="4.984" tests="7">
    <testcase classname="WalletListCard should render the demo wallet list card with the correct details" name="WalletListCard should render the demo wallet list card with the correct details" time="0.423">
    </testcase>
    <testcase classname="WalletListCard should render the real wallet list card with the correct details" name="WalletListCard should render the real wallet list card with the correct details" time="0.15">
    </testcase>
    <testcase classname="WalletListCard should redirect to reset balance page when reset balance button is clicked" name="WalletListCard should redirect to reset balance page when reset balance button is clicked" time="0.031">
    </testcase>
    <testcase classname="WalletListCard should redirect to deposit page when deposit button is clicked" name="WalletListCard should redirect to deposit page when deposit button is clicked" time="0.017">
    </testcase>
    <testcase classname="WalletListCard should redirect to withdraw page when withdraw button is clicked" name="WalletListCard should redirect to withdraw page when withdraw button is clicked" time="0.027">
    </testcase>
    <testcase classname="WalletListCard should redirect to transfer page when transfer button is clicked" name="WalletListCard should redirect to transfer page when transfer button is clicked" time="0.02">
    </testcase>
    <testcase classname="WalletListCard should redirect to transactions page when transactions button is clicked" name="WalletListCard should redirect to transactions page when transactions button is clicked" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="useVerificationDocs" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:45" time="1.637" tests="4">
    <testcase classname="useVerificationDocs should return onfido/manual verification docs for idv unsupported country" name="useVerificationDocs should return onfido/manual verification docs for idv unsupported country" time="0.01">
    </testcase>
    <testcase classname="useVerificationDocs should return idv verification docs for idv supported country and client has idv attempts left" name="useVerificationDocs should return idv verification docs for idv supported country and client has idv attempts left" time="0.005">
    </testcase>
    <testcase classname="useVerificationDocs should return onfido/manual verification docs for idv supported country with no attempts left" name="useVerificationDocs should return onfido/manual verification docs for idv supported country with no attempts left" time="0.005">
    </testcase>
    <testcase classname="useVerificationDocs should return verification docs for unregulated jurisdiction" name="useVerificationDocs should return verification docs for unregulated jurisdiction" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="WalletsErrorScreen" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:42" time="4.859" tests="3">
    <testcase classname="WalletsErrorScreen should show the correct title and icon with default message" name="WalletsErrorScreen should show the correct title and icon with default message" time="0.03">
    </testcase>
    <testcase classname="WalletsErrorScreen should show the message passed as prop" name="WalletsErrorScreen should show the message passed as prop" time="0.002">
    </testcase>
    <testcase classname="WalletsErrorScreen should reload the page when Try again button is clicked" name="WalletsErrorScreen should reload the page when Try again button is clicked" time="0.26">
    </testcase>
  </testsuite>
  <testsuite name="AddedCTraderAccountsList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:44" time="3.244" tests="5">
    <testcase classname="AddedCTraderAccountsList renders TradingAccountCard with cTraderAccounts" name="AddedCTraderAccountsList renders TradingAccountCard with cTraderAccounts" time="0.046">
    </testcase>
    <testcase classname="AddedCTraderAccountsList renders the icon and opens the link when clicked" name="AddedCTraderAccountsList renders the icon and opens the link when clicked" time="0.223">
    </testcase>
    <testcase classname="AddedCTraderAccountsList opens the link when Enter key is pressed for sonarcloud" name="AddedCTraderAccountsList opens the link when Enter key is pressed for sonarcloud" time="0.006">
    </testcase>
    <testcase classname="AddedCTraderAccountsList redirects to cashier transfer page when Transfer button is clicked" name="AddedCTraderAccountsList redirects to cashier transfer page when Transfer button is clicked" time="0.012">
    </testcase>
    <testcase classname="AddedCTraderAccountsList opens the MT5TradeModal when Open button is clicked" name="AddedCTraderAccountsList opens the MT5TradeModal when Open button is clicked" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="WalletResetBalance" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:46" time="1.699" tests="1">
    <testcase classname="WalletResetBalance should render ResetBalanceModule" name="WalletResetBalance should render ResetBalanceModule" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="WalletFiatOnRamp" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:47" time="1.395" tests="2">
    <testcase classname="WalletFiatOnRamp should redirect to /wallets/cashier/deposit when isCrypto is false" name="WalletFiatOnRamp should redirect to /wallets/cashier/deposit when isCrypto is false" time="0.013">
    </testcase>
    <testcase classname="WalletFiatOnRamp should render FiatOnRampModule when isCrypto is true" name="WalletFiatOnRamp should render FiatOnRampModule when isCrypto is true" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ManualDocumentUpload /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:45" time="3.572" tests="1">
    <testcase classname="&lt;ManualDocumentUpload /&gt; should set selected document" name="&lt;ManualDocumentUpload /&gt; should set selected document" time="0.082">
    </testcase>
  </testsuite>
  <testsuite name="MT5AccountAdded" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:45" time="4.143" tests="5">
    <testcase classname="MT5AccountAdded should render mt5 account added success modal for demo account" name="MT5AccountAdded should render mt5 account added success modal for demo account" time="0.17">
    </testcase>
    <testcase classname="MT5AccountAdded should render mt5 account added success modal for real account" name="MT5AccountAdded should render mt5 account added success modal for real account" time="0.179">
    </testcase>
    <testcase classname="MT5AccountAdded should redirect to transfer page when transfer funds button is clicked" name="MT5AccountAdded should redirect to transfer page when transfer funds button is clicked" time="0.119">
    </testcase>
    <testcase classname="MT5AccountAdded should render the onfido verification pending message if document is not verified" name="MT5AccountAdded should render the onfido verification pending message if document is not verified" time="0.086">
    </testcase>
    <testcase classname="MT5AccountAdded should render idv verification pending message if document is not verified" name="MT5AccountAdded should render idv verification pending message if document is not verified" time="0.083">
    </testcase>
  </testsuite>
  <testsuite name="WalletDeposit component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:48" time="1.572" tests="2">
    <testcase classname="WalletDeposit component should render crypto module when wallet is crypto" name="WalletDeposit component should render crypto module when wallet is crypto" time="0.045">
    </testcase>
    <testcase classname="WalletDeposit component should render fiat module when wallet is not crypto" name="WalletDeposit component should render fiat module when wallet is not crypto" time="0.101">
    </testcase>
  </testsuite>
  <testsuite name="IDVDocumentUploadDetails" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:47" time="3.484" tests="3">
    <testcase classname="IDVDocumentUploadDetails should render component with default values" name="IDVDocumentUploadDetails should render component with default values" time="0.342">
    </testcase>
    <testcase classname="IDVDocumentUploadDetails should render component with date of birth if existing in getSettings" name="IDVDocumentUploadDetails should render component with date of birth if existing in getSettings" time="0.031">
    </testcase>
    <testcase classname="IDVDocumentUploadDetails should handle checkbox and fields change correctly when checkbox is checked" name="IDVDocumentUploadDetails should handle checkbox and fields change correctly when checkbox is checked" time="0.125">
    </testcase>
  </testsuite>
  <testsuite name="CommonMistakesExamples" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:47" time="3.339" tests="2">
    <testcase classname="CommonMistakesExamples renders the description and image" name="CommonMistakesExamples renders the description and image" time="0.07">
    </testcase>
    <testcase classname="CommonMistakesExamples renders the StatusLoss image" name="CommonMistakesExamples renders the StatusLoss image" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="ResetBalance" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:49" time="4.059" tests="4">
    <testcase classname="ResetBalance should render with initial state" name="ResetBalance should render with initial state" time="0.078">
    </testcase>
    <testcase classname="ResetBalance should render success state" name="ResetBalance should render success state" time="0.081">
    </testcase>
    <testcase classname="ResetBalance should trigger resetBalance function on button click" name="ResetBalance should trigger resetBalance function on button click" time="0.114">
    </testcase>
    <testcase classname="ResetBalance should redirect to transfer page on button click when reset is successful" name="ResetBalance should redirect to transfer page on button click when reset is successful" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WithdrawalFiat /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:49" time="4.103" tests="3">
    <testcase classname="&lt;WithdrawalFiat /&gt; should render the iframe with the withdrawal url from API response" name="&lt;WithdrawalFiat /&gt; should render the iframe with the withdrawal url from API response" time="0.085">
    </testcase>
    <testcase classname="&lt;WithdrawalFiat /&gt; should render the loader while the iframe is loading" name="&lt;WithdrawalFiat /&gt; should render the loader while the iframe is loading" time="0.007">
    </testcase>
    <testcase classname="&lt;WithdrawalFiat /&gt; should render the error screen when server responds with error" name="&lt;WithdrawalFiat /&gt; should render the error screen when server responds with error" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="WithdrawalVerificationSent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:49" time="5.538" tests="3">
    <testcase classname="WithdrawalVerificationSent should render component correctly" name="WithdrawalVerificationSent should render component correctly" time="0.042">
    </testcase>
    <testcase classname="WithdrawalVerificationSent should call sendEmail prop and show resend email button" name="WithdrawalVerificationSent should call sendEmail prop and show resend email button" time="0.1">
    </testcase>
    <testcase classname="WithdrawalVerificationSent should call sendEmail function again on Resend button click after counter ends" name="WithdrawalVerificationSent should call sendEmail function again on Resend button click after counter ends" time="0.129">
    </testcase>
  </testsuite>
  <testsuite name="WithdrawalVerificationRequest" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:50" time="4.822" tests="2">
    <testcase classname="WithdrawalVerificationRequest should render component correctly" name="WithdrawalVerificationRequest should render component correctly" time="0.061">
    </testcase>
    <testcase classname="WithdrawalVerificationRequest should call sendEmail function on button click" name="WithdrawalVerificationRequest should call sendEmail function on button click" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="TransactionStatus component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:50" time="4.384" tests="7">
    <testcase classname="TransactionStatus component should render default component correctly" name="TransactionStatus component should render default component correctly" time="0.075">
    </testcase>
    <testcase classname="TransactionStatus component should render success state correctly when wallet data exists" name="TransactionStatus component should render success state correctly when wallet data exists" time="0.004">
    </testcase>
    <testcase classname="TransactionStatus component should render loading state correctly for useActiveWalletAccount" name="TransactionStatus component should render loading state correctly for useActiveWalletAccount" time="0.011">
    </testcase>
    <testcase classname="TransactionStatus component should render loading state correctly for useCryptoTransactions" name="TransactionStatus component should render loading state correctly for useCryptoTransactions" time="0.004">
    </testcase>
    <testcase classname="TransactionStatus component should render error state correctly for useActiveWalletAccount" name="TransactionStatus component should render error state correctly for useActiveWalletAccount" time="0.022">
    </testcase>
    <testcase classname="TransactionStatus component should render error state correctly for useCryptoTransactions" name="TransactionStatus component should render error state correctly for useCryptoTransactions" time="0.036">
    </testcase>
    <testcase classname="TransactionStatus component should trigger resfresh events on click of the refresh button in error state" name="TransactionStatus component should trigger resfresh events on click of the refresh button in error state" time="0.05">
    </testcase>
  </testsuite>
  <testsuite name="WithdrawalVerification" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:50" time="5.029" tests="3">
    <testcase classname="WithdrawalVerification should render WithdrawalVerificationRequest initially" name="WithdrawalVerification should render WithdrawalVerificationRequest initially" time="0.037">
    </testcase>
    <testcase classname="WithdrawalVerification should send withdrawal verification email and render WithdrawalVerificationSent after clicking send email" name="WithdrawalVerification should send withdrawal verification email and render WithdrawalVerificationSent after clicking send email" time="0.078">
    </testcase>
    <testcase classname="WithdrawalVerification should not send withdrawal verification email if email is not fetched from useSettings properly" name="WithdrawalVerification should not send withdrawal verification email if email is not fetched from useSettings properly" time="0.073">
    </testcase>
  </testsuite>
  <testsuite name="withdrawalCryptoValidator" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:55" time="1.198" tests="13">
    <testcase classname="withdrawalCryptoValidator should check if no errors are returned when valid inputs are provided for crypto address" name="withdrawalCryptoValidator should check if no errors are returned when valid inputs are provided for crypto address" time="0.005">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should check if no errors are returned when valid inputs are provided for crypto amount" name="withdrawalCryptoValidator should check if no errors are returned when valid inputs are provided for crypto amount" time="0">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should check if no errors are returned when valid inputs are provided for fiat amount" name="withdrawalCryptoValidator should check if no errors are returned when valid inputs are provided for fiat amount" time="0.001">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should return error for invalid crypto address when length is lesser than 25 characters" name="withdrawalCryptoValidator should return error for invalid crypto address when length is lesser than 25 characters" time="0">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should return error for invalid crypto address when length is greater than 64 characters" name="withdrawalCryptoValidator should return error for invalid crypto address when length is greater than 64 characters" time="0.001">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should return &quot;Should be a valid number.&quot; error for invalid crypto amount" name="withdrawalCryptoValidator should return &quot;Should be a valid number.&quot; error for invalid crypto amount" time="0.003">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should return &quot;Should be a valid number.&quot; error for invalid fiat amount" name="withdrawalCryptoValidator should return &quot;Should be a valid number.&quot; error for invalid fiat amount" time="0.002">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should return &quot;Insufficient funds&quot; if amount &gt; balance regardless of the verification status of the user" name="withdrawalCryptoValidator should return &quot;Insufficient funds&quot; if amount &gt; balance regardless of the verification status of the user" time="0.004">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should return limit error if amount &lt; min withdrawal limit but is still less than the balance for verified user" name="withdrawalCryptoValidator should return limit error if amount &lt; min withdrawal limit but is still less than the balance for verified user" time="0.001">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should not return limit error if amount is within limits but is still less than the balance for verified user" name="withdrawalCryptoValidator should not return limit error if amount is within limits but is still less than the balance for verified user" time="0">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should not return limit error if amount is within limits but is still less than the balance for unverified user" name="withdrawalCryptoValidator should not return limit error if amount is within limits but is still less than the balance for unverified user" time="0">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should return limit error if amount &gt; max withdrawal limit but is still less than the balance for unverified user" name="withdrawalCryptoValidator should return limit error if amount &gt; max withdrawal limit but is still less than the balance for unverified user" time="0.001">
    </testcase>
    <testcase classname="withdrawalCryptoValidator should return &quot;This field is required.&quot; if no value is passed to crypto address field" name="withdrawalCryptoValidator should return &quot;This field is required.&quot; if no value is passed to crypto address field" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useWithdrawalCryptoContext" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:55" time="1.203" tests="2">
    <testcase classname="useWithdrawalCryptoContext should check whether the client is verified" name="useWithdrawalCryptoContext should check whether the client is verified" time="0.024">
    </testcase>
    <testcase classname="useWithdrawalCryptoContext should check whether the client is not verified" name="useWithdrawalCryptoContext should check whether the client is not verified" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="TransactionStatusError" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:53" time="4.116" tests="2">
    <testcase classname="TransactionStatusError should render component correctly" name="TransactionStatusError should render component correctly" time="0.044">
    </testcase>
    <testcase classname="TransactionStatusError should render refresh function on click of refresh button" name="TransactionStatusError should render refresh function on click of refresh button" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="CryptoTransaction" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:55" time="3.512" tests="5">
    <testcase classname="CryptoTransaction should render component with default properties" name="CryptoTransaction should render component with default properties" time="0.166">
    </testcase>
    <testcase classname="CryptoTransaction should render component with correct properties for deposit type transaction" name="CryptoTransaction should render component with correct properties for deposit type transaction" time="0.007">
    </testcase>
    <testcase classname="CryptoTransaction should open modal when cancel button is clicked" name="CryptoTransaction should open modal when cancel button is clicked" time="0.091">
    </testcase>
    <testcase classname="CryptoTransaction should close modal when cancel negation button is clicked" name="CryptoTransaction should close modal when cancel negation button is clicked" time="0.094">
    </testcase>
    <testcase classname="CryptoTransaction should cancel transaction when cancel confirmation button is clicked" name="CryptoTransaction should cancel transaction when cancel confirmation button is clicked" time="0.044">
    </testcase>
  </testsuite>
  <testsuite name="insufficientBalanceMessageFn" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:56" time="1.698" tests="6">
    <testcase classname="insufficientBalanceMessageFn should not return the message when accountName is missing" name="insufficientBalanceMessageFn should not return the message when accountName is missing" time="0.024">
    </testcase>
    <testcase classname="insufficientBalanceMessageFn should not return the message when balance is missing" name="insufficientBalanceMessageFn should not return the message when balance is missing" time="0.001">
    </testcase>
    <testcase classname="insufficientBalanceMessageFn should return the message when the balance is 0" name="insufficientBalanceMessageFn should return the message when the balance is 0" time="0.002">
    </testcase>
    <testcase classname="insufficientBalanceMessageFn should return the message when the balance is less than the amount" name="insufficientBalanceMessageFn should return the message when the balance is less than the amount" time="0.001">
    </testcase>
    <testcase classname="insufficientBalanceMessageFn should not return the message when the balance is equal to the amount" name="insufficientBalanceMessageFn should not return the message when the balance is equal to the amount" time="0.001">
    </testcase>
    <testcase classname="insufficientBalanceMessageFn should not return the message when the balance is more then the amount" name="insufficientBalanceMessageFn should not return the message when the balance is more then the amount" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TransactionStatusSuccess" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:54" time="4.554" tests="4">
    <testcase classname="TransactionStatusSuccess should render winthdrawal info for withdrawal transactions" name="TransactionStatusSuccess should render winthdrawal info for withdrawal transactions" time="0.066">
    </testcase>
    <testcase classname="TransactionStatusSuccess should render deposit info for deposit transactions" name="TransactionStatusSuccess should render deposit info for deposit transactions" time="0.019">
    </testcase>
    <testcase classname="TransactionStatusSuccess should render &quot;No recent transactions&quot; when there are no transactions" name="TransactionStatusSuccess should render &quot;No recent transactions&quot; when there are no transactions" time="0.007">
    </testcase>
    <testcase classname="TransactionStatusSuccess should render correct elements when there are more than 3 transactions" name="TransactionStatusSuccess should render correct elements when there are more than 3 transactions" time="0.143">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WithdrawalCryptoPercentageSelector /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:55" time="4.239" tests="2">
    <testcase classname="&lt;WithdrawalCryptoPercentageSelector /&gt; should show the percentage message when the input amount is between min withdrawal limit and max withdrawal limit" name="&lt;WithdrawalCryptoPercentageSelector /&gt; should show the percentage message when the input amount is between min withdrawal limit and max withdrawal limit" time="0.106">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoPercentageSelector /&gt; should hide the percentage message when the input amount is not between min withdrawal limit and max withdrawal limit" name="&lt;WithdrawalCryptoPercentageSelector /&gt; should hide the percentage message when the input amount is not between min withdrawal limit and max withdrawal limit" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="DepositFiat" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:56" time="4.214" tests="3">
    <testcase classname="DepositFiat should render error screen if isError and depositError is a server error" name="DepositFiat should render error screen if isError and depositError is a server error" time="0.071">
    </testcase>
    <testcase classname="DepositFiat should render loader while loading" name="DepositFiat should render loader while loading" time="0.009">
    </testcase>
    <testcase classname="DepositFiat should render iframe after loading is completed and iframe url is received" name="DepositFiat should render iframe after loading is completed and iframe url is received" time="0.069">
    </testcase>
  </testsuite>
  <testsuite name="FiatOnRampDisclaimer" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:58" time="5.029" tests="4">
    <testcase classname="FiatOnRampDisclaimer should render component correctly" name="FiatOnRampDisclaimer should render component correctly" time="0.121">
    </testcase>
    <testcase classname="FiatOnRampDisclaimer should render loader while loading" name="FiatOnRampDisclaimer should render loader while loading" time="0.004">
    </testcase>
    <testcase classname="FiatOnRampDisclaimer should call handleDisclaimer function on &quot;Back&quot; button click" name="FiatOnRampDisclaimer should call handleDisclaimer function on &quot;Back&quot; button click" time="0.006">
    </testcase>
    <testcase classname="FiatOnRampDisclaimer should redirect to Banxa provider on &quot;Continue&quot; button click" name="FiatOnRampDisclaimer should redirect to Banxa provider on &quot;Continue&quot; button click" time="0.124">
    </testcase>
  </testsuite>
  <testsuite name="TransferFormAmountInput" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:57" time="6.229" tests="5">
    <testcase classname="TransferFormAmountInput renders two fields" name="TransferFormAmountInput renders two fields" time="0.085">
    </testcase>
    <testcase classname="TransferFormAmountInput has 2 decimal places in case of USD" name="TransferFormAmountInput has 2 decimal places in case of USD" time="0.007">
    </testcase>
    <testcase classname="TransferFormAmountInput has 8 decimal places in case of BTC" name="TransferFormAmountInput has 8 decimal places in case of BTC" time="0.042">
    </testcase>
    <testcase classname="TransferFormAmountInput has 8 max digits restriction in case of USD" name="TransferFormAmountInput has 8 max digits restriction in case of USD" time="0.227">
    </testcase>
    <testcase classname="TransferFormAmountInput has 9 max digits restriction in case of BTC" name="TransferFormAmountInput has 9 max digits restriction in case of BTC" time="0.215">
    </testcase>
  </testsuite>
  <testsuite name="DepositLockedContent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:58" time="5.033" tests="9">
    <testcase classname="DepositLockedContent should render title and description as undefined when deposit is not locked" name="DepositLockedContent should render title and description as undefined when deposit is not locked" time="0.131">
    </testcase>
    <testcase classname="DepositLockedContent should render correct message when POI has not been verified" name="DepositLockedContent should render correct message when POI has not been verified" time="0.08">
    </testcase>
    <testcase classname="DepositLockedContent should render correct message when POA has not been verified" name="DepositLockedContent should render correct message when POA has not been verified" time="0.006">
    </testcase>
    <testcase classname="DepositLockedContent should render correct message when latest TnC has not been accepted" name="DepositLockedContent should render correct message when latest TnC has not been accepted" time="0.004">
    </testcase>
    <testcase classname="DepositLockedContent should render correct message when financial information is pending for MF accounts" name="DepositLockedContent should render correct message when financial information is pending for MF accounts" time="0.005">
    </testcase>
    <testcase classname="DepositLockedContent should render correct message when trading experience information is pending for MF accounts" name="DepositLockedContent should render correct message when trading experience information is pending for MF accounts" time="0.034">
    </testcase>
    <testcase classname="DepositLockedContent should render correct message when askFixDetails status received" name="DepositLockedContent should render correct message when askFixDetails status received" time="0.01">
    </testcase>
    <testcase classname="DepositLockedContent should render correct message when selfExclusion status received" name="DepositLockedContent should render correct message when selfExclusion status received" time="0.019">
    </testcase>
    <testcase classname="DepositLockedContent should render correct message when unwelcomeStatus status received" name="DepositLockedContent should render correct message when unwelcomeStatus status received" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="FiatOnRampProviderCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:59" time="4.811" tests="2">
    <testcase classname="FiatOnRampProviderCard should render component correctly" name="FiatOnRampProviderCard should render component correctly" time="0.025">
    </testcase>
    <testcase classname="FiatOnRampProviderCard should call handleDisclaimer function on &quot;Select&quot; button click" name="FiatOnRampProviderCard should call handleDisclaimer function on &quot;Select&quot; button click" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="FiatOnRamp" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:22:58" time="5.793" tests="4">
    <testcase classname="FiatOnRamp should render FiatOnRamp component with initial contents" name="FiatOnRamp should render FiatOnRamp component with initial contents" time="0.064">
    </testcase>
    <testcase classname="FiatOnRamp should navigate to /wallets/cashier/deposit on Back button click" name="FiatOnRamp should navigate to /wallets/cashier/deposit on Back button click" time="0.016">
    </testcase>
    <testcase classname="FiatOnRamp should render FiatOnRampDisclaimer on click of the button in the provider card" name="FiatOnRamp should render FiatOnRampDisclaimer on click of the button in the provider card" time="0.036">
    </testcase>
    <testcase classname="FiatOnRamp should handle disclaimer toggle correctly" name="FiatOnRamp should handle disclaimer toggle correctly" time="0.096">
    </testcase>
  </testsuite>
  <testsuite name="DepositCryptoTryFiatOnRamp" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:01" time="3.908" tests="2">
    <testcase classname="DepositCryptoTryFiatOnRamp should render component correctly" name="DepositCryptoTryFiatOnRamp should render component correctly" time="0.177">
    </testcase>
    <testcase classname="DepositCryptoTryFiatOnRamp should navigate to /wallets/cashier/on-ramp when the link is clicked" name="DepositCryptoTryFiatOnRamp should navigate to /wallets/cashier/on-ramp when the link is clicked" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="DepositCryptoAddress" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:03" time="2.543" tests="4">
    <testcase classname="DepositCryptoAddress should show loader when crypto address not loaded yet" name="DepositCryptoAddress should show loader when crypto address not loaded yet" time="0.019">
    </testcase>
    <testcase classname="DepositCryptoAddress should show crypto address after the address fetched" name="DepositCryptoAddress should show crypto address after the address fetched" time="0.014">
    </testcase>
    <testcase classname="DepositCryptoAddress should show QR code" name="DepositCryptoAddress should show QR code" time="0.011">
    </testcase>
    <testcase classname="DepositCryptoAddress should show copy text when hovering" name="DepositCryptoAddress should show copy text when hovering" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="DepositCryptoCurrencyDetails" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:03" time="3.581" tests="2">
    <testcase classname="DepositCryptoCurrencyDetails should render with correct currency details" name="DepositCryptoCurrencyDetails should render with correct currency details" time="0.014">
    </testcase>
    <testcase classname="DepositCryptoCurrencyDetails should not render with currency details when data is unavailable" name="DepositCryptoCurrencyDetails should not render with currency details when data is unavailable" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="DepositCryptoDisclaimers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:04" time="3.67" tests="3">
    <testcase classname="DepositCryptoDisclaimers should render with default disclaimer" name="DepositCryptoDisclaimers should render with default disclaimer" time="0.037">
    </testcase>
    <testcase classname="DepositCryptoDisclaimers should render with minimum deposit disclaimer for active currency" name="DepositCryptoDisclaimers should render with minimum deposit disclaimer for active currency" time="0.113">
    </testcase>
    <testcase classname="DepositCryptoDisclaimers should render with specific minimum deposit disclaimer for tUSDT" name="DepositCryptoDisclaimers should render with specific minimum deposit disclaimer for tUSDT" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletCashierHeader/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:04" time="3.497" tests="2">
    <testcase classname="&lt;WalletCashierHeader/&gt; renders" name="&lt;WalletCashierHeader/&gt; renders" time="0.041">
    </testcase>
    <testcase classname="&lt;WalletCashierHeader/&gt; displays balance" name="&lt;WalletCashierHeader/&gt; displays balance" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="WithdrawalLocked" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:04" time="3.264" tests="2">
    <testcase classname="WithdrawalLocked should render locked screen when in a locked state" name="WithdrawalLocked should render locked screen when in a locked state" time="0.318">
    </testcase>
    <testcase classname="WithdrawalLocked should render children when not in a locked state" name="WithdrawalLocked should render children when not in a locked state" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="WithdrawalLockedContent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:05" time="3.633" tests="11">
    <testcase classname="WithdrawalLockedContent should render title and description as undefined when withdrawal is not locked" name="WithdrawalLockedContent should render title and description as undefined when withdrawal is not locked" time="0.002">
    </testcase>
    <testcase classname="WithdrawalLockedContent should render correct message when withdrawal limit is reached and POI has not been uploaded" name="WithdrawalLockedContent should render correct message when withdrawal limit is reached and POI has not been uploaded" time="0.166">
    </testcase>
    <testcase classname="WithdrawalLockedContent should render correct message when withdrawal limit is reached and POI has been uploaded but not yet verified" name="WithdrawalLockedContent should render correct message when withdrawal limit is reached and POI has been uploaded but not yet verified" time="0.012">
    </testcase>
    <testcase classname="WithdrawalLockedContent should render correct message when withdrawal limit is reached and POA has not been uploaded" name="WithdrawalLockedContent should render correct message when withdrawal limit is reached and POA has not been uploaded" time="0.005">
    </testcase>
    <testcase classname="WithdrawalLockedContent should render correct message when withdrawal limit is reached and POA has been uploaded but not yet verified" name="WithdrawalLockedContent should render correct message when withdrawal limit is reached and POA has been uploaded but not yet verified" time="0.01">
    </testcase>
    <testcase classname="WithdrawalLockedContent should render correct message when withdrawal limit is reached and askFinancialRiskApproval status received" name="WithdrawalLockedContent should render correct message when withdrawal limit is reached and askFinancialRiskApproval status received" time="0.097">
    </testcase>
    <testcase classname="WithdrawalLockedContent should render correct message when financialAssessmentRequired status received" name="WithdrawalLockedContent should render correct message when financialAssessmentRequired status received" time="0.011">
    </testcase>
    <testcase classname="WithdrawalLockedContent should render correct message when askAuthenticate status received" name="WithdrawalLockedContent should render correct message when askAuthenticate status received" time="0.022">
    </testcase>
    <testcase classname="WithdrawalLockedContent should render correct message when askFixDetails status received" name="WithdrawalLockedContent should render correct message when askFixDetails status received" time="0.014">
    </testcase>
    <testcase classname="WithdrawalLockedContent should render correct message when noWithdrawalOrTradingStatus status received" name="WithdrawalLockedContent should render correct message when noWithdrawalOrTradingStatus status received" time="0.023">
    </testcase>
    <testcase classname="WithdrawalLockedContent should render correct message when withdrawalLockedStatus status received" name="WithdrawalLockedContent should render correct message when withdrawalLockedStatus status received" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="DepositLocked" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:06" time="3.299" tests="2">
    <testcase classname="DepositLocked should render locked screen when in a locked state" name="DepositLocked should render locked screen when in a locked state" time="0.038">
    </testcase>
    <testcase classname="DepositLocked should render children when not in a locked state" name="DepositLocked should render children when not in a locked state" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="unFormatLocaleString" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:07" time="2.455" tests="4">
    <testcase classname="unFormatLocaleString should unformat correctly when the number is less than 3 digits" name="unFormatLocaleString should unformat correctly when the number is less than 3 digits" time="0.004">
    </testcase>
    <testcase classname="unFormatLocaleString should unformat correctly when the number is more than 3 digits" name="unFormatLocaleString should unformat correctly when the number is more than 3 digits" time="0.003">
    </testcase>
    <testcase classname="unFormatLocaleString should unformat correctly when the number is more than 3 digits and has decimals" name="unFormatLocaleString should unformat correctly when the number is more than 3 digits and has decimals" time="0.001">
    </testcase>
    <testcase classname="unFormatLocaleString should unformat correctly when the number is more than 3 digits and has decimals and is in spanish" name="unFormatLocaleString should unformat correctly when the number is more than 3 digits and has decimals and is in spanish" time="0">
    </testcase>
  </testsuite>
  <testsuite name="epochToMoment" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:07" time="2.857" tests="6">
    <testcase classname="epochToMoment should convert a numerical epoch value to a Moment instance" name="epochToMoment should convert a numerical epoch value to a Moment instance" time="0.009">
    </testcase>
    <testcase classname="toMoment should return the current UTC moment if no value is provided" name="toMoment should return the current UTC moment if no value is provided" time="0.002">
    </testcase>
    <testcase classname="toMoment should return a Moment instance if already provided" name="toMoment should return a Moment instance if already provided" time="0.001">
    </testcase>
    <testcase classname="toMoment should convert a numerical value to a Moment instance using epochToMoment" name="toMoment should convert a numerical value to a Moment instance using epochToMoment" time="0.002">
    </testcase>
    <testcase classname="toMoment should handle string input and convert it to a valid Moment instance" name="toMoment should handle string input and convert it to a valid Moment instance" time="0.011">
    </testcase>
    <testcase classname="toMoment should handle invalid date string input and adjust accordingly" name="toMoment should handle invalid date string input and adjust accordingly" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getActiveAuthTokenIDFromLocalStorage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:07" time="2.758" tests="2">
    <testcase classname="getActiveAuthTokenIDFromLocalStorage should return active account token" name="getActiveAuthTokenIDFromLocalStorage should return active account token" time="0.003">
    </testcase>
    <testcase classname="getActiveAuthTokenIDFromLocalStorage should return empty string" name="getActiveAuthTokenIDFromLocalStorage should return empty string" time="0">
    </testcase>
  </testsuite>
  <testsuite name="groupTransactionsByDay" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:08" time="2.764" tests="1">
    <testcase classname="groupTransactionsByDay should group transactions by day" name="groupTransactionsByDay should group transactions by day" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="getTruncatedString" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:09" time="2.405" tests="4">
    <testcase classname="getTruncatedString should truncate string in the beginning" name="getTruncatedString should truncate string in the beginning" time="0.003">
    </testcase>
    <testcase classname="getTruncatedString should truncate string in the middle" name="getTruncatedString should truncate string in the middle" time="0.001">
    </testcase>
    <testcase classname="getTruncatedString should truncate string in the end" name="getTruncatedString should truncate string in the end" time="0.001">
    </testcase>
    <testcase classname="getTruncatedString should return the same string if length is greater than input length" name="getTruncatedString should return the same string if length is greater than input length" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isExternalLink" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:10" time="1.144" tests="2">
    <testcase classname="isExternalLink should return true if the link matches the regex for external link" name="isExternalLink should return true if the link matches the regex for external link" time="0.003">
    </testcase>
    <testcase classname="isExternalLink should return false if the link dosen&apos;t match the for external link" name="isExternalLink should return false if the link dosen&apos;t match the for external link" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getWalletCurrencyIcon" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:10" time="1.393" tests="19">
    <testcase classname="getWalletCurrencyIcon Should return proper icons for cashier modal should return proper icon for demo currency" name="getWalletCurrencyIcon Should return proper icons for cashier modal should return proper icon for demo currency" time="0.002">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for cashier modal should return proper icon for USDT, eUSDT, tUSDT, UST currency in dark mode" name="getWalletCurrencyIcon Should return proper icons for cashier modal should return proper icon for USDT, eUSDT, tUSDT, UST currency in dark mode" time="0.001">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for cashier modal should return proper icon for USDT, eUSDT, tUSDT, UST currency in light mode" name="getWalletCurrencyIcon Should return proper icons for cashier modal should return proper icon for USDT, eUSDT, tUSDT, UST currency in light mode" time="0.001">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for demo currency in dark mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for demo currency in dark mode" time="0.073">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for demo currency in light mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for demo currency in light mode" time="0.001">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for USD currency in dark/light mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for USD currency in dark/light mode" time="0">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for EUR currency in dark/light mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for EUR currency in dark/light mode" time="0.001">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for AUD currency in dark/light mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for AUD currency in dark/light mode" time="0">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for GBP currency in dark/light mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for GBP currency in dark/light mode" time="0">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for BTC currency in dark mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for BTC currency in dark mode" time="0">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for BTC currency in light mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for BTC currency in light mode" time="0.001">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for ETH currency in dark mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for ETH currency in dark mode" time="0.008">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for ETH currency in light mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for ETH currency in light mode" time="0.001">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for USDT, eUSDT, tUSDT, UST currency in dark mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for USDT, eUSDT, tUSDT, UST currency in dark mode" time="0.001">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for USDT, eUSDT, tUSDT, UST currency in light mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for USDT, eUSDT, tUSDT, UST currency in light mode" time="0.002">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for LTC currency in dark mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for LTC currency in dark mode" time="0.001">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for LTC currency in light mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for LTC currency in light mode" time="0.001">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for USDC currency in dark mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for USDC currency in dark mode" time="0">
    </testcase>
    <testcase classname="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for USDC currency in light mode" name="getWalletCurrencyIcon Should return proper icons for other components should return proper icon for USDC currency in light mode" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getLoginHistoryFormattedData" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:10" time="1.125" tests="2">
    <testcase classname="getLoginHistoryFormattedData should return all the expected key value pairs" name="getLoginHistoryFormattedData should return all the expected key value pairs" time="0.042">
    </testcase>
    <testcase classname="getLoginHistoryFormattedData should generate login history object with required information" name="getLoginHistoryFormattedData should generate login history object with required information" time="0.078">
    </testcase>
  </testsuite>
  <testsuite name="getActiveLoginIDFromLocalStorage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:10" time="1.01" tests="2">
    <testcase classname="getActiveLoginIDFromLocalStorage should return active account token" name="getActiveLoginIDFromLocalStorage should return active account token" time="0.016">
    </testcase>
    <testcase classname="getActiveLoginIDFromLocalStorage should return null" name="getActiveLoginIDFromLocalStorage should return null" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getLocalStorage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:09" time="2.399" tests="4">
    <testcase classname="getLocalStorage should retrieve the stored value from localStorage" name="getLocalStorage should retrieve the stored value from localStorage" time="0.003">
    </testcase>
    <testcase classname="getLocalStorage should return null when localStorage key does not exist" name="getLocalStorage should return null when localStorage key does not exist" time="0.001">
    </testcase>
    <testcase classname="getLocalStorage should return null when localStorage value is null" name="getLocalStorage should return null when localStorage value is null" time="0">
    </testcase>
    <testcase classname="getLocalStorage should parse and return the stored value as an object" name="getLocalStorage should parse and return the stored value as an object" time="0">
    </testcase>
  </testsuite>
  <testsuite name="renameFile" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:11" time="1.233" tests="2">
    <testcase classname="renameFile should remove non-ASCII characters from the file name" name="renameFile should remove non-ASCII characters from the file name" time="0.002">
    </testcase>
    <testcase classname="renameFile should preserve the file type and content" name="renameFile should preserve the file type and content" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getAccountsFromLocalStorage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:11" time="1.241" tests="2">
    <testcase classname="getAccountsFromLocalStorage should return object with one account" name="getAccountsFromLocalStorage should return object with one account" time="0.003">
    </testcase>
    <testcase classname="getAccountsFromLocalStorage should return empty object" name="getAccountsFromLocalStorage should return empty object" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MatchDiffTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:11" time="6.41" tests="1">
    <testcase classname="&lt;MatchDiffTradeDescription /&gt; a proper text of description should be rendered" name="&lt;MatchDiffTradeDescription /&gt; a proper text of description should be rendered" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="&lt;EndTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:11" time="6.635" tests="1">
    <testcase classname="&lt;EndTradeDescription /&gt; a proper text of description should be rendered" name="&lt;EndTradeDescription /&gt; a proper text of description should be rendered" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="&lt;StayTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:11" time="6.589" tests="1">
    <testcase classname="&lt;StayTradeDescription /&gt; a proper text of description should be rendered" name="&lt;StayTradeDescription /&gt; a proper text of description should be rendered" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LbCallTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:12" time="6.273" tests="1">
    <testcase classname="&lt;LbCallTradeDescription /&gt; a proper text of description should be rendered" name="&lt;LbCallTradeDescription /&gt; a proper text of description should be rendered" time="0.048">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CallPutSpreadTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:12" time="5.912" tests="1">
    <testcase classname="&lt;CallPutSpreadTradeDescription /&gt; a proper text of description should be rendered" name="&lt;CallPutSpreadTradeDescription /&gt; a proper text of description should be rendered" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LbPutTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:13" time="5.71" tests="1">
    <testcase classname="&lt;LbPutTradeDescription /&gt; a proper text of description should be rendered" name="&lt;LbPutTradeDescription /&gt; a proper text of description should be rendered" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;EvenOddTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:18" time="0.824" tests="1">
    <testcase classname="&lt;EvenOddTradeDescription /&gt; a proper text of description should be rendered" name="&lt;EvenOddTradeDescription /&gt; a proper text of description should be rendered" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OverUnderTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:18" time="0.859" tests="1">
    <testcase classname="&lt;OverUnderTradeDescription /&gt; a proper text of description should be rendered" name="&lt;OverUnderTradeDescription /&gt; a proper text of description should be rendered" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TickHighLowTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:18" time="0.906" tests="1">
    <testcase classname="&lt;TickHighLowTradeDescription /&gt; a proper text of description should be rendered" name="&lt;TickHighLowTradeDescription /&gt; a proper text of description should be rendered" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RiseFallTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:18" time="0.743" tests="1">
    <testcase classname="&lt;RiseFallTradeDescription /&gt; a proper text of description should be rendered" name="&lt;RiseFallTradeDescription /&gt; a proper text of description should be rendered" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccumulatorTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:18" time="0.729" tests="2">
    <testcase classname="&lt;AccumulatorTradeDescription /&gt; Ensure content of component is rendered properly" name="&lt;AccumulatorTradeDescription /&gt; Ensure content of component is rendered properly" time="0.016">
    </testcase>
    <testcase classname="&lt;AccumulatorTradeDescription /&gt; Ensure clicking on definition works" name="&lt;AccumulatorTradeDescription /&gt; Ensure clicking on definition works" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RunHighLowTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:18" time="0.826" tests="1">
    <testcase classname="&lt;RunHighLowTradeDescription /&gt; a proper text of description should be rendered" name="&lt;RunHighLowTradeDescription /&gt; a proper text of description should be rendered" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AsianTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:19" time="0.65" tests="1">
    <testcase classname="&lt;AsianTradeDescription /&gt; a proper text of description should be rendered" name="&lt;AsianTradeDescription /&gt; a proper text of description should be rendered" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LbHighLowTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:19" time="0.694" tests="1">
    <testcase classname="&lt;LbHighLowTradeDescription /&gt; a proper text of description should be rendered" name="&lt;LbHighLowTradeDescription /&gt; a proper text of description should be rendered" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MultiplierTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:19" time="0.609" tests="2">
    <testcase classname="&lt;MultiplierTradeDescription /&gt; should render a proper text if is_multiplier_fx is falsy" name="&lt;MultiplierTradeDescription /&gt; should render a proper text if is_multiplier_fx is falsy" time="0.019">
    </testcase>
    <testcase classname="&lt;MultiplierTradeDescription /&gt; should render a proper text if is_multiplier_fx is true" name="&lt;MultiplierTradeDescription /&gt; should render a proper text if is_multiplier_fx is true" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TouchTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:19" time="0.645" tests="1">
    <testcase classname="&lt;TouchTradeDescription /&gt; a proper text of description should be rendered" name="&lt;TouchTradeDescription /&gt; a proper text of description should be rendered" time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="&lt;VanillaTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:19" time="0.68" tests="3">
    <testcase classname="&lt;VanillaTradeDescription /&gt; a proper text of description should be rendered" name="&lt;VanillaTradeDescription /&gt; a proper text of description should be rendered" time="0.019">
    </testcase>
    <testcase classname="&lt;VanillaTradeDescription /&gt; specific text of description should be rendered if is_vanilla_fx is true" name="&lt;VanillaTradeDescription /&gt; specific text of description should be rendered if is_vanilla_fx is true" time="0.006">
    </testcase>
    <testcase classname="&lt;VanillaTradeDescription /&gt; should call a function if word from vocabulary was clicked" name="&lt;VanillaTradeDescription /&gt; should call a function if word from vocabulary was clicked" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TurbosTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:19" time="0.688" tests="1">
    <testcase classname="&lt;TurbosTradeDescription /&gt; a proper text of description should be rendered" name="&lt;TurbosTradeDescription /&gt; a proper text of description should be rendered" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ResetTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:19" time="0.601" tests="1">
    <testcase classname="&lt;ResetTradeDescription /&gt; a proper text of description should be rendered" name="&lt;ResetTradeDescription /&gt; a proper text of description should be rendered" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;HighLowTradeDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:19" time="0.613" tests="1">
    <testcase classname="&lt;HighLowTradeDescription /&gt; a proper text of description should be rendered" name="&lt;HighLowTradeDescription /&gt; a proper text of description should be rendered" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;IconTradeCategory /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:20" time="0.699" tests="23">
    <testcase classname="&lt;IconTradeCategory /&gt; Expect empty div to be rendered when category is empty" name="&lt;IconTradeCategory /&gt; Expect empty div to be rendered when category is empty" time="0.008">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect MockedIcon to be rendered when category is TRADE_TYPES.RISE_FALL" name="&lt;IconTradeCategory /&gt; Expect MockedIcon to be rendered when category is TRADE_TYPES.RISE_FALL" time="0.007">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.RISE_FALL_EQUAL" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.RISE_FALL_EQUAL" time="0.005">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.HIGH_LOW" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.HIGH_LOW" time="0.006">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.END" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.END" time="0.004">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.STAY" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.STAY" time="0.002">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.MATCH_DIFF" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.MATCH_DIFF" time="0.006">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.EVEN_ODD" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.EVEN_ODD" time="0.002">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.OVER_UNDER" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.OVER_UNDER" time="0.002">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.TOUCH" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.TOUCH" time="0.002">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.ASIAN" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.ASIAN" time="0.003">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect MockedIcon to be rendered when category is TRADE_TYPES.LB_CALL" name="&lt;IconTradeCategory /&gt; Expect MockedIcon to be rendered when category is TRADE_TYPES.LB_CALL" time="0.001">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect MockedIcon to be rendered when category is TRADE_TYPES.LB_PUT" name="&lt;IconTradeCategory /&gt; Expect MockedIcon to be rendered when category is TRADE_TYPES.LB_PUT" time="0.001">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect MockedIcon to be rendered when category is TRADE_TYPES.LB_HIGH_LOW" name="&lt;IconTradeCategory /&gt; Expect MockedIcon to be rendered when category is TRADE_TYPES.LB_HIGH_LOW" time="0.001">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.RUN_HIGH_LOW" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.RUN_HIGH_LOW" time="0.003">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.RESET" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.RESET" time="0.007">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.TICK_HIGH_LOW" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.TICK_HIGH_LOW" time="0.012">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.CALL_PUT_SPREAD" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.CALL_PUT_SPREAD" time="0.009">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.MULTIPLIER" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.MULTIPLIER" time="0.006">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect MockedIcon to be rendered when category is TRADE_TYPES.ACCUMULATOR" name="&lt;IconTradeCategory /&gt; Expect MockedIcon to be rendered when category is TRADE_TYPES.ACCUMULATOR" time="0.003">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.VANILLA.CALL" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.VANILLA.CALL" time="0.003">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.TURBOS.LONG" name="&lt;IconTradeCategory /&gt; Expect two MockedIcons to be rendered when category is TRADE_TYPES.TURBOS.LONG" time="0.003">
    </testcase>
    <testcase classname="&lt;IconTradeCategory /&gt; Expect default case to be rendered when category is not valid" name="&lt;IconTradeCategory /&gt; Expect default case to be rendered when category is not valid" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractTypeDescriptionVideo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:20" time="0.764" tests="4">
    <testcase classname="&lt;ContractTypeDescriptionVideo /&gt; should render the component with video if selected_contract_type does support video" name="&lt;ContractTypeDescriptionVideo /&gt; should render the component with video if selected_contract_type does support video" time="0.022">
    </testcase>
    <testcase classname="&lt;ContractTypeDescriptionVideo /&gt; should be able to find a proper video and render the component if is_dark_mode_on is true" name="&lt;ContractTypeDescriptionVideo /&gt; should be able to find a proper video and render the component if is_dark_mode_on is true" time="0.012">
    </testcase>
    <testcase classname="&lt;ContractTypeDescriptionVideo /&gt; should return null if selected_contract_type is falsy" name="&lt;ContractTypeDescriptionVideo /&gt; should return null if selected_contract_type is falsy" time="0.004">
    </testcase>
    <testcase classname="&lt;ContractTypeDescriptionVideo /&gt; should render the component with video of proper width and height if it is mobile" name="&lt;ContractTypeDescriptionVideo /&gt; should render the component with video of proper width and height if it is mobile" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="isDigitTradeType" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:20" time="0.358" tests="5">
    <testcase classname="isDigitTradeType should return true if trade type is digit (for e.g. TRADE_TYPES.EVEN_ODD)" name="isDigitTradeType should return true if trade type is digit (for e.g. TRADE_TYPES.EVEN_ODD)" time="0.001">
    </testcase>
    <testcase classname="isDigitTradeType should return false if trade type is not digit" name="isDigitTradeType should return false if trade type is not digit" time="0">
    </testcase>
    <testcase classname="isDigitTradeType should return false if trade type is undefined" name="isDigitTradeType should return false if trade type is undefined" time="0.001">
    </testcase>
    <testcase classname="isDigitContractType should return true if contract type is digit (for e.g. CONTRACT_TYPES.MATCH_DIFF.DIFF)" name="isDigitContractType should return true if contract type is digit (for e.g. CONTRACT_TYPES.MATCH_DIFF.DIFF)" time="0">
    </testcase>
    <testcase classname="isDigitContractType should return false if trade type is not digit" name="isDigitContractType should return false if trade type is not digit" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getContractTypeCategoryIcons" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:20" time="0.406" tests="10">
    <testcase classname="getContractTypeCategoryIcons should return an object with specific fields (like All, Options , Multipliers and etc.)" name="getContractTypeCategoryIcons should return an object with specific fields (like All, Options , Multipliers and etc.)" time="0.001">
    </testcase>
    <testcase classname="getAvailableContractTypes should return an object with specific available contracts if they are in the unsupported list" name="getAvailableContractTypes should return an object with specific available contracts if they are in the unsupported list" time="0.007">
    </testcase>
    <testcase classname="getAvailableContractTypes should return null for component field if it is not Accumulators" name="getAvailableContractTypes should return null for component field if it is not Accumulators" time="0.001">
    </testcase>
    <testcase classname="getAvailableContractTypes should return html element for component field if it is Accumulators" name="getAvailableContractTypes should return html element for component field if it is Accumulators" time="0.003">
    </testcase>
    <testcase classname="getContractCategoryKey should return key (contract category) if passed item has the same value as some of the passed list" name="getContractCategoryKey should return key (contract category) if passed item has the same value as some of the passed list" time="0.001">
    </testcase>
    <testcase classname="getContractCategoryKey should return undefined (contract category) if passed item has not the same value as some of the passed list" name="getContractCategoryKey should return undefined (contract category) if passed item has not the same value as some of the passed list" time="0.002">
    </testcase>
    <testcase classname="getContractTypes should return an array with contract types if passed item has the same value as some of the passed list" name="getContractTypes should return an array with contract types if passed item has the same value as some of the passed list" time="0.003">
    </testcase>
    <testcase classname="getContractTypes should return undefined if passed item has not the same value as some of the passed list" name="getContractTypes should return undefined if passed item has not the same value as some of the passed list" time="0.002">
    </testcase>
    <testcase classname="getCategoriesSortedByKey should return an array with contract type objects sorted based on ordered_trade_categories list" name="getCategoriesSortedByKey should return an array with contract type objects sorted based on ordered_trade_categories list" time="0.003">
    </testcase>
    <testcase classname="getCategoriesSortedByKey should return an empty array if a list is not received" name="getCategoriesSortedByKey should return an empty array if a list is not received" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getDescriptionVideoId" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:20" time="0.268" tests="3">
    <testcase classname="getDescriptionVideoId should return an id for Vanillas description video in light theme" name="getDescriptionVideoId should return an id for Vanillas description video in light theme" time="0.003">
    </testcase>
    <testcase classname="getDescriptionVideoId should return an id for Turbos description video in dark theme" name="getDescriptionVideoId should return an id for Turbos description video in dark theme" time="0.001">
    </testcase>
    <testcase classname="getDescriptionVideoId should return undefined when called with empty arguments" name="getDescriptionVideoId should return undefined when called with empty arguments" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradeCategories /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:20" time="0.647" tests="22">
    <testcase classname="&lt;TradeCategories /&gt; Ensure AccumulatorTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.ACCUMULATOR&quot;" name="&lt;TradeCategories /&gt; Ensure AccumulatorTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.ACCUMULATOR&quot;" time="0.011">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedAsianTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.ASIAN&quot;" name="&lt;TradeCategories /&gt; Ensure mockedAsianTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.ASIAN&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedCallPutSpreadTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.CALL_PUT_SPREAD&quot;" name="&lt;TradeCategories /&gt; Ensure mockedCallPutSpreadTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.CALL_PUT_SPREAD&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedEndTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.END&quot;" name="&lt;TradeCategories /&gt; Ensure mockedEndTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.END&quot;" time="0.009">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedEvenOddTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.EVEN_ODD&quot;" name="&lt;TradeCategories /&gt; Ensure mockedEvenOddTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.EVEN_ODD&quot;" time="0.004">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedHighLowTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.HIGH_LOW&quot;" name="&lt;TradeCategories /&gt; Ensure mockedHighLowTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.HIGH_LOW&quot;" time="0.004">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedLbCallTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.LB_CALL&quot;" name="&lt;TradeCategories /&gt; Ensure mockedLbCallTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.LB_CALL&quot;" time="0.007">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedLbHighLowTradeDescription is rendered correctly when trade category is TRADE_TYPES.LB_HIGH_LOW" name="&lt;TradeCategories /&gt; Ensure mockedLbHighLowTradeDescription is rendered correctly when trade category is TRADE_TYPES.LB_HIGH_LOW" time="0.002">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedLbPutTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.LB_PUT&quot;" name="&lt;TradeCategories /&gt; Ensure mockedLbPutTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.LB_PUT&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedMatchDiffTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.MATCH_DIFF&quot;" name="&lt;TradeCategories /&gt; Ensure mockedMatchDiffTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.MATCH_DIFF&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedMultiplierTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.MULTIPLIER&quot;" name="&lt;TradeCategories /&gt; Ensure mockedMultiplierTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.MULTIPLIER&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedOverUnderTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.OVER_UNDER&quot;" name="&lt;TradeCategories /&gt; Ensure mockedOverUnderTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.OVER_UNDER&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedResetTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.RESET&quot;" name="&lt;TradeCategories /&gt; Ensure mockedResetTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.RESET&quot;" time="0.002">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedRiseFallTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.RISE_FALL&quot;" name="&lt;TradeCategories /&gt; Ensure mockedRiseFallTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.RISE_FALL&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedRunHighLowTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.RUN_HIGH_LOW&quot;" name="&lt;TradeCategories /&gt; Ensure mockedRunHighLowTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.RUN_HIGH_LOW&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedStayTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.STAY&quot;" name="&lt;TradeCategories /&gt; Ensure mockedStayTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.STAY&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedTickHighLowTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.TICK_HIGH_LOW&quot;" name="&lt;TradeCategories /&gt; Ensure mockedTickHighLowTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.TICK_HIGH_LOW&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedTouchTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.TOUCH&quot;" name="&lt;TradeCategories /&gt; Ensure mockedTouchTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.TOUCH&quot;" time="0">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedTurbosTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.TURBOS.SHORT&quot;" name="&lt;TradeCategories /&gt; Ensure mockedTurbosTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.TURBOS.SHORT&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure mockedVanillaTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.VANILLA.CALL&quot;" name="&lt;TradeCategories /&gt; Ensure mockedVanillaTradeDescription is rendered correctly when trade category is &quot;TRADE_TYPES.VANILLA.CALL&quot;" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure description is not found is rendered when trade category does not exist" name="&lt;TradeCategories /&gt; Ensure description is not found is rendered when trade category does not exist" time="0.004">
    </testcase>
    <testcase classname="&lt;TradeCategories /&gt; Ensure nothing gets rendered if category is empty" name="&lt;TradeCategories /&gt; Ensure nothing gets rendered if category is empty" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RadioGroupOptionsModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:20" time="0.707" tests="2">
    <testcase classname="&lt;RadioGroupOptionsModal /&gt; should render mockedMultiplierOptions when modal_title is Multiplier" name="&lt;RadioGroupOptionsModal /&gt; should render mockedMultiplierOptions when modal_title is Multiplier" time="0.019">
    </testcase>
    <testcase classname="&lt;RadioGroupOptionsModal /&gt; should render something when modal_title is not Multiplier" name="&lt;RadioGroupOptionsModal /&gt; should render something when modal_title is not Multiplier" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Contract /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:20" time="0.809" tests="3">
    <testcase classname="&lt;Contract /&gt; should render component" name="&lt;Contract /&gt; should render component" time="0.018">
    </testcase>
    <testcase classname="&lt;Contract /&gt; should not render &lt;ToastPopup /&gt; inside of parent component if contract type is not digit" name="&lt;Contract /&gt; should not render &lt;ToastPopup /&gt; inside of parent component if contract type is not digit" time="0.004">
    </testcase>
    <testcase classname="&lt;Contract /&gt; if user changed the language, ContractTypeWidget component should receive true in languageChanged props" name="&lt;Contract /&gt; if user changed the language, ContractTypeWidget component should receive true in languageChanged props" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AllowEquals /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:20" time="0.867" tests="2">
    <testcase classname="&lt;AllowEquals /&gt; should render component" name="&lt;AllowEquals /&gt; should render component" time="0.018">
    </testcase>
    <testcase classname="&lt;AllowEquals /&gt; should call onChange function if checkbox was clicked" name="&lt;AllowEquals /&gt; should call onChange function if checkbox was clicked" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradeParams /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:21" time="0.799" tests="2">
    <testcase classname="&lt;TradeParams /&gt; should render Duration component inside of TradeParams if it is in the form_components array and do not render the rest components" name="&lt;TradeParams /&gt; should render Duration component inside of TradeParams if it is in the form_components array and do not render the rest components" time="0.021">
    </testcase>
    <testcase classname="&lt;TradeParams /&gt; should render all components inside of TradeParams if they are in the form_components array" name="&lt;TradeParams /&gt; should render all components inside of TradeParams if they are in the form_components array" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ToastPopup /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:21" time="0.793" tests="4">
    <testcase classname="&lt;ToastPopup /&gt; should render &lt;ToastPopup /&gt; component if portal_id exist in the document" name="&lt;ToastPopup /&gt; should render &lt;ToastPopup /&gt; component if portal_id exist in the document" time="0.01">
    </testcase>
    <testcase classname="&lt;ToastPopup /&gt; should not render &lt;ToastPopup /&gt; component if portal_id do not exist in the document" name="&lt;ToastPopup /&gt; should not render &lt;ToastPopup /&gt; component if portal_id do not exist in the document" time="0.002">
    </testcase>
    <testcase classname="&lt;NetworkStatusToastErrorPopup /&gt; should render &lt;NetworkStatusToastError /&gt; inside of &lt;NetworkStatusToastErrorPopup /&gt; if message or portal id exist" name="&lt;NetworkStatusToastErrorPopup /&gt; should render &lt;NetworkStatusToastError /&gt; inside of &lt;NetworkStatusToastErrorPopup /&gt; if message or portal id exist" time="0.007">
    </testcase>
    <testcase classname="&lt;NetworkStatusToastErrorPopup /&gt; should not render &lt;NetworkStatusToastError /&gt; if message or portal id do not exist" name="&lt;NetworkStatusToastErrorPopup /&gt; should not render &lt;NetworkStatusToastError /&gt; if message or portal id do not exist" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Purchase /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:21" time="0.499" tests="4">
    <testcase classname="&lt;Purchase /&gt; should render 2 PurchaseField components if it is Rise/Fall trade type" name="&lt;Purchase /&gt; should render 2 PurchaseField components if it is Rise/Fall trade type" time="0.015">
    </testcase>
    <testcase classname="&lt;Purchase /&gt; should render Sell button if accumulator contract is already in active positions" name="&lt;Purchase /&gt; should render Sell button if accumulator contract is already in active positions" time="0.008">
    </testcase>
    <testcase classname="&lt;Purchase /&gt; should render only one PurchaseField component if it is TRADE_TYPES.VANILLA.CALL trade type" name="&lt;Purchase /&gt; should render only one PurchaseField component if it is TRADE_TYPES.VANILLA.CALL trade type" time="0.005">
    </testcase>
    <testcase classname="&lt;Purchase /&gt; should not render PurchaseField component if trade type does not exist" name="&lt;Purchase /&gt; should not render PurchaseField component if trade type does not exist" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DigitsWidget /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:21" time="0.638" tests="3">
    <testcase classname="&lt;DigitsWidget /&gt; Should render mocked digits" name="&lt;DigitsWidget /&gt; Should render mocked digits" time="0.01">
    </testcase>
    <testcase classname="&lt;ChartTopWidgets&gt; Should render mocked ChartTopWidget" name="&lt;ChartTopWidgets&gt; Should render mocked ChartTopWidget" time="0.002">
    </testcase>
    <testcase classname="&lt;ChartBottomWidgets&gt; Should render mocked ChartBottomWidgets" name="&lt;ChartBottomWidgets&gt; Should render mocked ChartBottomWidgets" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LastDigit /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:21" time="0.632" tests="3">
    <testcase classname="&lt;LastDigit /&gt; should render only phrase about last digit if is_minimizes is true" name="&lt;LastDigit /&gt; should render only phrase about last digit if is_minimizes is true" time="0.028">
    </testcase>
    <testcase classname="&lt;LastDigit /&gt; should render fieldset and number selector if is_minimizes is false" name="&lt;LastDigit /&gt; should render fieldset and number selector if is_minimizes is false" time="0.004">
    </testcase>
    <testcase classname="&lt;LastDigit /&gt; should not render fieldset header if it is not desktop" name="&lt;LastDigit /&gt; should not render fieldset header if it is not desktop" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;StrikeParamModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:21" time="0.695" tests="5">
    <testcase classname="&lt;StrikeParamModal /&gt; should render StrikeParamModal with strike choices and info icon" name="&lt;StrikeParamModal /&gt; should render StrikeParamModal with strike choices and info icon" time="0.052">
    </testcase>
    <testcase classname="&lt;StrikeParamModal /&gt; should not render StrikeParamModal when is_open === false" name="&lt;StrikeParamModal /&gt; should not render StrikeParamModal when is_open === false" time="0.003">
    </testcase>
    <testcase classname="&lt;StrikeParamModal /&gt; should call onChange with new strike value when user clicks upon another strike option" name="&lt;StrikeParamModal /&gt; should call onChange with new strike value when user clicks upon another strike option" time="0.036">
    </testcase>
    <testcase classname="&lt;StrikeParamModal /&gt; should show tooltip when user clicks &quot;info&quot; icon and hide tooltip upon second click" name="&lt;StrikeParamModal /&gt; should show tooltip when user clicks &quot;info&quot; icon and hide tooltip upon second click" time="0.034">
    </testcase>
    <testcase classname="&lt;StrikeParamModal /&gt; should toggle modal when user closes StrikeParamModal" name="&lt;StrikeParamModal /&gt; should toggle modal when user closes StrikeParamModal" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradeParamsModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:21" time="0.761" tests="10">
    <testcase classname="&lt;TradeParamsModal /&gt; should not render children components if the form_components is an empty array" name="&lt;TradeParamsModal /&gt; should not render children components if the form_components is an empty array" time="0.022">
    </testcase>
    <testcase classname="&lt;TradeParamsModal /&gt; should render DurationMobile and AmountMobile component if they are in the form_components array" name="&lt;TradeParamsModal /&gt; should render DurationMobile and AmountMobile component if they are in the form_components array" time="0.007">
    </testcase>
    <testcase classname="&lt;TradeParamsModal /&gt; function setAmountTabIdx call should change amount_tab_idx" name="&lt;TradeParamsModal /&gt; function setAmountTabIdx call should change amount_tab_idx" time="0.05">
    </testcase>
    <testcase classname="&lt;TradeParamsModal /&gt; function setSelectedAmount call should change stake_value" name="&lt;TradeParamsModal /&gt; function setSelectedAmount call should change stake_value" time="0.02">
    </testcase>
    <testcase classname="&lt;TradeParamsModal /&gt; function setAmountError call should change amount_error" name="&lt;TradeParamsModal /&gt; function setAmountError call should change amount_error" time="0.017">
    </testcase>
    <testcase classname="&lt;TradeParamsModal /&gt; function setDurationError call should change amount_error" name="&lt;TradeParamsModal /&gt; function setDurationError call should change amount_error" time="0.018">
    </testcase>
    <testcase classname="&lt;LastDigitMobile /&gt; should not render LastDigit component if it is not in the form_components array" name="&lt;LastDigitMobile /&gt; should not render LastDigit component if it is not in the form_components array" time="0.002">
    </testcase>
    <testcase classname="&lt;LastDigitMobile /&gt; should render LastDigit component if it is in the form_components array" name="&lt;LastDigitMobile /&gt; should render LastDigit component if it is in the form_components array" time="0.002">
    </testcase>
    <testcase classname="&lt;BarrierMobile /&gt; should not render BarrierMobile component if it is not in the form_components array" name="&lt;BarrierMobile /&gt; should not render BarrierMobile component if it is not in the form_components array" time="0.004">
    </testcase>
    <testcase classname="&lt;BarrierMobile /&gt; should render BarrierMobile component if it is in the form_components array" name="&lt;BarrierMobile /&gt; should render BarrierMobile component if it is in the form_components array" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RiskManagementDialog /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:22" time="0.696" tests="6">
    <testcase classname="&lt;RiskManagementDialog /&gt; should render children components" name="&lt;RiskManagementDialog /&gt; should render children components" time="0.017">
    </testcase>
    <testcase classname="&lt;RiskManagementDialog /&gt; should render CancelDeal component if cancellation_range_list?.length &gt; 0" name="&lt;RiskManagementDialog /&gt; should render CancelDeal component if cancellation_range_list?.length &gt; 0" time="0.004">
    </testcase>
    <testcase classname="&lt;RiskManagementDialog /&gt; should call onClose function if MobileDialog was closed" name="&lt;RiskManagementDialog /&gt; should call onClose function if MobileDialog was closed" time="0.014">
    </testcase>
    <testcase classname="&lt;RiskManagementDialog /&gt; should call toggleDialog function if Apply button was clicked" name="&lt;RiskManagementDialog /&gt; should call toggleDialog function if Apply button was clicked" time="0.012">
    </testcase>
    <testcase classname="&lt;RiskManagementDialog /&gt; should change state object with setState function if onChangeMultiple was called" name="&lt;RiskManagementDialog /&gt; should change state object with setState function if onChangeMultiple was called" time="0.007">
    </testcase>
    <testcase classname="&lt;RiskManagementDialog /&gt; should change state object with setState function if onChange was called" name="&lt;RiskManagementDialog /&gt; should change state object with setState function if onChange was called" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MultiplierOptions /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:22" time="0.533" tests="3">
    <testcase classname="&lt;MultiplierOptions /&gt; should render children components" name="&lt;MultiplierOptions /&gt; should render children components" time="0.013">
    </testcase>
    <testcase classname="&lt;MultiplierOptions /&gt; should change the amount after rerendering if echo_req.amount === amount and amount is truthy" name="&lt;MultiplierOptions /&gt; should change the amount after rerendering if echo_req.amount === amount and amount is truthy" time="0.007">
    </testcase>
    <testcase classname="&lt;MultiplierOptions /&gt; should not change the amount after rerendering if echo_req.amount !== amount" name="&lt;MultiplierOptions /&gt; should not change the amount after rerendering if echo_req.amount !== amount" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PurchaseFieldset /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:22" time="0.599" tests="5">
    <testcase classname="&lt;PurchaseFieldset /&gt; should render PurchaseButton and ContractInfo by default" name="&lt;PurchaseFieldset /&gt; should render PurchaseButton and ContractInfo by default" time="0.014">
    </testcase>
    <testcase classname="&lt;PurchaseFieldset /&gt; should render PurchaseButton with Error Popover if is_proposal_error === true and is_market_closed === false" name="&lt;PurchaseFieldset /&gt; should render PurchaseButton with Error Popover if is_proposal_error === true and is_market_closed === false" time="0.011">
    </testcase>
    <testcase classname="&lt;PurchaseFieldset /&gt; should render PurchaseButton with Popover for multiplier contract" name="&lt;PurchaseFieldset /&gt; should render PurchaseButton with Popover for multiplier contract" time="0.004">
    </testcase>
    <testcase classname="&lt;PurchaseFieldset /&gt; should call function onHoverPurchase if user hovers and/or unhovers on purchase field and is_disabled === false" name="&lt;PurchaseFieldset /&gt; should call function onHoverPurchase if user hovers and/or unhovers on purchase field and is_disabled === false" time="0.024">
    </testcase>
    <testcase classname="&lt;PurchaseFieldset /&gt; should render CancelDealInfo for mobile if is_multiplier === true, has_cancellation === true" name="&lt;PurchaseFieldset /&gt; should render CancelDealInfo for mobile if is_multiplier === true, has_cancellation === true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MultiplierAmountModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:22" time="0.766" tests="3">
    <testcase classname="&lt;MultiplierAmountModal /&gt; should render modal and &lt;TradeParamsMobile/&gt; inside" name="&lt;MultiplierAmountModal /&gt; should render modal and &lt;TradeParamsMobile/&gt; inside" time="0.027">
    </testcase>
    <testcase classname="&lt;MultiplierAmountModal /&gt; should change stake_value and commission if setSelectedAmount was called by pressing on the proper button" name="&lt;MultiplierAmountModal /&gt; should change stake_value and commission if setSelectedAmount was called by pressing on the proper button" time="0.036">
    </testcase>
    <testcase classname="&lt;MultiplierAmountModal /&gt; should call toggleModal if the proper button was clicked" name="&lt;MultiplierAmountModal /&gt; should call toggleModal if the proper button was clicked" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PayoutPerPointMobile/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:22" time="0.703" tests="5">
    <testcase classname="&lt;PayoutPerPointMobile/&gt; should render label name correctly" name="&lt;PayoutPerPointMobile/&gt; should render label name correctly" time="0.024">
    </testcase>
    <testcase classname="&lt;PayoutPerPointMobile/&gt; should render amount correctly" name="&lt;PayoutPerPointMobile/&gt; should render amount correctly" time="0.009">
    </testcase>
    <testcase classname="&lt;PayoutPerPointMobile/&gt; should render currency correctly" name="&lt;PayoutPerPointMobile/&gt; should render currency correctly" time="0.011">
    </testcase>
    <testcase classname="&lt;PayoutPerPointMobile/&gt; should render tooltip text for Turbos correctly" name="&lt;PayoutPerPointMobile/&gt; should render tooltip text for Turbos correctly" time="0.019">
    </testcase>
    <testcase classname="&lt;PayoutPerPointMobile/&gt; should render tooltip text for Vanillas correctly" name="&lt;PayoutPerPointMobile/&gt; should render tooltip text for Vanillas correctly" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradeCategoriesGIF /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:20" time="3.203" tests="22">
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageAsianUpDown to be rendered when trade category is TRADE_TYPES.ASIAN" name="&lt;TradeCategoriesGIF /&gt; expect ImageAsianUpDown to be rendered when trade category is TRADE_TYPES.ASIAN" time="0.214">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageSpread to be rendered when trade category is TRADE_TYPES.CALL_PUT_SPREAD" name="&lt;TradeCategoriesGIF /&gt; expect ImageSpread to be rendered when trade category is TRADE_TYPES.CALL_PUT_SPREAD" time="0.137">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageEndsInOut to be rendered when trade category is TRADE_TYPES.END" name="&lt;TradeCategoriesGIF /&gt; expect ImageEndsInOut to be rendered when trade category is TRADE_TYPES.END" time="0.143">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageEvenOdd to be rendered when trade category is TRADE_TYPES.EVEN_ODD" name="&lt;TradeCategoriesGIF /&gt; expect ImageEvenOdd to be rendered when trade category is TRADE_TYPES.EVEN_ODD" time="0.152">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageHighLow to be rendered when trade category is TRADE_TYPES.HIGH_LOW" name="&lt;TradeCategoriesGIF /&gt; expect ImageHighLow to be rendered when trade category is TRADE_TYPES.HIGH_LOW" time="0.17">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageCloseToLow to be rendered when trade category is TRADE_TYPES.LB_CALL" name="&lt;TradeCategoriesGIF /&gt; expect ImageCloseToLow to be rendered when trade category is TRADE_TYPES.LB_CALL" time="0.137">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageHighToClose to be rendered when trade category is TRADE_TYPES.LB_PUT" name="&lt;TradeCategoriesGIF /&gt; expect ImageHighToClose to be rendered when trade category is TRADE_TYPES.LB_PUT" time="0.136">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageHighToLow to be rendered when trade category is TRADE_TYPES.LB_HIGH_LOW" name="&lt;TradeCategoriesGIF /&gt; expect ImageHighToLow to be rendered when trade category is TRADE_TYPES.LB_HIGH_LOW" time="0.131">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageRiseFall to be rendered when trade category is TRADE_TYPES.RISE_FALL" name="&lt;TradeCategoriesGIF /&gt; expect ImageRiseFall to be rendered when trade category is TRADE_TYPES.RISE_FALL" time="0.161">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageRiseFall to be rendered when trade category is TRADE_TYPES.RISE_FALL_EQUAL" name="&lt;TradeCategoriesGIF /&gt; expect ImageRiseFall to be rendered when trade category is TRADE_TYPES.RISE_FALL_EQUAL" time="0.144">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageMatchDiff to be rendered when trade category is TRADE_TYPES.MATCH_DIFF" name="&lt;TradeCategoriesGIF /&gt; expect ImageMatchDiff to be rendered when trade category is TRADE_TYPES.MATCH_DIFF" time="0.139">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageMultiplier to be rendered when trade category is TRADE_TYPES.MULTIPLIER" name="&lt;TradeCategoriesGIF /&gt; expect ImageMultiplier to be rendered when trade category is TRADE_TYPES.MULTIPLIER" time="0.153">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageOverUnder to be rendered when trade category is TRADE_TYPES.OVER_UNDER" name="&lt;TradeCategoriesGIF /&gt; expect ImageOverUnder to be rendered when trade category is TRADE_TYPES.OVER_UNDER" time="0.15">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageReset to be rendered when trade category is TRADE_TYPES.RESET" name="&lt;TradeCategoriesGIF /&gt; expect ImageReset to be rendered when trade category is TRADE_TYPES.RESET" time="0.155">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageRunHighLow to be rendered when trade category is TRADE_TYPES.RUN_HIGH_LOW" name="&lt;TradeCategoriesGIF /&gt; expect ImageRunHighLow to be rendered when trade category is TRADE_TYPES.RUN_HIGH_LOW" time="0.145">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect VideoAccumulator to be rendered when trade category is accumulator" name="&lt;TradeCategoriesGIF /&gt; expect VideoAccumulator to be rendered when trade category is accumulator" time="0.08">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageTickHighLow to be rendered when trade category is TRADE_TYPES.TICK_HIGH_LOW" name="&lt;TradeCategoriesGIF /&gt; expect ImageTickHighLow to be rendered when trade category is TRADE_TYPES.TICK_HIGH_LOW" time="0.075">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect ImageTouch to be rendered when trade category is TRADE_TYPES.TOUCH" name="&lt;TradeCategoriesGIF /&gt; expect ImageTouch to be rendered when trade category is TRADE_TYPES.TOUCH" time="0.069">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect VideoVanilla to be rendered when trade category is vanilla" name="&lt;TradeCategoriesGIF /&gt; expect VideoVanilla to be rendered when trade category is vanilla" time="0.078">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; expect VideoTurbos to be rendered when trade category is TRADE_TYPES.TURBOS.LONG" name="&lt;TradeCategoriesGIF /&gt; expect VideoTurbos to be rendered when trade category is TRADE_TYPES.TURBOS.LONG" time="0.078">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; component should return null if category is not equal to selected_contract_type" name="&lt;TradeCategoriesGIF /&gt; component should return null if category is not equal to selected_contract_type" time="0.068">
    </testcase>
    <testcase classname="&lt;TradeCategoriesGIF /&gt; component should return null if category and selected_contract_type are not defined correctly" name="&lt;TradeCategoriesGIF /&gt; component should return null if category and selected_contract_type are not defined correctly" time="0.063">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MobileWidget /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:22" time="0.677" tests="2">
    <testcase classname="&lt;MobileWidget /&gt; should render mocked multiplier amount widgets if is_multiplier is true" name="&lt;MobileWidget /&gt; should render mocked multiplier amount widgets if is_multiplier is true" time="0.014">
    </testcase>
    <testcase classname="&lt;MobileWidget /&gt; should render general widgets if is_multiplier is false" name="&lt;MobileWidget /&gt; should render general widgets if is_multiplier is false" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="updateAmountChanges" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:23" time="0.244" tests="3">
    <testcase classname="updateAmountChanges should update basis to &quot;stake&quot; and amount to stake_value when basis is &quot;stake&quot; and stake_value is different from trade_amount" name="updateAmountChanges should update basis to &quot;stake&quot; and amount to stake_value when basis is &quot;stake&quot; and stake_value is different from trade_amount" time="0.001">
    </testcase>
    <testcase classname="updateAmountChanges should update basis to &quot;payout&quot; and amount to payout_value when basis is &quot;payout&quot; and payout_value is different from trade_amount" name="updateAmountChanges should update basis to &quot;payout&quot; and amount to payout_value when basis is &quot;payout&quot; and payout_value is different from trade_amount" time="0.001">
    </testcase>
    <testcase classname="updateAmountChanges should update basis to trade_basis and amount to trade_amount when basis is different from trade_basis" name="updateAmountChanges should update basis to trade_basis and amount to trade_amount when basis is different from trade_basis" time="0">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PurchaseButton /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:23" time="0.788" tests="7">
    <testcase classname="&lt;PurchaseButton /&gt; should render a button with specific text for contract type and icon" name="&lt;PurchaseButton /&gt; should render a button with specific text for contract type and icon" time="0.018">
    </testcase>
    <testcase classname="&lt;PurchaseButton /&gt; should apply a specific classNames if is_loading === true" name="&lt;PurchaseButton /&gt; should apply a specific classNames if is_loading === true" time="0.023">
    </testcase>
    <testcase classname="&lt;PurchaseButton /&gt; should call function setPurchaseState and onClickPurchase if purchase button was clicked" name="&lt;PurchaseButton /&gt; should call function setPurchaseState and onClickPurchase if purchase button was clicked" time="0.014">
    </testcase>
    <testcase classname="&lt;PurchaseButton /&gt; should render the button with &lt;Money /&gt; component inside for multipliers contract" name="&lt;PurchaseButton /&gt; should render the button with &lt;Money /&gt; component inside for multipliers contract" time="0.01">
    </testcase>
    <testcase classname="&lt;PurchaseButton /&gt; should render the button for accumulators" name="&lt;PurchaseButton /&gt; should render the button for accumulators" time="0.003">
    </testcase>
    <testcase classname="&lt;PurchaseButton /&gt; should render icon with specific type if is_high_low === true" name="&lt;PurchaseButton /&gt; should render icon with specific type if is_high_low === true" time="0.004">
    </testcase>
    <testcase classname="&lt;PurchaseButton /&gt; should render ContractInfo for mobile if contract type is not accumulators, turbos or vanillas" name="&lt;PurchaseButton /&gt; should render ContractInfo for mobile if contract type is not accumulators, turbos or vanillas" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RiskManagementInfo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:23" time="0.711" tests="5">
    <testcase classname="&lt;RiskManagementInfo /&gt; should render only risk management block if has_take_profit, has_stop_loss, has_cancellation are equal to false" name="&lt;RiskManagementInfo /&gt; should render only risk management block if has_take_profit, has_stop_loss, has_cancellation are equal to false" time="0.014">
    </testcase>
    <testcase classname="&lt;RiskManagementInfo /&gt; should render has_take_profit, has_stop_loss, has_cancellation blocks if proper values are equal to true and not render risk management block " name="&lt;RiskManagementInfo /&gt; should render has_take_profit, has_stop_loss, has_cancellation blocks if proper values are equal to true and not render risk management block " time="0.02">
    </testcase>
    <testcase classname="&lt;RiskManagementInfo /&gt; should render &lt;RiskManagementDialog /&gt; if user clicked on one of the risk management blocks" name="&lt;RiskManagementInfo /&gt; should render &lt;RiskManagementDialog /&gt; if user clicked on one of the risk management blocks" time="0.03">
    </testcase>
    <testcase classname="&lt;RiskManagementInfo /&gt; should close &lt;RiskManagementDialog /&gt; if user clicked on close button" name="&lt;RiskManagementInfo /&gt; should close &lt;RiskManagementDialog /&gt; if user clicked on close button" time="0.034">
    </testcase>
    <testcase classname="&lt;RiskManagementInfo /&gt; should close &lt;RiskManagementDialog /&gt; if user clicked on toggle button" name="&lt;RiskManagementInfo /&gt; should close &lt;RiskManagementDialog /&gt; if user clicked on toggle button" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="LabeledQuantityInputMobile" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:23" time="0.566" tests="2">
    <testcase classname="LabeledQuantityInputMobile should render Stake input" name="LabeledQuantityInputMobile should render Stake input" time="0.061">
    </testcase>
    <testcase classname="LabeledQuantityInputMobile should render Barrier input" name="LabeledQuantityInputMobile should render Barrier input" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CancelDeal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:23" time="0.752" tests="7">
    <testcase classname="&lt;CancelDeal /&gt; should render the component with checkbox and popover" name="&lt;CancelDeal /&gt; should render the component with checkbox and popover" time="0.042">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; should render &lt;RadioGroup /&gt; if has_cancellation === true and cancellation_range_list contains proper info" name="&lt;CancelDeal /&gt; should render &lt;RadioGroup /&gt; if has_cancellation === true and cancellation_range_list contains proper info" time="0.01">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; should call onToggleCancellation if user clicked on Deal cancellation checkbox and onToggleDealCancel returned true" name="&lt;CancelDeal /&gt; should call onToggleCancellation if user clicked on Deal cancellation checkbox and onToggleDealCancel returned true" time="0.021">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; should show &lt;DealCancellationWarningDialog /&gt; if (has_take_profit || has_stop_loss) &amp;&amp; should_show_cancellation_warning is equal to true and user clicked on Deal cancellation checkbox" name="&lt;CancelDeal /&gt; should show &lt;DealCancellationWarningDialog /&gt; if (has_take_profit || has_stop_loss) &amp;&amp; should_show_cancellation_warning is equal to true and user clicked on Deal cancellation checkbox" time="0.017">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; should call toggleCancellationWarning function if cancellation warning checkbox inside of &lt;DealCancellationWarningDialog /&gt; was clicked" name="&lt;CancelDeal /&gt; should call toggleCancellationWarning function if cancellation warning checkbox inside of &lt;DealCancellationWarningDialog /&gt; was clicked" time="0.021">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; &lt;DealCancellationWarningDialog /&gt; should not be visible if Cancel button was clicked" name="&lt;CancelDeal /&gt; &lt;DealCancellationWarningDialog /&gt; should not be visible if Cancel button was clicked" time="0.017">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; &lt;DealCancellationWarningDialog /&gt; should not be visible if Confirm button was clicked" name="&lt;CancelDeal /&gt; &lt;DealCancellationWarningDialog /&gt; should not be visible if Confirm button was clicked" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="RadioGroupWithInfoMobile" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:23" time="0.6" tests="5">
    <testcase classname="RadioGroupWithInfoMobile should render all radio buttons with their respective text and value" name="RadioGroupWithInfoMobile should render all radio buttons with their respective text and value" time="0.036">
    </testcase>
    <testcase classname="RadioGroupWithInfoMobile second radio option should be selected" name="RadioGroupWithInfoMobile second radio option should be selected" time="0.01">
    </testcase>
    <testcase classname="RadioGroupWithInfoMobile first radio option should be selected when user selects and modal should be toggled after clicking" name="RadioGroupWithInfoMobile first radio option should be selected when user selects and modal should be toggled after clicking" time="0.023">
    </testcase>
    <testcase classname="RadioGroupWithInfoMobile should render popover components as children with proper classname" name="RadioGroupWithInfoMobile should render popover components as children with proper classname" time="0.003">
    </testcase>
    <testcase classname="RadioGroupWithInfoMobile should not render popover components if should_show_tooltip is falsy" name="RadioGroupWithInfoMobile should not render popover components if should_show_tooltip is falsy" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DurationMobile /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:23" time="0.569" tests="8">
    <testcase classname="&lt;DurationMobile /&gt; Should render Range slider and simple duration widget if is_advanced_duration is false, duration_unit = t and duration_unit_list is length = 1" name="&lt;DurationMobile /&gt; Should render Range slider and simple duration widget if is_advanced_duration is false, duration_unit = t and duration_unit_list is length = 1" time="0.02">
    </testcase>
    <testcase classname="&lt;DurationMobile /&gt; Should render Duration toggle if contract_type is not vanilla " name="&lt;DurationMobile /&gt; Should render Duration toggle if contract_type is not vanilla " time="0.005">
    </testcase>
    <testcase classname="&lt;DurationMobile /&gt; Should not render Duration toggle if contract_type is vanilla " name="&lt;DurationMobile /&gt; Should not render Duration toggle if contract_type is vanilla " time="0.003">
    </testcase>
    <testcase classname="&lt;DurationMobile /&gt; Should render AdvanceDuration widget if is_advanced_duration is true and duration_units_list length is &gt; 1" name="&lt;DurationMobile /&gt; Should render AdvanceDuration widget if is_advanced_duration is true and duration_units_list length is &gt; 1" time="0.003">
    </testcase>
    <testcase classname="&lt;DurationMobile /&gt; Should render SimpleDuration widget if is_advanced_duration is false and duration_units_list length is &gt; 1" name="&lt;DurationMobile /&gt; Should render SimpleDuration widget if is_advanced_duration is false and duration_units_list length is &gt; 1" time="0.002">
    </testcase>
    <testcase classname="&lt;DurationMobile /&gt; Should call onChangeUiStore and onChangeMultiple when duration toggle is clicked" name="&lt;DurationMobile /&gt; Should call onChangeUiStore and onChangeMultiple when duration toggle is clicked" time="0.015">
    </testcase>
    <testcase classname="&lt;DurationMobile /&gt; Should render 12 Days if is_minimized is true and expiry_type is duration" name="&lt;DurationMobile /&gt; Should render 12 Days if is_minimized is true and expiry_type is duration" time="0.004">
    </testcase>
    <testcase classname="&lt;DurationMobile /&gt; Should render expiry date and time if is_minimized is true and expiry_type is not duration" name="&lt;DurationMobile /&gt; Should render expiry date and time if is_minimized is true and expiry_type is not duration" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DurationToggle /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:23" time="0.526" tests="2">
    <testcase classname="&lt;DurationToggle /&gt; Should render toggle button" name="&lt;DurationToggle /&gt; Should render toggle button" time="0.011">
    </testcase>
    <testcase classname="&lt;DurationToggle /&gt; Should call onChange when button is clicked" name="&lt;DurationToggle /&gt; Should call onChange when button is clicked" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DurationTicksWidgetMobile /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:23" time="0.644" tests="3">
    <testcase classname="&lt;DurationTicksWidgetMobile /&gt; Should call setDurationError on mount" name="&lt;DurationTicksWidgetMobile /&gt; Should call setDurationError on mount" time="0.019">
    </testcase>
    <testcase classname="&lt;DurationTicksWidgetMobile /&gt; Should call onChangeMultiple and toggleModal when setTicksDuration is invoked" name="&lt;DurationTicksWidgetMobile /&gt; Should call onChangeMultiple and toggleModal when setTicksDuration is invoked" time="0.021">
    </testcase>
    <testcase classname="&lt;DurationTicksWidgetMobile /&gt; should render items on screen" name="&lt;DurationTicksWidgetMobile /&gt; should render items on screen" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DurationRangeText /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:24" time="0.544" tests="3">
    <testcase classname="&lt;DurationRangeText /&gt; should render component with proper formatted date if has_error === false and fixed_date was not passed" name="&lt;DurationRangeText /&gt; should render component with proper formatted date if has_error === false and fixed_date was not passed" time="0.015">
    </testcase>
    <testcase classname="&lt;DurationRangeText /&gt; should not render date if has_error === true" name="&lt;DurationRangeText /&gt; should not render date if has_error === true" time="0.002">
    </testcase>
    <testcase classname="&lt;DurationRangeText /&gt; should render fixed date if it was passed" name="&lt;DurationRangeText /&gt; should render fixed date if it was passed" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DurationWrapper /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:23" time="0.754" tests="6">
    <testcase classname="&lt;DurationWrapper /&gt; should render advanced duration with Duration &amp; End time toggle, and 3 Minutes" name="&lt;DurationWrapper /&gt; should render advanced duration with Duration &amp; End time toggle, and 3 Minutes" time="0.045">
    </testcase>
    <testcase classname="&lt;DurationWrapper /&gt; should render 15 Seconds duration" name="&lt;DurationWrapper /&gt; should render 15 Seconds duration" time="0.012">
    </testcase>
    <testcase classname="&lt;DurationWrapper /&gt; should execute onChange &amp; onChangeUiStore when a user is typing a new value" name="&lt;DurationWrapper /&gt; should execute onChange &amp; onChangeUiStore when a user is typing a new value" time="0.039">
    </testcase>
    <testcase classname="&lt;DurationWrapper /&gt; should render simple duration with Ticks &amp; Minutes toggle, and 3 Minutes" name="&lt;DurationWrapper /&gt; should render simple duration with Ticks &amp; Minutes toggle, and 3 Minutes" time="0.009">
    </testcase>
    <testcase classname="&lt;DurationWrapper /&gt; should render advanced Duration &amp; End time toggle with date &amp; time pickers when expiry_type is endtime" name="&lt;DurationWrapper /&gt; should render advanced Duration &amp; End time toggle with date &amp; time pickers when expiry_type is endtime" time="0.016">
    </testcase>
    <testcase classname="&lt;DurationWrapper /&gt; should render simple Duration &amp; End time toggle with date &amp; time pickers when expiry_type is intraday" name="&lt;DurationWrapper /&gt; should render simple Duration &amp; End time toggle with date &amp; time pickers when expiry_type is intraday" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DurationRangeText /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:24" time="0.53" tests="3">
    <testcase classname="&lt;DurationRangeText /&gt; should render component with a proper text for seconds" name="&lt;DurationRangeText /&gt; should render component with a proper text for seconds" time="0.01">
    </testcase>
    <testcase classname="&lt;DurationRangeText /&gt; should render component with a proper text for minutes" name="&lt;DurationRangeText /&gt; should render component with a proper text for minutes" time="0.004">
    </testcase>
    <testcase classname="&lt;DurationRangeText /&gt; should render component with a proper text for hours" name="&lt;DurationRangeText /&gt; should render component with a proper text for hours" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DurationMobile /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:24" time="0.622" tests="1">
    <testcase classname="&lt;DurationMobile /&gt; Should render 1 Ticks Widget, 4 Numbers Widget and mocked date picker" name="&lt;DurationMobile /&gt; Should render 1 Ticks Widget, 4 Numbers Widget and mocked date picker" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AdvancedDuration /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:24" time="0.667" tests="9">
    <testcase classname="&lt;AdvancedDuration /&gt; Should render mocked button toggle if expiry_list is of length &gt; 1" name="&lt;AdvancedDuration /&gt; Should render mocked button toggle if expiry_list is of length &gt; 1" time="0.026">
    </testcase>
    <testcase classname="&lt;AdvancedDuration /&gt; Should not render mocked button toggle if expiry_list is of length &lt;= 1" name="&lt;AdvancedDuration /&gt; Should not render mocked button toggle if expiry_list is of length &lt;= 1" time="0.006">
    </testcase>
    <testcase classname="&lt;AdvancedDuration /&gt; Should render mocked trading date and trading time picker if contract is 24 hours and expiry type is endtime" name="&lt;AdvancedDuration /&gt; Should render mocked trading date and trading time picker if contract is 24 hours and expiry type is endtime" time="0.004">
    </testcase>
    <testcase classname="&lt;AdvancedDuration /&gt; Should render mocked expiry text and should not render trading time picker if contract is not 24 hours and expiry type is endtime" name="&lt;AdvancedDuration /&gt; Should render mocked expiry text and should not render trading time picker if contract is not 24 hours and expiry type is endtime" time="0.004">
    </testcase>
    <testcase classname="&lt;AdvancedDuration /&gt; Should render mocked dropdown if duration_units_list length is &gt; 1" name="&lt;AdvancedDuration /&gt; Should render mocked dropdown if duration_units_list length is &gt; 1" time="0.002">
    </testcase>
    <testcase classname="&lt;AdvancedDuration /&gt; Should not render mocked dropdown if duration_units_list length is &gt; 0" name="&lt;AdvancedDuration /&gt; Should not render mocked dropdown if duration_units_list length is &gt; 0" time="0.002">
    </testcase>
    <testcase classname="&lt;AdvancedDuration /&gt; Should render mocked trading date picker and mocked expiry text if advanced_duration_unit === d &amp; !==t" name="&lt;AdvancedDuration /&gt; Should render mocked trading date picker and mocked expiry text if advanced_duration_unit === d &amp; !==t" time="0.004">
    </testcase>
    <testcase classname="&lt;AdvancedDuration /&gt; Should render mocked trading date picker and mocked expiry text if advanced_duration_unit === t &amp;&amp; contract_expiry_type === tick" name="&lt;AdvancedDuration /&gt; Should render mocked trading date picker and mocked expiry text if advanced_duration_unit === t &amp;&amp; contract_expiry_type === tick" time="0.006">
    </testcase>
    <testcase classname="&lt;AdvancedDuration /&gt; Should render mocked mocked input field if advanced_duration_unit is intraday like h or m" name="&lt;AdvancedDuration /&gt; Should render mocked mocked input field if advanced_duration_unit is intraday like h or m" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DurationTicksWidgetMobile /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:24" time="0.71" tests="6">
    <testcase classname="&lt;DurationTicksWidgetMobile /&gt; should render Mocked duration range text" name="&lt;DurationTicksWidgetMobile /&gt; should render Mocked duration range text" time="0.026">
    </testcase>
    <testcase classname="&lt;DurationTicksWidgetMobile /&gt; should render mocked expiry text if show_expiry is true" name="&lt;DurationTicksWidgetMobile /&gt; should render mocked expiry text if show_expiry is true" time="0.018">
    </testcase>
    <testcase classname="&lt;DurationTicksWidgetMobile /&gt; Should show validation messages if selected_duration is less than minimum" name="&lt;DurationTicksWidgetMobile /&gt; Should show validation messages if selected_duration is less than minimum" time="0.012">
    </testcase>
    <testcase classname="&lt;DurationTicksWidgetMobile /&gt; Should show validation messages if selected_duration is empty" name="&lt;DurationTicksWidgetMobile /&gt; Should show validation messages if selected_duration is empty" time="0.009">
    </testcase>
    <testcase classname="&lt;DurationTicksWidgetMobile /&gt; Should call setDurationError with false value and should not call addToast when there is not validation error" name="&lt;DurationTicksWidgetMobile /&gt; Should call setDurationError with false value and should not call addToast when there is not validation error" time="0.015">
    </testcase>
    <testcase classname="&lt;DurationTicksWidgetMobile /&gt; should call updateAmountChanges, onChangeMultiple, and toggleModal if there is has_amount_error is false, duration is changed and user clicks ok" name="&lt;DurationTicksWidgetMobile /&gt; should call updateAmountChanges, onChangeMultiple, and toggleModal if there is has_amount_error is false, duration is changed and user clicks ok" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccumulatorsAmountMobile /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:24" time="0.647" tests="2">
    <testcase classname="&lt;AccumulatorsAmountMobile /&gt; should render child &lt;LabeledQuantityInputMobile /&gt; component" name="&lt;AccumulatorsAmountMobile /&gt; should render child &lt;LabeledQuantityInputMobile /&gt; component" time="0.017">
    </testcase>
    <testcase classname="&lt;AccumulatorsAmountMobile /&gt; should render child &lt;LabeledQuantityInputMobile /&gt; component with inline prefix if is_single_currency is true" name="&lt;AccumulatorsAmountMobile /&gt; should render child &lt;LabeledQuantityInputMobile /&gt; component with inline prefix if is_single_currency is true" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Accumulator" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:24" time="0.666" tests="4">
    <testcase classname="Accumulator should render with the initially selected 1% growth_rate" name="Accumulator should render with the initially selected 1% growth_rate" time="0.025">
    </testcase>
    <testcase classname="Accumulator 3% growth_rate should be selected when 0.03 is a currently selected and stored growth_rate value" name="Accumulator 3% growth_rate should be selected when 0.03 is a currently selected and stored growth_rate value" time="0.01">
    </testcase>
    <testcase classname="Accumulator component should return null if accumulator_range_list is empty" name="Accumulator component should return null if accumulator_range_list is empty" time="0.002">
    </testcase>
    <testcase classname="Accumulator should not render the component if accumulator_range_list is empty" name="Accumulator should not render the component if accumulator_range_list is empty" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="AccumulatorsInfoDisplay" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:24" time="0.698" tests="4">
    <testcase classname="AccumulatorsInfoDisplay should render popover components as children with proper classname and values" name="AccumulatorsInfoDisplay should render popover components as children with proper classname and values" time="0.021">
    </testcase>
    <testcase classname="AccumulatorsInfoDisplay should render correct phrase if maximum_ticks === 1" name="AccumulatorsInfoDisplay should render correct phrase if maximum_ticks === 1" time="0.018">
    </testcase>
    <testcase classname="AccumulatorsInfoDisplay should render correct max ticks if they were not passed" name="AccumulatorsInfoDisplay should render correct max ticks if they were not passed" time="0.01">
    </testcase>
    <testcase classname="AccumulatorsInfoDisplay should pass correct aligment for mobile" name="AccumulatorsInfoDisplay should pass correct aligment for mobile" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="AccumulatorsSellButton" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.653" tests="2">
    <testcase classname="AccumulatorsSellButton should render component" name="AccumulatorsSellButton should render component" time="0.029">
    </testcase>
    <testcase classname="AccumulatorsSellButton should render component with disabled button and without current stake" name="AccumulatorsSellButton should render component with disabled button and without current stake" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AllowEquals /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.686" tests="3">
    <testcase classname="&lt;AllowEquals /&gt; should render component if it is not RiseFallEqual and hasCallPutEqual returns false" name="&lt;AllowEquals /&gt; should render component if it is not RiseFallEqual and hasCallPutEqual returns false" time="0.006">
    </testcase>
    <testcase classname="&lt;AllowEquals /&gt; should render Allow equals checkbox with popover if it is RiseFallEqual and hasCallPutEqual returns true" name="&lt;AllowEquals /&gt; should render Allow equals checkbox with popover if it is RiseFallEqual and hasCallPutEqual returns true" time="0.02">
    </testcase>
    <testcase classname="&lt;AllowEquals /&gt; should call onChange function if user clicked on checkbox" name="&lt;AllowEquals /&gt; should call onChange function if user clicked on checkbox" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BarriersList/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.704" tests="6">
    <testcase classname="&lt;BarriersList/&gt; all barrier options should be rendered" name="&lt;BarriersList/&gt; all barrier options should be rendered" time="0.024">
    </testcase>
    <testcase classname="&lt;BarriersList/&gt; selected barrier should have a proper className" name="&lt;BarriersList/&gt; selected barrier should have a proper className" time="0.004">
    </testcase>
    <testcase classname="&lt;BarriersList/&gt; non-selected barrier option should have a proper className" name="&lt;BarriersList/&gt; non-selected barrier option should have a proper className" time="0.005">
    </testcase>
    <testcase classname="&lt;BarriersList/&gt; click handler should be called after clicking on the 2nd barrier option (33)" name="&lt;BarriersList/&gt; click handler should be called after clicking on the 2nd barrier option (33)" time="0.012">
    </testcase>
    <testcase classname="&lt;BarriersList/&gt; hover handler should be called when the 3rd barrier option (40) is hovered" name="&lt;BarriersList/&gt; hover handler should be called when the 3rd barrier option (40) is hovered" time="0.008">
    </testcase>
    <testcase classname="&lt;BarriersList/&gt; hover handler should be called with null when mouseLeave event fires on the 3rd barrier option (40)" name="&lt;BarriersList/&gt; hover handler should be called with null when mouseLeave event fires on the 3rd barrier option (40)" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Amount/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.679" tests="8">
    <testcase classname="&lt;Amount/&gt; should render only one Numpad component with value equal to payout_value if basis_list.length === 1 and basis_list[0].value is payout" name="&lt;Amount/&gt; should render only one Numpad component with value equal to payout_value if basis_list.length === 1 and basis_list[0].value is payout" time="0.017">
    </testcase>
    <testcase classname="&lt;Amount/&gt; should render only one Numpad component with value equal to stake_value if basis_list.length === 1 and basis_list[0].value is stake" name="&lt;Amount/&gt; should render only one Numpad component with value equal to stake_value if basis_list.length === 1 and basis_list[0].value is stake" time="0.005">
    </testcase>
    <testcase classname="&lt;Amount/&gt; should not render extra Numpad components except payout and stake" name="&lt;Amount/&gt; should not render extra Numpad components except payout and stake" time="0.004">
    </testcase>
    <testcase classname="&lt;Amount/&gt; should render MinMaxStakeInfo for Turbos" name="&lt;Amount/&gt; should render MinMaxStakeInfo for Turbos" time="0.016">
    </testcase>
    <testcase classname="&lt;Amount/&gt; should pass the validation if user insert correct stake value" name="&lt;Amount/&gt; should pass the validation if user insert correct stake value" time="0.012">
    </testcase>
    <testcase classname="&lt;Amount/&gt; should not pass the validation if user insert zero stake value" name="&lt;Amount/&gt; should not pass the validation if user insert zero stake value" time="0.008">
    </testcase>
    <testcase classname="&lt;Amount/&gt; should not pass the validation if user insert stake value which is less then allowed min stake" name="&lt;Amount/&gt; should not pass the validation if user insert stake value which is less then allowed min stake" time="0.015">
    </testcase>
    <testcase classname="&lt;Amount/&gt; should not pass the validation if user clicked on other buttons except those with numbers" name="&lt;Amount/&gt; should not pass the validation if user clicked on other buttons except those with numbers" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Strike /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.696" tests="8">
    <testcase classname="&lt;Strike /&gt; should render Strike component with default props" name="&lt;Strike /&gt; should render Strike component with default props" time="0.028">
    </testcase>
    <testcase classname="&lt;Strike /&gt; should not allow to change strike manually" name="&lt;Strike /&gt; should not allow to change strike manually" time="0.007">
    </testcase>
    <testcase classname="&lt;Strike /&gt; should display Spot for minutes correctly" name="&lt;Strike /&gt; should display Spot for minutes correctly" time="0.012">
    </testcase>
    <testcase classname="&lt;Strike /&gt; should display Spot for hours correctly" name="&lt;Strike /&gt; should display Spot for hours correctly" time="0.007">
    </testcase>
    <testcase classname="&lt;Strike /&gt; should not display Spot for days" name="&lt;Strike /&gt; should not display Spot for days" time="0.005">
    </testcase>
    <testcase classname="&lt;Strike /&gt; should open and close BarriersList on input click" name="&lt;Strike /&gt; should open and close BarriersList on input click" time="0.045">
    </testcase>
    <testcase classname="&lt;Strike /&gt; should render a proper children components if it is mobile" name="&lt;Strike /&gt; should render a proper children components if it is mobile" time="0.004">
    </testcase>
    <testcase classname="&lt;Strike /&gt; should not render Spot components if it duration_unit is equal to &quot;d&quot; in mobile" name="&lt;Strike /&gt; should not render Spot components if it duration_unit is equal to &quot;d&quot; in mobile" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Amount /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.69" tests="6">
    <testcase classname="&lt;Amount /&gt; should render specific content if is_minimized === true" name="&lt;Amount /&gt; should render specific content if is_minimized === true" time="0.017">
    </testcase>
    <testcase classname="&lt;Amount /&gt; should render only specific for Turbos components if it is a Turbos contract type" name="&lt;Amount /&gt; should render only specific for Turbos components if it is a Turbos contract type" time="0.015">
    </testcase>
    <testcase classname="&lt;Amount /&gt; should render only specific for Vanillas components if it is a Vanillas contract type" name="&lt;Amount /&gt; should render only specific for Vanillas components if it is a Vanillas contract type" time="0.005">
    </testcase>
    <testcase classname="&lt;Amount /&gt; should render only specific for Multipliers components if it is a Multiplier contract type" name="&lt;Amount /&gt; should render only specific for Multipliers components if it is a Multiplier contract type" time="0.006">
    </testcase>
    <testcase classname="&lt;Amount /&gt; should render only specific for RiseFallEquals components if it is a TRADE_TYPES.RISE_FALL_EQUAL contract type" name="&lt;Amount /&gt; should render only specific for RiseFallEquals components if it is a TRADE_TYPES.RISE_FALL_EQUAL contract type" time="0.02">
    </testcase>
    <testcase classname="&lt;Amount /&gt; should render only input without dropdown if it is single currency contract" name="&lt;Amount /&gt; should render only input without dropdown if it is single currency contract" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MinMaxStakeInfo/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.578" tests="1">
    <testcase classname="&lt;MinMaxStakeInfo/&gt; should be rendered correctly with both Min. stake and Max. stake" name="&lt;MinMaxStakeInfo/&gt; should be rendered correctly with both Min. stake and Max. stake" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Barrier /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.668" tests="5">
    <testcase classname="&lt;Barrier /&gt; should render only barrier_1 if barrier_count === 1 and is_minimized === true" name="&lt;Barrier /&gt; should render only barrier_1 if barrier_count === 1 and is_minimized === true" time="0.013">
    </testcase>
    <testcase classname="&lt;Barrier /&gt; should render both barriers if barrier_count === 2 and is_minimized === true" name="&lt;Barrier /&gt; should render both barriers if barrier_count === 2 and is_minimized === true" time="0.004">
    </testcase>
    <testcase classname="&lt;Barrier /&gt; should render both InputField components with barriers if barrier_count === 2 and is_minimized === false" name="&lt;Barrier /&gt; should render both InputField components with barriers if barrier_count === 2 and is_minimized === false" time="0.007">
    </testcase>
    <testcase classname="&lt;Barrier /&gt; should render both InputField components with barriers if barrier_count === 2 and is_minimized === false" name="&lt;Barrier /&gt; should render both InputField components with barriers if barrier_count === 2 and is_minimized === false" time="0.004">
    </testcase>
    <testcase classname="&lt;Barrier /&gt; should render Modal for mobile devices after user clicked on LabeledQuantityInputMobile" name="&lt;Barrier /&gt; should render Modal for mobile devices after user clicked on LabeledQuantityInputMobile" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MultipliersExpirationModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.504" tests="2">
    <testcase classname="&lt;MultipliersExpirationModal /&gt; should render modal with a proper text" name="&lt;MultipliersExpirationModal /&gt; should render modal with a proper text" time="0.017">
    </testcase>
    <testcase classname="&lt;MultipliersExpirationModal /&gt; should call toggleModal if user clicked on OK button" name="&lt;MultipliersExpirationModal /&gt; should call toggleModal if user clicked on OK button" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="Trade Type Tabs" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.587" tests="4">
    <testcase classname="Trade Type Tabs should render Long &amp; Short tabs when contract_type = TRADE_TYPES.TURBOS.LONG" name="Trade Type Tabs should render Long &amp; Short tabs when contract_type = TRADE_TYPES.TURBOS.LONG" time="0.018">
    </testcase>
    <testcase classname="Trade Type Tabs should render Call &amp; Put tabs when contract_type = TRADE_TYPES.VANILLA.CALL" name="Trade Type Tabs should render Call &amp; Put tabs when contract_type = TRADE_TYPES.VANILLA.CALL" time="0.006">
    </testcase>
    <testcase classname="Trade Type Tabs should not render if contract_type is other than turbos or vanillas" name="Trade Type Tabs should not render if contract_type is other than turbos or vanillas" time="0.007">
    </testcase>
    <testcase classname="Trade Type Tabs should call onChange when a tab is clicked" name="Trade Type Tabs should call onChange when a tab is clicked" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Strike /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.66" tests="3">
    <testcase classname="&lt;Strike /&gt; should render a proper children components if it is mobile" name="&lt;Strike /&gt; should render a proper children components if it is mobile" time="0.018">
    </testcase>
    <testcase classname="&lt;Strike /&gt; should not render Spot components if it duration_unit is equal to &quot;d&quot; in mobile" name="&lt;Strike /&gt; should not render Spot components if it duration_unit is equal to &quot;d&quot; in mobile" time="0.006">
    </testcase>
    <testcase classname="&lt;Strike /&gt; should render a proper fieldset if it is desktop" name="&lt;Strike /&gt; should render a proper fieldset if it is desktop" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BarrierSelector/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:25" time="0.701" tests="8">
    <testcase classname="&lt;BarrierSelector/&gt; should render properly with Barrier inside it" name="&lt;BarrierSelector/&gt; should render properly with Barrier inside it" time="0.02">
    </testcase>
    <testcase classname="&lt;BarrierSelector/&gt; barrier_1 value is selected by default" name="&lt;BarrierSelector/&gt; barrier_1 value is selected by default" time="0.009">
    </testcase>
    <testcase classname="&lt;BarrierSelector/&gt; barrier list should not be rendered by default" name="&lt;BarrierSelector/&gt; barrier list should not be rendered by default" time="0.01">
    </testcase>
    <testcase classname="&lt;BarrierSelector/&gt; barrier list is displayed after clicking on the current barrier" name="&lt;BarrierSelector/&gt; barrier list is displayed after clicking on the current barrier" time="0.022">
    </testcase>
    <testcase classname="&lt;BarrierSelector/&gt; should render all available barrier values from barrier_choices in barrier list when it is expanded" name="&lt;BarrierSelector/&gt; should render all available barrier values from barrier_choices in barrier list when it is expanded" time="0.019">
    </testcase>
    <testcase classname="&lt;BarrierSelector/&gt; onChange should be called with the new barrier option when it is clicked" name="&lt;BarrierSelector/&gt; onChange should be called with the new barrier option when it is clicked" time="0.02">
    </testcase>
    <testcase classname="&lt;BarrierSelector/&gt; barrier list should not be rendered when cross icon is clicked" name="&lt;BarrierSelector/&gt; barrier list should not be rendered when cross icon is clicked" time="0.024">
    </testcase>
    <testcase classname="&lt;BarrierSelector/&gt; barrier list should not be rendered when the new barrier option was clicked" name="&lt;BarrierSelector/&gt; barrier list should not be rendered when the new barrier option was clicked" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Expiration /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:26" time="0.62" tests="4">
    <testcase classname="&lt;Expiration /&gt; should render only text about date of expiry if is_text_only === true" name="&lt;Expiration /&gt; should render only text about date of expiry if is_text_only === true" time="0.03">
    </testcase>
    <testcase classname="&lt;Expiration /&gt; should render dash instead of date of expiry if is_text_only === true and expiration is falsy" name="&lt;Expiration /&gt; should render dash instead of date of expiry if is_text_only === true and expiration is falsy" time="0.004">
    </testcase>
    <testcase classname="&lt;Expiration /&gt; should render fieldset component with date of expiry if is_text_only === false" name="&lt;Expiration /&gt; should render fieldset component with date of expiry if is_text_only === false" time="0.009">
    </testcase>
    <testcase classname="&lt;Expiration /&gt; should render fieldset component with dash if is_text_only === false and expiration is falsy" name="&lt;Expiration /&gt; should render fieldset component with dash if is_text_only === false and expiration is falsy" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MultipliersInfo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:26" time="0.66" tests="5">
    <testcase classname="&lt;MultipliersInfo /&gt; should render commission text with popover and stop out text with popover" name="&lt;MultipliersInfo /&gt; should render commission text with popover and stop out text with popover" time="0.073">
    </testcase>
    <testcase classname="&lt;MultipliersInfo /&gt; should not render stop out text with popover if has_stop_loss === true" name="&lt;MultipliersInfo /&gt; should not render stop out text with popover if has_stop_loss === true" time="0.007">
    </testcase>
    <testcase classname="&lt;MultipliersInfo /&gt; should not render tooltips if should_show_tooltip === false" name="&lt;MultipliersInfo /&gt; should not render tooltips if should_show_tooltip === false" time="0.005">
    </testcase>
    <testcase classname="&lt;MultipliersInfo /&gt; should render commission text and stop out text even if they were not passed in props (fallback from store should work)" name="&lt;MultipliersInfo /&gt; should render commission text and stop out text even if they were not passed in props (fallback from store should work)" time="0.004">
    </testcase>
    <testcase classname="&lt;MultipliersInfo /&gt; should render zero values for commission text and stop out text if they were not passed in props and fallback is falsy" name="&lt;MultipliersInfo /&gt; should render zero values for commission text and stop out text if they were not passed in props and fallback is falsy" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Multiplier/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:26" time="0.608" tests="1">
    <testcase classname="&lt;Multiplier/&gt; should render component" name="&lt;Multiplier/&gt; should render component" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;StopLoss /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:26" time="0.717" tests="4">
    <testcase classname="&lt;StopLoss /&gt; should render Stop Loss input with checkbox" name="&lt;StopLoss /&gt; should render Stop Loss input with checkbox" time="0.046">
    </testcase>
    <testcase classname="&lt;StopLoss /&gt; should call onChangeMultiple if user clicked on checkbox" name="&lt;StopLoss /&gt; should call onChangeMultiple if user clicked on checkbox" time="0.022">
    </testcase>
    <testcase classname="&lt;StopLoss /&gt; should call onChange if user changed value in input" name="&lt;StopLoss /&gt; should call onChange if user changed value in input" time="0.023">
    </testcase>
    <testcase classname="&lt;StopLoss /&gt; should render functioning Stop Loss input with checkbox if props were not passed (backup should work)" name="&lt;StopLoss /&gt; should render functioning Stop Loss input with checkbox if props were not passed (backup should work)" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="AccumulatorOptionsWidget" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:26" time="0.842" tests="9">
    <testcase classname="AccumulatorOptionsWidget should render component with extra tooltip" name="AccumulatorOptionsWidget should render component with extra tooltip" time="0.028">
    </testcase>
    <testcase classname="AccumulatorOptionsWidget should render tooltip with text if user click on info icon, but should not open RadioGroupOptionsModal" name="AccumulatorOptionsWidget should render tooltip with text if user click on info icon, but should not open RadioGroupOptionsModal" time="0.025">
    </testcase>
    <testcase classname="AccumulatorOptionsWidget if Accumulator contract is not open, user is able to open RadioGroupOptionsModal" name="AccumulatorOptionsWidget if Accumulator contract is not open, user is able to open RadioGroupOptionsModal" time="0.008">
    </testcase>
    <testcase classname="MultiplierOptionsWidget should render component with multipliers value" name="MultiplierOptionsWidget should render component with multipliers value" time="0.002">
    </testcase>
    <testcase classname="MultiplierOptionsWidget should open RadioGroupOptionsModal if user clicked on Multiplier mobile widget" name="MultiplierOptionsWidget should open RadioGroupOptionsModal if user clicked on Multiplier mobile widget" time="0.011">
    </testcase>
    <testcase classname="&lt;MultiplierAmountWidget /&gt; should render only amount of money and Multipliers Info if it is not crypto" name="&lt;MultiplierAmountWidget /&gt; should render only amount of money and Multipliers Info if it is not crypto" time="0.006">
    </testcase>
    <testcase classname="&lt;MultiplierAmountWidget /&gt; should render Multiplier Amount Modal if user clicked on amount button" name="&lt;MultiplierAmountWidget /&gt; should render Multiplier Amount Modal if user clicked on amount button" time="0.009">
    </testcase>
    <testcase classname="&lt;MultiplierAmountWidget /&gt; should render amount of money, Multipliers Info, Multipliers Expiration if it is crypto" name="&lt;MultiplierAmountWidget /&gt; should render amount of money, Multipliers Info, Multipliers Expiration if it is crypto" time="0.008">
    </testcase>
    <testcase classname="&lt;MultiplierAmountWidget /&gt; should render Multipliers Expiration Modal if it is crypto and user clicked on Expiration button" name="&lt;MultiplierAmountWidget /&gt; should render Multipliers Expiration Modal if it is crypto and user clicked on Expiration button" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TakeProfit /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:26" time="0.944" tests="6">
    <testcase classname="&lt;TakeProfit /&gt; should render Take profit input with checkbox" name="&lt;TakeProfit /&gt; should render Take profit input with checkbox" time="0.053">
    </testcase>
    <testcase classname="&lt;TakeProfit /&gt; should call onChangeMultiple if user clicked on checkbox" name="&lt;TakeProfit /&gt; should call onChangeMultiple if user clicked on checkbox" time="0.032">
    </testcase>
    <testcase classname="&lt;TakeProfit /&gt; should call onChange if user changed value in input" name="&lt;TakeProfit /&gt; should call onChange if user changed value in input" time="0.026">
    </testcase>
    <testcase classname="&lt;TakeProfit /&gt; should render functioning Take profits input with checkbox if props were not passed (backup should work)" name="&lt;TakeProfit /&gt; should render functioning Take profits input with checkbox if props were not passed (backup should work)" time="0.04">
    </testcase>
    <testcase classname="&lt;TakeProfit /&gt; should render correct text of the tooltip for Multipliers" name="&lt;TakeProfit /&gt; should render correct text of the tooltip for Multipliers" time="0.029">
    </testcase>
    <testcase classname="&lt;TakeProfit /&gt; should render correct text of the tooltip for Accumulators" name="&lt;TakeProfit /&gt; should render correct text of the tooltip for Accumulators" time="0.045">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CancelDealInfo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:27" time="0.613" tests="5">
    <testcase classname="&lt;CancelDealInfo /&gt; should not render component if has_cancellation is false" name="&lt;CancelDealInfo /&gt; should not render component if has_cancellation is false" time="0.012">
    </testcase>
    <testcase classname="&lt;CancelDealInfo /&gt; should render component if has_cancellation is true" name="&lt;CancelDealInfo /&gt; should render component if has_cancellation is true" time="0.005">
    </testcase>
    <testcase classname="&lt;CancelDealInfo /&gt; should not render Money component if has_error is true" name="&lt;CancelDealInfo /&gt; should not render Money component if has_error is true" time="0.01">
    </testcase>
    <testcase classname="&lt;CancelDealInfo /&gt; should not render Money component if id is falsy and has_error is null or undefined" name="&lt;CancelDealInfo /&gt; should not render Money component if id is falsy and has_error is null or undefined" time="0.004">
    </testcase>
    <testcase classname="&lt;CancelDealInfo /&gt; should apply special className if clientHeight &gt; 21" name="&lt;CancelDealInfo /&gt; should apply special className if clientHeight &gt; 21" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractInfo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:27" time="0.612" tests="11">
    <testcase classname="&lt;ContractInfo /&gt; should render component with children" name="&lt;ContractInfo /&gt; should render component with children" time="0.009">
    </testcase>
    <testcase classname="&lt;ContractInfo /&gt; should render specific components if is_multiplier === true" name="&lt;ContractInfo /&gt; should render specific components if is_multiplier === true" time="0.008">
    </testcase>
    <testcase classname="&lt;ContractInfo /&gt; should render specific components if is_accumulator === true" name="&lt;ContractInfo /&gt; should render specific components if is_accumulator === true" time="0.017">
    </testcase>
    <testcase classname="&lt;ContractInfo /&gt; should apply a proper className if proposal_info.has_error or !proposal_info.id is true" name="&lt;ContractInfo /&gt; should apply a proper className if proposal_info.has_error or !proposal_info.id is true" time="0.002">
    </testcase>
    <testcase classname="&lt;ContractInfo /&gt; should apply a proper className if is_loading &amp;&amp; !should_fade is true" name="&lt;ContractInfo /&gt; should apply a proper className if is_loading &amp;&amp; !should_fade is true" time="0.003">
    </testcase>
    <testcase classname="&lt;ContractInfo /&gt; should apply a proper className if is_loading &amp;&amp; should_fade is true" name="&lt;ContractInfo /&gt; should apply a proper className if is_loading &amp;&amp; should_fade is true" time="0.002">
    </testcase>
    <testcase classname="&lt;ContractInfo /&gt; should apply a proper className and specific tooltip message if is_turbos is true and type is TURBOS.LONG" name="&lt;ContractInfo /&gt; should apply a proper className and specific tooltip message if is_turbos is true and type is TURBOS.LONG" time="0.003">
    </testcase>
    <testcase classname="&lt;ContractInfo /&gt; should render specific tooltip message if is_vanilla is true" name="&lt;ContractInfo /&gt; should render specific tooltip message if is_vanilla is true" time="0.002">
    </testcase>
    <testcase classname="&lt;ContractInfo /&gt; should render specific basis text for Turbos if proposal_info has error and basis is equal to &quot;stake&quot;" name="&lt;ContractInfo /&gt; should render specific basis text for Turbos if proposal_info has error and basis is equal to &quot;stake&quot;" time="0.003">
    </testcase>
    <testcase classname="&lt;ContractInfo /&gt; should render specific basis text if proposal_info has error and basis is equal to &quot;payout&quot;" name="&lt;ContractInfo /&gt; should render specific basis text if proposal_info has error and basis is equal to &quot;payout&quot;" time="0.003">
    </testcase>
    <testcase classname="&lt;ContractInfo /&gt; should render specific basis text if proposal_info has error and basis is not equal to &quot;payout&quot; or &quot;stake&quot;" name="&lt;ContractInfo /&gt; should render specific basis text if proposal_info has error and basis is not equal to &quot;payout&quot; or &quot;stake&quot;" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CancelDeal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:26" time="0.838" tests="7">
    <testcase classname="&lt;CancelDeal /&gt; should not render component if cancellation_range_list is empty " name="&lt;CancelDeal /&gt; should not render component if cancellation_range_list is empty " time="0.01">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; should render Deal cancellation checkbox, popover and dropdown if has_cancellation, has_stop_loss and has_take_profit are equal to true" name="&lt;CancelDeal /&gt; should render Deal cancellation checkbox, popover and dropdown if has_cancellation, has_stop_loss and has_take_profit are equal to true" time="0.028">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; should not render dropdown if has_cancellation is false" name="&lt;CancelDeal /&gt; should not render dropdown if has_cancellation is false" time="0.023">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; should render extra popover (as a result there will be 2 popovers) with notification if should_show_cancellation_warning from ui store is true" name="&lt;CancelDeal /&gt; should render extra popover (as a result there will be 2 popovers) with notification if should_show_cancellation_warning from ui store is true" time="0.006">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; should call onChangeCancellationDuration if user clicked on dropdown" name="&lt;CancelDeal /&gt; should call onChangeCancellationDuration if user clicked on dropdown" time="0.018">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; should call onToggleCancellation if user clicked on checkbox" name="&lt;CancelDeal /&gt; should call onToggleCancellation if user clicked on checkbox" time="0.017">
    </testcase>
    <testcase classname="&lt;CancelDeal /&gt; after user hover on extra popover, text with checkbox should be shown and user will be able to checked; on unhover toggleCancellationWarning should be called" name="&lt;CancelDeal /&gt; after user hover on extra popover, text with checkbox should be shown and user will be able to checked; on unhover toggleCancellationWarning should be called" time="0.122">
    </testcase>
  </testsuite>
  <testsuite name="ScreenLarge" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:27" time="0.586" tests="2">
    <testcase classname="ScreenLarge should render TradeParamsLoader component if is_market_closed is false" name="ScreenLarge should render TradeParamsLoader component if is_market_closed is false" time="0.007">
    </testcase>
    <testcase classname="ScreenLarge should render ContractType, TradeParams and Purchase component if is_trade_enabled is true" name="ScreenLarge should render ContractType, TradeParams and Purchase component if is_trade_enabled is true" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ScreenSmall /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:27" time="0.769" tests="8">
    <testcase classname="&lt;ScreenSmall /&gt; should render TradeParamsLoader if is_trade_enabled === false" name="&lt;ScreenSmall /&gt; should render TradeParamsLoader if is_trade_enabled === false" time="0.014">
    </testcase>
    <testcase classname="&lt;ScreenSmall /&gt; should render CollapsibleTradeParams if is_trade_enabled === true" name="&lt;ScreenSmall /&gt; should render CollapsibleTradeParams if is_trade_enabled === true" time="0.013">
    </testcase>
    <testcase classname="&lt;ScreenSmall /&gt; should call function setIsTradeParamsExpanded if MobileWidget was toggled" name="&lt;ScreenSmall /&gt; should call function setIsTradeParamsExpanded if MobileWidget was toggled" time="0.008">
    </testcase>
    <testcase classname="&lt;ScreenSmall /&gt; should render all specific for Accumulators components inside CollapsibleTradeParams if is_accumulator === true" name="&lt;ScreenSmall /&gt; should render all specific for Accumulators components inside CollapsibleTradeParams if is_accumulator === true" time="0.007">
    </testcase>
    <testcase classname="&lt;ScreenSmall /&gt; should render all specific for Multipliers components inside CollapsibleTradeParams if is_multiplier === true" name="&lt;ScreenSmall /&gt; should render all specific for Multipliers components inside CollapsibleTradeParams if is_multiplier === true" time="0.004">
    </testcase>
    <testcase classname="&lt;ScreenSmall /&gt; should render all specific for Turbos components inside CollapsibleTradeParams if is_turbos === true" name="&lt;ScreenSmall /&gt; should render all specific for Turbos components inside CollapsibleTradeParams if is_turbos === true" time="0.004">
    </testcase>
    <testcase classname="&lt;ScreenSmall /&gt; should render all specific components inside CollapsibleTradeParams if isVisible returns true for current trade type" name="&lt;ScreenSmall /&gt; should render all specific components inside CollapsibleTradeParams if isVisible returns true for current trade type" time="0.017">
    </testcase>
    <testcase classname="&lt;ScreenSmall /&gt; should render specific for allow_equals component inside CollapsibleTradeParams" name="&lt;ScreenSmall /&gt; should render specific for allow_equals component inside CollapsibleTradeParams" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="FormLayout" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:27" time="0.534" tests="1">
    <testcase classname="FormLayout should render the component" name="FormLayout should render the component" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradingTimePicker /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:27" time="0.636" tests="1">
    <testcase classname="&lt;TradingTimePicker /&gt; Should render Mocked Date Picker and tooltip should be rendered" name="&lt;TradingTimePicker /&gt; Should render Mocked Date Picker and tooltip should be rendered" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="ContractTypeDialog Component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:27" time="0.661" tests="3">
    <testcase classname="ContractTypeDialog Component should render &quot;children&quot; when passed in" name="ContractTypeDialog Component should render &quot;children&quot; when passed in" time="0.015">
    </testcase>
    <testcase classname="ContractTypeDialog Component should render &quot;ContractTypeMenu&quot; component in the desktop view" name="ContractTypeDialog Component should render &quot;ContractTypeMenu&quot; component in the desktop view" time="0.005">
    </testcase>
    <testcase classname="ContractTypeDialog Component should render &quot;MobileDialog&quot; component in the mobile view" name="ContractTypeDialog Component should render &quot;MobileDialog&quot; component in the mobile view" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;NoResultsMessage /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:27" time="0.523" tests="1">
    <testcase classname="&lt;NoResultsMessage /&gt; should render correct text when result is not found" name="&lt;NoResultsMessage /&gt; should render correct text when result is not found" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractTypeWidget /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:27" time="0.768" tests="1">
    <testcase classname="&lt;ContractTypeWidget /&gt; should render &lt;ContractTypeMenu /&gt; component when click on " name="&lt;ContractTypeWidget /&gt; should render &lt;ContractTypeMenu /&gt; component when click on " time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="ContractTypeMenu" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:27" time="0.756" tests="3">
    <testcase classname="ContractTypeMenu should not show &lt;ContractTypeMenu /&gt; component when it is closed" name="ContractTypeMenu should not show &lt;ContractTypeMenu /&gt; component when it is closed" time="0.009">
    </testcase>
    <testcase classname="ContractTypeMenu should render &lt;ContractTypeMenu /&gt; component when clicked on" name="ContractTypeMenu should render &lt;ContractTypeMenu /&gt; component when clicked on" time="0.083">
    </testcase>
    <testcase classname="ContractTypeMenu should search in the input" name="ContractTypeMenu should search in the input" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Info /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:28" time="0.661" tests="4">
    <testcase classname="&lt;Info /&gt; Should render only one &quot;Choose Multipliers&quot; button" name="&lt;Info /&gt; Should render only one &quot;Choose Multipliers&quot; button" time="0.02">
    </testcase>
    <testcase classname="&lt;Info /&gt; Should call handleSelect when clicking on &quot;Choose Multipliers&quot; button" name="&lt;Info /&gt; Should call handleSelect when clicking on &quot;Choose Multipliers&quot; button" time="0.022">
    </testcase>
    <testcase classname="&lt;Info /&gt; Should render toggle buttons if TRADE_TYPES.VANILLA.CALL info page is open" name="&lt;Info /&gt; Should render toggle buttons if TRADE_TYPES.VANILLA.CALL info page is open" time="0.005">
    </testcase>
    <testcase classname="&lt;Info /&gt; Should render toggle buttons if TRADE_TYPES.MULTIPLIER info page is open" name="&lt;Info /&gt; Should render toggle buttons if TRADE_TYPES.MULTIPLIER info page is open" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractTypeGlossary /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:28" time="0.568" tests="7">
    <testcase classname="&lt;ContractTypeGlossary /&gt; Ensure accumulator glossary is rendered properly" name="&lt;ContractTypeGlossary /&gt; Ensure accumulator glossary is rendered properly" time="0.028">
    </testcase>
    <testcase classname="&lt;ContractTypeGlossary /&gt; Ensure vanilla glossary is rendered properly" name="&lt;ContractTypeGlossary /&gt; Ensure vanilla glossary is rendered properly" time="0.008">
    </testcase>
    <testcase classname="&lt;ContractTypeGlossary /&gt; Ensure turbos glossary is rendered properly" name="&lt;ContractTypeGlossary /&gt; Ensure turbos glossary is rendered properly" time="0.006">
    </testcase>
    <testcase classname="&lt;ContractTypeGlossary /&gt; Ensure TRADE_TYPES.MULTIPLIER glossary is rendered properly if it is TRADE_TYPES.MULTIPLIER synthetic" name="&lt;ContractTypeGlossary /&gt; Ensure TRADE_TYPES.MULTIPLIER glossary is rendered properly if it is TRADE_TYPES.MULTIPLIER synthetic" time="0.007">
    </testcase>
    <testcase classname="&lt;ContractTypeGlossary /&gt; Ensure TRADE_TYPES.MULTIPLIER glossary is rendered properly if it is multiplier_fx" name="&lt;ContractTypeGlossary /&gt; Ensure TRADE_TYPES.MULTIPLIER glossary is rendered properly if it is multiplier_fx" time="0.011">
    </testcase>
    <testcase classname="&lt;ContractTypeGlossary /&gt; Ensure TRADE_TYPES.MULTIPLIER glossary is rendered properly if it is major pairs  symbol and multiplier_fx" name="&lt;ContractTypeGlossary /&gt; Ensure TRADE_TYPES.MULTIPLIER glossary is rendered properly if it is major pairs  symbol and multiplier_fx" time="0.005">
    </testcase>
    <testcase classname="&lt;ContractTypeGlossary /&gt; Ensure placeholder text is rendered if category does not exist" name="&lt;ContractTypeGlossary /&gt; Ensure placeholder text is rendered if category does not exist" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ContractTypeItem Component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:28" time="0.543" tests="3">
    <testcase classname="ContractTypeItem Component should render the text" name="ContractTypeItem Component should render the text" time="0.02">
    </testcase>
    <testcase classname="ContractTypeItem Component should render multiple list items when we pass more than one item" name="ContractTypeItem Component should render multiple list items when we pass more than one item" time="0.01">
    </testcase>
    <testcase classname="ContractTypeItem Component should has &quot;contract-type-item--selected&quot; class when &quot;value === type.value&quot;" name="ContractTypeItem Component should has &quot;contract-type-item--selected&quot; class when &quot;value === type.value&quot;" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Header /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:28" time="0.646" tests="1">
    <testcase classname="&lt;Header /&gt; should render Icon and title" name="&lt;Header /&gt; should render Icon and title" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SearchInput /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:28" time="0.646" tests="4">
    <testcase classname="&lt;SearchInput /&gt; should render the search input element" name="&lt;SearchInput /&gt; should render the search input element" time="0.01">
    </testcase>
    <testcase classname="&lt;SearchInput /&gt; should not display trailing clear icon when input is empty" name="&lt;SearchInput /&gt; should not display trailing clear icon when input is empty" time="0.002">
    </testcase>
    <testcase classname="&lt;SearchInput /&gt; should display trailing clear icon when input is not empty" name="&lt;SearchInput /&gt; should display trailing clear icon when input is not empty" time="0.003">
    </testcase>
    <testcase classname="&lt;SearchInput /&gt; should render correct text when value is changed" name="&lt;SearchInput /&gt; should render correct text when value is changed" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Display /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:28" time="0.791" tests="4">
    <testcase classname="&lt;Display /&gt; should render contract type display container " name="&lt;Display /&gt; should render contract type display container " time="0.011">
    </testcase>
    <testcase classname="&lt;Display /&gt; should render IconTradeCategories, a Mocked Icon, and contract_type that matches text of mocked input value" name="&lt;Display /&gt; should render IconTradeCategories, a Mocked Icon, and contract_type that matches text of mocked input value" time="0.003">
    </testcase>
    <testcase classname="&lt;Display /&gt; should render contract_type that matches text of mocked input value" name="&lt;Display /&gt; should render contract_type that matches text of mocked input value" time="0.004">
    </testcase>
    <testcase classname="&lt;Display /&gt; should have contract-type-widget__display--clicked class when is_open is true" name="&lt;Display /&gt; should have contract-type-widget__display--clicked class when is_open is true" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="ContractTypeList Component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:28" time="0.663" tests="2">
    <testcase classname="ContractTypeList Component should render label text" name="ContractTypeList Component should render label text" time="0.011">
    </testcase>
    <testcase classname="ContractTypeList Component should render multiple list items when we pass more than one item" name="ContractTypeList Component should render multiple list items when we pass more than one item" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BottomWidgets /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.408" tests="1">
    <testcase classname="&lt;BottomWidgets /&gt; Should render mocked widget as a child" name="&lt;BottomWidgets /&gt; Should render mocked widget as a child" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradingTimePicker /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:28" time="0.613" tests="2">
    <testcase classname="&lt;TradingTimePicker /&gt; Should render Mocked Time Picker" name="&lt;TradingTimePicker /&gt; Should render Mocked Time Picker" time="0.015">
    </testcase>
    <testcase classname="&lt;TradingTimePicker /&gt; Should call onChange if expiry_time is outside of market opening times" name="&lt;TradingTimePicker /&gt; Should call onChange if expiry_time is outside of market opening times" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RecentTradeInfo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.803" tests="4">
    <testcase classname="&lt;RecentTradeInfo /&gt; Should render empty container if contract type is ACCU" name="&lt;RecentTradeInfo /&gt; Should render empty container if contract type is ACCU" time="0.009">
    </testcase>
    <testcase classname="&lt;RecentTradeInfo /&gt; Should render empty container if granularity is more than 0" name="&lt;RecentTradeInfo /&gt; Should render empty container if granularity is more than 0" time="0.003">
    </testcase>
    <testcase classname="&lt;RecentTradeInfo /&gt; Should render empty container after contract is ended" name="&lt;RecentTradeInfo /&gt; Should render empty container after contract is ended" time="0.002">
    </testcase>
    <testcase classname="&lt;RecentTradeInfo /&gt; Should render &quot;Tick 4/7&quot; contract type is digit contract" name="&lt;RecentTradeInfo /&gt; Should render &quot;Tick 4/7&quot; contract type is digit contract" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ToolBarWidgets /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.397" tests="2">
    <testcase classname="&lt;ToolBarWidgets /&gt; Should render only mocked chart mode when isDestop is false" name="&lt;ToolBarWidgets /&gt; Should render only mocked chart mode when isDestop is false" time="0.01">
    </testcase>
    <testcase classname="&lt;ToolBarWidgets /&gt; Should render all mocked widgets when isDestop is true" name="&lt;ToolBarWidgets /&gt; Should render all mocked widgets when isDestop is true" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ResetContractChartElements /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.459" tests="5">
    <testcase classname="&lt;ResetContractChartElements /&gt; should render 2 markers for Reset contract" name="&lt;ResetContractChartElements /&gt; should render 2 markers for Reset contract" time="0.01">
    </testcase>
    <testcase classname="&lt;ResetContractChartElements /&gt; should apply specific className for CONTRACT_TYPES.RESET.CALL" name="&lt;ResetContractChartElements /&gt; should apply specific className for CONTRACT_TYPES.RESET.CALL" time="0.002">
    </testcase>
    <testcase classname="&lt;ResetContractChartElements /&gt; should apply specific className for CONTRACT_TYPES.RESET.PUT" name="&lt;ResetContractChartElements /&gt; should apply specific className for CONTRACT_TYPES.RESET.PUT" time="0.009">
    </testcase>
    <testcase classname="&lt;ResetContractChartElements /&gt; for CONTRACT_TYPES.RESET.CALL, Y-axis coordinate should be the lowest barrier value among entry_spot and reset_barrier" name="&lt;ResetContractChartElements /&gt; for CONTRACT_TYPES.RESET.CALL, Y-axis coordinate should be the lowest barrier value among entry_spot and reset_barrier" time="0.001">
    </testcase>
    <testcase classname="&lt;ResetContractChartElements /&gt; for CONTRACT_TYPES.RESET.PUT, Y-axis coordinate should be the highest barrier value among entry_spot and reset_barrier" name="&lt;ResetContractChartElements /&gt; for CONTRACT_TYPES.RESET.PUT, Y-axis coordinate should be the highest barrier value among entry_spot and reset_barrier" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TopWidgets /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.559" tests="3">
    <testcase classname="&lt;TopWidgets /&gt; Should render info box and mocked chart title and should not render toast notification or recent trade info for Desktop" name="&lt;TopWidgets /&gt; Should render info box and mocked chart title and should not render toast notification or recent trade info for Desktop" time="0.009">
    </testcase>
    <testcase classname="&lt;TopWidgets /&gt; Should render only one mocked chart title and toast notification for Mobile" name="&lt;TopWidgets /&gt; Should render only one mocked chart title and toast notification for Mobile" time="0.005">
    </testcase>
    <testcase classname="&lt;TopWidgets /&gt; Should render mocked recent trade info for Mobile when digits widget is not active" name="&lt;TopWidgets /&gt; Should render mocked recent trade info for Mobile when digits widget is not active" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ControlWidgets /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.639" tests="1">
    <testcase classname="&lt;ControlWidgets /&gt; Should render all mocked widgets" name="&lt;ControlWidgets /&gt; Should render all mocked widgets" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="AccumulatorsProfitLossTooltip" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.551" tests="3">
    <testcase classname="AccumulatorsProfitLossTooltip should render AccumulatorsProfitLossText if contract is not sold" name="AccumulatorsProfitLossTooltip should render AccumulatorsProfitLossText if contract is not sold" time="0.008">
    </testcase>
    <testcase classname="AccumulatorsProfitLossTooltip should not render AccumulatorsProfitLossText if should_show_profit_text is false" name="AccumulatorsProfitLossTooltip should not render AccumulatorsProfitLossText if should_show_profit_text is false" time="0.002">
    </testcase>
    <testcase classname="AccumulatorsProfitLossTooltip should render AccumulatorsProfitLossTooltip when contract is sold" name="AccumulatorsProfitLossTooltip should render AccumulatorsProfitLossTooltip when contract is sold" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="AccumulatorsChartElements" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.371" tests="2">
    <testcase classname="AccumulatorsChartElements should render AccumulatorsChartElements without Spot-emphasizing ChartMarker" name="AccumulatorsChartElements should render AccumulatorsChartElements without Spot-emphasizing ChartMarker" time="0.008">
    </testcase>
    <testcase classname="AccumulatorsChartElements should render AccumulatorsChartElements with Spot-emphasizing ChartMarker when has_crossed_accu_barriers = true" name="AccumulatorsChartElements should render AccumulatorsChartElements with Spot-emphasizing ChartMarker when has_crossed_accu_barriers = true" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ChartMarker" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.312" tests="2">
    <testcase classname="ChartMarker should render correctly &amp; pass marker_content_props to the child with both coordinates" name="ChartMarker should render correctly &amp; pass marker_content_props to the child with both coordinates" time="0.018">
    </testcase>
    <testcase classname="ChartMarker should render correctly &amp; pass marker_content_props to the child when y coordinate is null" name="ChartMarker should render correctly &amp; pass marker_content_props to the child when y coordinate is null" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="AccumulatorsProfitLossText" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.62" tests="5">
    <testcase classname="AccumulatorsProfitLossText should render AccumulatorsProfitLossText" name="AccumulatorsProfitLossText should render AccumulatorsProfitLossText" time="0.014">
    </testcase>
    <testcase classname="AccumulatorsProfitLossText should render AccumulatorsProfitLossText with a value of &gt;= 1K correctly" name="AccumulatorsProfitLossText should render AccumulatorsProfitLossText with a value of &gt;= 1K correctly" time="0.002">
    </testcase>
    <testcase classname="AccumulatorsProfitLossText should render AccumulatorsProfitLossText with a profit percentage value" name="AccumulatorsProfitLossText should render AccumulatorsProfitLossText with a profit percentage value" time="0.01">
    </testcase>
    <testcase classname="AccumulatorsProfitLossText should render AccumulatorsProfitLossText with a profit percentage value of &gt;= 1K" name="AccumulatorsProfitLossText should render AccumulatorsProfitLossText with a profit percentage value of &gt;= 1K" time="0.003">
    </testcase>
    <testcase classname="AccumulatorsProfitLossText should render AccumulatorsProfitLossText with a negative profit percentage value" name="AccumulatorsProfitLossText should render AccumulatorsProfitLossText with a negative profit percentage value" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Page404" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:29" time="0.522" tests="1">
    <testcase classname="Page404 should render Page404" name="Page404 should render Page404" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="ContractError" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.292" tests="3">
    <testcase classname="ContractError should not render component if message is falsy" name="ContractError should not render component if message is falsy" time="0.01">
    </testcase>
    <testcase classname="ContractError should render component with specific text inside if it was passed as a message in the props" name="ContractError should render component with specific text inside if it was passed as a message in the props" time="0.003">
    </testcase>
    <testcase classname="ContractError should call the function if the icon was clicked" name="ContractError should call the function if the icon was clicked" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DigitsWidget /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.565" tests="4">
    <testcase classname="&lt;DigitsWidget /&gt; Should render mocked digits" name="&lt;DigitsWidget /&gt; Should render mocked digits" time="0.012">
    </testcase>
    <testcase classname="&lt;InfoBoxWidget /&gt; Should render mocked digits" name="&lt;InfoBoxWidget /&gt; Should render mocked digits" time="0.002">
    </testcase>
    <testcase classname="&lt;ChartTopWidgets&gt; Should render mocked ChartTopWidget" name="&lt;ChartTopWidgets&gt; Should render mocked ChartTopWidget" time="0.002">
    </testcase>
    <testcase classname="&lt;ChartBottomWidgets&gt; Should render mocked ChartBottomWidgets" name="&lt;ChartBottomWidgets&gt; Should render mocked ChartBottomWidgets" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Digits /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.624" tests="5">
    <testcase classname="&lt;Digits /&gt; should render &lt;LastDigitPrediction /&gt; with tooltip with text for desktop if is_trade_page === true" name="&lt;Digits /&gt; should render &lt;LastDigitPrediction /&gt; with tooltip with text for desktop if is_trade_page === true" time="0.033">
    </testcase>
    <testcase classname="&lt;Digits /&gt; should render &lt;LastDigitPrediction /&gt; without tooltip for desktop if is_trade_page === false" name="&lt;Digits /&gt; should render &lt;LastDigitPrediction /&gt; without tooltip for desktop if is_trade_page === false" time="0.002">
    </testcase>
    <testcase classname="&lt;Digits /&gt; should not render anything for desktop if digits_array and is_digit_contract are falsy" name="&lt;Digits /&gt; should not render anything for desktop if digits_array and is_digit_contract are falsy" time="0.006">
    </testcase>
    <testcase classname="&lt;Digits /&gt; should render tick information text, &lt;DigitSpot/&gt; and &lt;LastDigitPrediction /&gt; for mobile if is_trade_page === true" name="&lt;Digits /&gt; should render tick information text, &lt;DigitSpot/&gt; and &lt;LastDigitPrediction /&gt; for mobile if is_trade_page === true" time="0.011">
    </testcase>
    <testcase classname="&lt;Digits /&gt; onLastDigitSpot function call should set new properties in &lt;DigitSpot /&gt;" name="&lt;Digits /&gt; onLastDigitSpot function call should set new properties in &lt;DigitSpot /&gt;" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="TicksHistoryCounter" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.263" tests="3">
    <testcase classname="TicksHistoryCounter should render TicksHistoryCounter without dots and not highlighted" name="TicksHistoryCounter should render TicksHistoryCounter without dots and not highlighted" time="0.009">
    </testcase>
    <testcase classname="TicksHistoryCounter should render TicksHistoryCounter with dots and not highlighted" name="TicksHistoryCounter should render TicksHistoryCounter with dots and not highlighted" time="0.008">
    </testcase>
    <testcase classname="TicksHistoryCounter should render TicksHistoryCounter with dots and highlighted" name="TicksHistoryCounter should render TicksHistoryCounter with dots and highlighted" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="InfoBoxLongcode" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.609" tests="6">
    <testcase classname="InfoBoxLongcode should render InfoBoxLongcode component" name="InfoBoxLongcode should render InfoBoxLongcode component" time="0.016">
    </testcase>
    <testcase classname="InfoBoxLongcode should not render specific text if longcode is less then 150 symbols" name="InfoBoxLongcode should not render specific text if longcode is less then 150 symbols" time="0.002">
    </testcase>
    <testcase classname="InfoBoxLongcode should render specific text &quot;View more&quot; if longcode is more then 150 symbols" name="InfoBoxLongcode should render specific text &quot;View more&quot; if longcode is more then 150 symbols" time="0.004">
    </testcase>
    <testcase classname="InfoBoxLongcode should render specific text &quot;View less&quot; if longcode is more then 150 symbols and user click on expand button" name="InfoBoxLongcode should render specific text &quot;View less&quot; if longcode is more then 150 symbols and user click on expand button" time="0.018">
    </testcase>
    <testcase classname="InfoBoxLongcode should render specific text &quot;View more&quot; if longcode is more then 47 symbols for mobile" name="InfoBoxLongcode should render specific text &quot;View more&quot; if longcode is more then 47 symbols for mobile" time="0.003">
    </testcase>
    <testcase classname="InfoBoxLongcode should render modal if longcode is more then 47 symbols for mobile and user clicks on &quot;View more&quot; button" name="InfoBoxLongcode should render modal if longcode is more then 47 symbols for mobile and user clicks on &quot;View more&quot; button" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="InfoBox" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.51" tests="4">
    <testcase classname="InfoBox should not render the component if longcode field in contract_info is falsy" name="InfoBox should not render the component if longcode field in contract_info is falsy" time="0.006">
    </testcase>
    <testcase classname="InfoBox should render the component if longcode field in contract_info is not falsy" name="InfoBox should render the component if longcode field in contract_info is not falsy" time="0.013">
    </testcase>
    <testcase classname="InfoBox should render the proper text from longcode if contract_type and longcode fields are not falsy" name="InfoBox should render the proper text from longcode if contract_type and longcode fields are not falsy" time="0.004">
    </testcase>
    <testcase classname="InfoBox should render error_message text if contract_type, longcode and error_message fields are not falsy" name="InfoBox should render error_message text if contract_type, longcode and error_message fields are not falsy" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="AccumulatorsStatsManualModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.549" tests="2">
    <testcase classname="AccumulatorsStatsManualModal should open when info icon (IcInfoOutline) is clicked" name="AccumulatorsStatsManualModal should open when info icon (IcInfoOutline) is clicked" time="0.04">
    </testcase>
    <testcase classname="AccumulatorsStatsManualModal should close after close button (IcCross) is clicked in the modal" name="AccumulatorsStatsManualModal should close after close button (IcCross) is clicked in the modal" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LastDigitStat /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.294" tests="3">
    <testcase classname="&lt;LastDigitStat /&gt; should render progress_value circle if percentage is not null" name="&lt;LastDigitStat /&gt; should render progress_value circle if percentage is not null" time="0.015">
    </testcase>
    <testcase classname="&lt;LastDigitStat /&gt; should have --is-max and --is-min classnames if is_max and is_min are true" name="&lt;LastDigitStat /&gt; should have --is-max and --is-min classnames if is_max and is_min are true" time="0.002">
    </testcase>
    <testcase classname="&lt;LastDigitStat /&gt; should only render progress_bg circle if precentage is null" name="&lt;LastDigitStat /&gt; should only render progress_bg circle if precentage is null" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ExpandedTicksHistory" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.575" tests="2">
    <testcase classname="ExpandedTicksHistory should render values of all TicksHistoryCounters in rows" name="ExpandedTicksHistory should render values of all TicksHistoryCounters in rows" time="0.074">
    </testcase>
    <testcase classname="ExpandedTicksHistory should render the corrent number of TicksHistoryCounters" name="ExpandedTicksHistory should render the corrent number of TicksHistoryCounters" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="AccumulatorsStats" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.777" tests="7">
    <testcase classname="AccumulatorsStats should render as expandable" name="AccumulatorsStats should render as expandable" time="0.023">
    </testcase>
    <testcase classname="AccumulatorsStats should render as non-expandable" name="AccumulatorsStats should render as non-expandable" time="0.012">
    </testcase>
    <testcase classname="AccumulatorsStats should show manual after info icon is clicked" name="AccumulatorsStats should show manual after info icon is clicked" time="0.023">
    </testcase>
    <testcase classname="AccumulatorsStats should render partial history values (tick counters) when initially collapsed in desktop" name="AccumulatorsStats should render partial history values (tick counters) when initially collapsed in desktop" time="0.004">
    </testcase>
    <testcase classname="AccumulatorsStats should render partial history values (tick counters) when initially collapsed in mobile" name="AccumulatorsStats should render partial history values (tick counters) when initially collapsed in mobile" time="0.005">
    </testcase>
    <testcase classname="AccumulatorsStats should expand in desktop when accordion_toggle_arrow is clicked" name="AccumulatorsStats should expand in desktop when accordion_toggle_arrow is clicked" time="0.015">
    </testcase>
    <testcase classname="AccumulatorsStats should show MobileDialog with full &quot;Stay in history&quot; in mobile when accordion_toggle_arrow is clicked" name="AccumulatorsStats should show MobileDialog with full &quot;Stay in history&quot; in mobile when accordion_toggle_arrow is clicked" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Digit /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.304" tests="2">
    <testcase classname="&lt;Digit /&gt; should render value and percentage" name="&lt;Digit /&gt; should render value and percentage" time="0.014">
    </testcase>
    <testcase classname="&lt;Digit /&gt; should not render percentage when percentage is null" name="&lt;Digit /&gt; should not render percentage when percentage is null" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LastDigitPointer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:30" time="0.54" tests="1">
    <testcase classname="&lt;LastDigitPointer /&gt; should render Icon if position is defined" name="&lt;LastDigitPointer /&gt; should render Icon if position is defined" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LastDigitPrediction /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.462" tests="2">
    <testcase classname="&lt;LastDigitPrediction /&gt; should render 10 mockedDigitDisplay that represent numbers 0 - 9" name="&lt;LastDigitPrediction /&gt; should render 10 mockedDigitDisplay that represent numbers 0 - 9" time="0.05">
    </testcase>
    <testcase classname="&lt;LastDigitPrediction /&gt; should render last digit pointer" name="&lt;LastDigitPrediction /&gt; should render last digit pointer" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DigitDisplay /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.7" tests="2">
    <testcase classname="&lt;DigitDisplay /&gt; should render mockedLastDigitStat, mockedDigitSpot and mockedDigit" name="&lt;DigitDisplay /&gt; should render mockedLastDigitStat, mockedDigitSpot and mockedDigit" time="0.065">
    </testcase>
    <testcase classname="&lt;DigitDisplay /&gt; mockedLastDigitStat and mockedDigitSpot should have their respective classnames" name="&lt;DigitDisplay /&gt; mockedLastDigitStat and mockedDigitSpot should have their respective classnames" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DigitSpot /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.631" tests="3">
    <testcase classname="&lt;DigitSpot /&gt; should render current_spot value without the last digit " name="&lt;DigitSpot /&gt; should render current_spot value without the last digit " time="0.009">
    </testcase>
    <testcase classname="&lt;DigitSpot /&gt; should render last digit of current_spot" name="&lt;DigitSpot /&gt; should render last digit of current_spot" time="0.003">
    </testcase>
    <testcase classname="&lt;DigitSpot /&gt; should render empty elements" name="&lt;DigitSpot /&gt; should render empty elements" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Proposal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.511" tests="5">
    <testcase classname="Proposal getProposalInfo function should return 0 as profit when proposal has an error" name="Proposal getProposalInfo function should return 0 as profit when proposal has an error" time="0.002">
    </testcase>
    <testcase classname="Proposal getProposalInfo function should return profit and return calculated if proposal has no error" name="Proposal getProposalInfo function should return profit and return calculated if proposal has no error" time="0">
    </testcase>
    <testcase classname="Proposal createProposalRequests function should return the request containing trade type which is not already in the request" name="Proposal createProposalRequests function should return the request containing trade type which is not already in the request" time="0.001">
    </testcase>
    <testcase classname="Proposal createProposalRequests function should return the request as before if all trade types already exist in the request" name="Proposal createProposalRequests function should return the request as before if all trade types already exist in the request" time="0">
    </testcase>
    <testcase classname="Proposal createProposalRequests function should return an empty object if there is no trade type" name="Proposal createProposalRequests function should return an empty object if there is no trade type" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isCancellationExpired" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.358" tests="4">
    <testcase classname="isCancellationExpired Should return true if server_time is bigger than date_expiry" name="isCancellationExpired Should return true if server_time is bigger than date_expiry" time="0.002">
    </testcase>
    <testcase classname="isCancellationExpired Should return false if server_time is smaller than date_expiry" name="isCancellationExpired Should return false if server_time is smaller than date_expiry" time="0">
    </testcase>
    <testcase classname="isCancellationExpired Should return false if date_expiry is undefined" name="isCancellationExpired Should return false if date_expiry is undefined" time="0">
    </testcase>
    <testcase classname="isCancellationExpired Should return false if cancelllation is an empty object" name="isCancellationExpired Should return false if cancelllation is an empty object" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isRiseFallEqual" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.512" tests="7">
    <testcase classname="isRiseFallEqual Regex should return true if contract_type is rise_fall" name="isRiseFallEqual Regex should return true if contract_type is rise_fall" time="0.001">
    </testcase>
    <testcase classname="isRiseFallEqual Regex should return false if contract_type is not rise_fall" name="isRiseFallEqual Regex should return false if contract_type is not rise_fall" time="0">
    </testcase>
    <testcase classname="hasCallPutEqual should return true when contract_types_list includes rise_fall_equal as value" name="hasCallPutEqual should return true when contract_types_list includes rise_fall_equal as value" time="0.001">
    </testcase>
    <testcase classname="hasCallPutEqual should return false when contract_types_list does not includes rise_fall_equal as value" name="hasCallPutEqual should return false when contract_types_list does not includes rise_fall_equal as value" time="0.004">
    </testcase>
    <testcase classname="hasCallPutEqual should return false if contract_types_list is an empty object" name="hasCallPutEqual should return false if contract_types_list is an empty object" time="0">
    </testcase>
    <testcase classname="hasDurationForCallPutEqual Should return true if contract_types_list has rise_fall_equal and mock has its duration values" name="hasDurationForCallPutEqual Should return true if contract_types_list has rise_fall_equal and mock has its duration values" time="0.001">
    </testcase>
    <testcase classname="hasDurationForCallPutEqual should return false if contract_types_list does not have rise_fall_equal" name="hasDurationForCallPutEqual should return false if contract_types_list does not have rise_fall_equal" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getSelectedTime" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.275" tests="5">
    <testcase classname="getSelectedTime returns the closest time in a 5-minute interval when selected time is within market open and close times" name="getSelectedTime returns the closest time in a 5-minute interval when selected time is within market open and close times" time="0.002">
    </testcase>
    <testcase classname="getSelectedTime returns the closest time in a 5-minute interval when selected time not in between market open and close times" name="getSelectedTime returns the closest time in a 5-minute interval when selected time not in between market open and close times" time="0.001">
    </testcase>
    <testcase classname="getSelectedTime returns the closest time opening time in a 5-minute interval when market_opening time is after server_time" name="getSelectedTime returns the closest time opening time in a 5-minute interval when market_opening time is after server_time" time="0">
    </testcase>
    <testcase classname="getBoundaries returns correct boundaries when server_time is before market_open_times" name="getBoundaries returns correct boundaries when server_time is before market_open_times" time="0.006">
    </testcase>
    <testcase classname="getBoundaries returns correct boundaries when start boundaries length is greater than 0" name="getBoundaries returns correct boundaries when start boundaries length is greater than 0" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="requestPreviewProposal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.604" tests="2">
    <testcase classname="requestPreviewProposal calls createProposalRequests and WS.subscribeProposal when requests are not empty" name="requestPreviewProposal calls createProposalRequests and WS.subscribeProposal when requests are not empty" time="0.002">
    </testcase>
    <testcase classname="requestPreviewProposal should handle response and call onProposalResponse " name="requestPreviewProposal should handle response and call onProposalResponse " time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="onChangeCancellationDuration" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.246" tests="3">
    <testcase classname="onChangeCancellationDuration should call onChangeMultiple with the correct cancellation duration value" name="onChangeCancellationDuration should call onChangeMultiple with the correct cancellation duration value" time="0.001">
    </testcase>
    <testcase classname="onToggleCancellation should toggle cancellation and reset cancellation price if unchecked" name="onToggleCancellation should toggle cancellation and reset cancellation price if unchecked" time="0.001">
    </testcase>
    <testcase classname="onToggleCancellation should toggle cancellation and reset cancellation price if checked again" name="onToggleCancellation should toggle cancellation and reset cancellation price if checked again" time="0">
    </testcase>
  </testsuite>
  <testsuite name="buildCurrenciesList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.327" tests="3">
    <testcase classname="buildCurrenciesList It Returns the desired currencies" name="buildCurrenciesList It Returns the desired currencies" time="0.003">
    </testcase>
    <testcase classname="buildCurrenciesList Returns correct default currency when currency is passed" name="buildCurrenciesList Returns correct default currency when currency is passed" time="0">
    </testcase>
    <testcase classname="buildCurrenciesList Returns first currency in currencies list when currency is not passed" name="buildCurrenciesList Returns first currency in currencies list when currency is not passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isSessionAvailable" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.321" tests="5">
    <testcase classname="isSessionAvailable should return true if sessions are empty" name="isSessionAvailable should return true if sessions are empty" time="0.001">
    </testcase>
    <testcase classname="isSessionAvailable should return false if session is not empty" name="isSessionAvailable should return false if session is not empty" time="0.002">
    </testcase>
    <testcase classname="isSessionAvailable should return false if compare moment is before current time" name="isSessionAvailable should return false if compare moment is before current time" time="0.001">
    </testcase>
    <testcase classname="isSessionAvailable should return false if compare moment is after session close time" name="isSessionAvailable should return false if compare moment is after session close time" time="0">
    </testcase>
    <testcase classname="isSessionAvailable should returns true when sessions are not empty and within range" name="isSessionAvailable should returns true when sessions are not empty and within range" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getLimitOrder" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:31" time="0.328" tests="6">
    <testcase classname="getLimitOrder should return correct limit order when values change" name="getLimitOrder should return correct limit order when values change" time="0.007">
    </testcase>
    <testcase classname="getLimitOrder should return empty object when values remain unchanged" name="getLimitOrder should return empty object when values remain unchanged" time="0.001">
    </testcase>
    <testcase classname="setLimitOrderBarriers should remove barriers when limit_order is empty but is_over is true and limit order barriers are supported" name="setLimitOrderBarriers should remove barriers when limit_order is empty but is_over is true and limit order barriers are supported" time="0.002">
    </testcase>
    <testcase classname="setLimitOrderBarriers should update barriers with changed obj_limit_order values" name="setLimitOrderBarriers should update barriers with changed obj_limit_order values" time="0.002">
    </testcase>
    <testcase classname="setLimitOrderBarriers should create and add a new barrier if conditions are met" name="setLimitOrderBarriers should create and add a new barrier if conditions are met" time="0.005">
    </testcase>
    <testcase classname="setLimitOrderBarriers should remove barriers when is_over is true and limit order barriers are not supported" name="setLimitOrderBarriers should remove barriers when is_over is true and limit order barriers are not supported" time="0">
    </testcase>
  </testsuite>
  <testsuite name="processTradeParams" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.443" tests="1">
    <testcase classname="processTradeParams updates the trade parameters correctly" name="processTradeParams updates the trade parameters correctly" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="getUpdatedTicksHistoryStats" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.238" tests="6">
    <testcase classname="getUpdatedTicksHistoryStats returns a ticks_history_stats with reversed ticks_stayed_in when new_ticks_history_stats.length &gt; 1" name="getUpdatedTicksHistoryStats returns a ticks_history_stats with reversed ticks_stayed_in when new_ticks_history_stats.length &gt; 1" time="0.007">
    </testcase>
    <testcase classname="getUpdatedTicksHistoryStats returns the same ticks_history_stats when new_ticks_history_stats is undefined" name="getUpdatedTicksHistoryStats returns the same ticks_history_stats when new_ticks_history_stats is undefined" time="0">
    </testcase>
    <testcase classname="getUpdatedTicksHistoryStats returns the same ticks_history_stats when new_ticks_history_stats contains the same single value of the current counter" name="getUpdatedTicksHistoryStats returns the same ticks_history_stats when new_ticks_history_stats contains the same single value of the current counter" time="0.001">
    </testcase>
    <testcase classname="getUpdatedTicksHistoryStats returns a new ticks_history_stats with 1st item in ticks_stayed_in replaced with a current counter new value" name="getUpdatedTicksHistoryStats returns a new ticks_history_stats with 1st item in ticks_stayed_in replaced with a current counter new value" time="0">
    </testcase>
    <testcase classname="getUpdatedTicksHistoryStats returns a new ticks_history_stats with a shifted ticks_stayed_in array of the same length &amp; with new_ticks_history_stats[0] placed as 1st item when its a counter_value &lt; previous counter_value &amp; an epoch &gt; a previous epoch" name="getUpdatedTicksHistoryStats returns a new ticks_history_stats with a shifted ticks_stayed_in array of the same length &amp; with new_ticks_history_stats[0] placed as 1st item when its a counter_value &lt; previous counter_value &amp; an epoch &gt; a previous epoch" time="0.001">
    </testcase>
    <testcase classname="getUpdatedTicksHistoryStats returns a new ticks_history_stats with a shifted ticks_stayed_in array of the same length &amp; with new_ticks_history_stats[0] placed as 1st item when counter value === previous counter_value &amp; an epoch &gt; previous epoch" name="getUpdatedTicksHistoryStats returns a new ticks_history_stats with a shifted ticks_stayed_in array of the same length &amp; with new_ticks_history_stats[0] placed as 1st item when counter value === previous counter_value &amp; an epoch &gt; previous epoch" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getChartAnalyticsData" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.288" tests="16">
    <testcase classname="getChartAnalyticsData should return empty object if args are empty" name="getChartAnalyticsData should return empty object if args are empty" time="0.002">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.CHART_MODE_TOGGLE" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.CHART_MODE_TOGGLE" time="0.002">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.CHART_TYPE_CHANGE" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.CHART_TYPE_CHANGE" time="0.001">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.CHART_INTERVAL_CHANGE" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.CHART_INTERVAL_CHANGE" time="0.008">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATOR_DELETED" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATOR_DELETED" time="0.001">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATOR_SETTINGS_OPEN" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATOR_SETTINGS_OPEN" time="0.001">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATOR_INFO_TOGGLE" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATOR_INFO_TOGGLE" time="0.001">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATORS_MODAL_TOGGLE" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATORS_MODAL_TOGGLE" time="0.001">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATOR_ADDED" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATOR_ADDED" time="0.001">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATORS_CLEAR_ALL" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATORS_CLEAR_ALL" time="0">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATOR_SEARCH" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.INDICATOR_SEARCH" time="0.001">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.MARKET_SEARCH" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.MARKET_SEARCH" time="0">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.MARKETS_LIST_TOGGLE" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.MARKETS_LIST_TOGGLE" time="0.001">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.SYMBOL_CHANGE" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.SYMBOL_CHANGE" time="0">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.MARKET_INFO_REDIRECT" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.MARKET_INFO_REDIRECT" time="0.005">
    </testcase>
    <testcase classname="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.FAVORITE_MARKETS_TOGGLE" name="getChartAnalyticsData should return correct object with data and event_type for STATE_TYPES.FAVORITE_MARKETS_TOGGLE" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getHoveredColor" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.345" tests="3">
    <testcase classname="getHoveredColor should return red color (#ec3f3f) if passed value is TRADE_TYPES.TURBOS.SHORT" name="getHoveredColor should return red color (#ec3f3f) if passed value is TRADE_TYPES.TURBOS.SHORT" time="0.001">
    </testcase>
    <testcase classname="getHoveredColor should return green color (#4bb4b3) if passed value is TRADE_TYPES.TURBOS.LONG" name="getHoveredColor should return green color (#4bb4b3) if passed value is TRADE_TYPES.TURBOS.LONG" time="0.001">
    </testcase>
    <testcase classname="getHoveredColor should return blue color (#377cfc) if passed value not TRADE_TYPES.TURBOS.LONG or TRADE_TYPES.TURBOS.SHORT" name="getHoveredColor should return blue color (#377cfc) if passed value not TRADE_TYPES.TURBOS.LONG or TRADE_TYPES.TURBOS.SHORT" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ContractType.getBarriers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.706" tests="30">
    <testcase classname="ContractType.getBarriers should return barriers based on contract type and expiry type" name="ContractType.getBarriers should return barriers based on contract type and expiry type" time="0.01">
    </testcase>
    <testcase classname="ContractType.getContractType should return contract_type object from contract_type specified from the input" name="ContractType.getContractType should return contract_type object from contract_type specified from the input" time="0.01">
    </testcase>
    <testcase classname="ContractType.getContractValues should return empty object if contract_type is null" name="ContractType.getContractValues should return empty object if contract_type is null" time="0.001">
    </testcase>
    <testcase classname="ContractType.getContractValues given available contract types according to symbol should return object of contract values" name="ContractType.getContractValues given available contract types according to symbol should return object of contract values" time="0.013">
    </testcase>
    <testcase classname="ContractType.getDurationMinMax should return an empty object if contract_expiry_type is given" name="ContractType.getDurationMinMax should return an empty object if contract_expiry_type is given" time="0.009">
    </testcase>
    <testcase classname="ContractType.getDurationMinMax should return if contract_expiry_type is not given" name="ContractType.getDurationMinMax should return if contract_expiry_type is not given" time="0.008">
    </testcase>
    <testcase classname="ContractType.getDurationUnit should return correct duration_unit given the input" name="ContractType.getDurationUnit should return correct duration_unit given the input" time="0.007">
    </testcase>
    <testcase classname="ContractType.getDurationUnitsList should return correct duration_unit_list given the input" name="ContractType.getDurationUnitsList should return correct duration_unit_list given the input" time="0.009">
    </testcase>
    <testcase classname="ContractType.getFullContractTypes should return available_contract_types" name="ContractType.getFullContractTypes should return available_contract_types" time="0.013">
    </testcase>
    <testcase classname="ContractType.getExpiryDate returns proper expiry date for endtime expiry type with intraday duration units" name="ContractType.getExpiryDate returns proper expiry date for endtime expiry type with intraday duration units" time="0.003">
    </testcase>
    <testcase classname="ContractType.getExpiryDate returns proper expiry date for endtime expiry type without intraday duration units" name="ContractType.getExpiryDate returns proper expiry date for endtime expiry type without intraday duration units" time="0.001">
    </testcase>
    <testcase classname="ContractType.getExpiryDate returns null for non-endtime expiry types" name="ContractType.getExpiryDate returns null for non-endtime expiry types" time="0.001">
    </testcase>
    <testcase classname="ContractType.getExpiryTime should return null if expiry_type is not endtime" name="ContractType.getExpiryTime should return null if expiry_type is not endtime" time="0.001">
    </testcase>
    <testcase classname="ContractType.getExpiryTime end_time should be first item in market_close_times array return null if its not undefined" name="ContractType.getExpiryTime end_time should be first item in market_close_times array return null if its not undefined" time="0.001">
    </testcase>
    <testcase classname="ContractType.getExpiryTime should return expiry_time to be 23:55" name="ContractType.getExpiryTime should return expiry_time to be 23:55" time="0.048">
    </testcase>
    <testcase classname="ContractType.getExpiryType should return duration as expiry type if expiry_type is null and duration_units_list.length &gt; 0" name="ContractType.getExpiryType should return duration as expiry type if expiry_type is null and duration_units_list.length &gt; 0" time="0.005">
    </testcase>
    <testcase classname="ContractType.getExpiryType should return duration as expiry type if duration_units_list.length is 1 and value is t" name="ContractType.getExpiryType should return duration as expiry type if duration_units_list.length is 1 and value is t" time="0.012">
    </testcase>
    <testcase classname="ContractType.getExpiryType should return expiry_type null from input if duration_units_list is empty" name="ContractType.getExpiryType should return expiry_type null from input if duration_units_list is empty" time="0.005">
    </testcase>
    <testcase classname="ContractType.getSessions should return if array of sessions object if contract has forward_starting_options" name="ContractType.getSessions should return if array of sessions object if contract has forward_starting_options" time="0.014">
    </testcase>
    <testcase classname="ContractType.getSessions should return undefined if contract does not have forward_starting_options" name="ContractType.getSessions should return undefined if contract does not have forward_starting_options" time="0.007">
    </testcase>
    <testcase classname="ContractType.getStartTime should return start_time if start_date is valid number" name="ContractType.getStartTime should return start_time if start_date is valid number" time="0.023">
    </testcase>
    <testcase classname="ContractType.getStartTime should return start_time null if start_date is 0" name="ContractType.getStartTime should return start_time null if start_date is 0" time="0.002">
    </testcase>
    <testcase classname="ContractType.getStartType should return spot if start_date 0" name="ContractType.getStartType should return spot if start_date 0" time="0.001">
    </testcase>
    <testcase classname="ContractType.getStartType should return forward if start_date is not 0" name="ContractType.getStartType should return forward if start_date is not 0" time="0.004">
    </testcase>
    <testcase classname="ContractType.getTradingEvents return empty array if date is empty" name="ContractType.getTradingEvents return empty array if date is empty" time="0.004">
    </testcase>
    <testcase classname="ContractType.getTradingEvents return proper arrays of dates and description if date is not empty" name="ContractType.getTradingEvents return proper arrays of dates and description if date is not empty" time="0.003">
    </testcase>
    <testcase classname="ContractType.getTradingTimes return empty object if date is empty" name="ContractType.getTradingTimes return empty object if date is empty" time="0.001">
    </testcase>
    <testcase classname="ContractType.getTradingTimes return proper array trading times for specific symbol if date and underlying are not empty" name="ContractType.getTradingTimes return proper array trading times for specific symbol if date and underlying are not empty" time="0.002">
    </testcase>
    <testcase classname="ContractType.getTradingTimes return array trading times for all symbols if underlying is empty" name="ContractType.getTradingTimes return array trading times for all symbols if underlying is empty" time="0.001">
    </testcase>
    <testcase classname="ContractType.getContractCategories Should return non empty result object" name="ContractType.getContractCategories Should return non empty result object" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="getMultiplierValidationRules" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.443" tests="10">
    <testcase classname="getMultiplierValidationRules should contain rules for stop_loss" name="getMultiplierValidationRules should contain rules for stop_loss" time="0.002">
    </testcase>
    <testcase classname="getMultiplierValidationRules should contain rules for take_profit" name="getMultiplierValidationRules should contain rules for take_profit" time="0.002">
    </testcase>
    <testcase classname="getValidationRules should contain rules for amount" name="getValidationRules should contain rules for amount" time="0.001">
    </testcase>
    <testcase classname="getValidationRules should contain rules for barrier_1" name="getValidationRules should contain rules for barrier_1" time="0.019">
    </testcase>
    <testcase classname="getValidationRules should contain rules for barrier_2" name="getValidationRules should contain rules for barrier_2" time="0.002">
    </testcase>
    <testcase classname="getValidationRules should contain rules for duration" name="getValidationRules should contain rules for duration" time="0.001">
    </testcase>
    <testcase classname="getValidationRules should contain rules for start_date" name="getValidationRules should contain rules for start_date" time="0.001">
    </testcase>
    <testcase classname="getValidationRules should contain rules for expiry_date" name="getValidationRules should contain rules for expiry_date" time="0">
    </testcase>
    <testcase classname="getValidationRules should contain rules for start_time" name="getValidationRules should contain rules for start_time" time="0.003">
    </testcase>
    <testcase classname="getValidationRules should contain rules for expiry_time" name="getValidationRules should contain rules for expiry_time" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="Barriers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.343" tests="7">
    <testcase classname="Barriers barriersToString should convert non-zero barriers which do not have +/- to string consisting of them without +/- while is_relative is false" name="Barriers barriersToString should convert non-zero barriers which do not have +/- to string consisting of them without +/- while is_relative is false" time="0.003">
    </testcase>
    <testcase classname="Barriers barriersToString should convert values without +/- and zero to string consisting of them without +/- while is_relative is false" name="Barriers barriersToString should convert values without +/- and zero to string consisting of them without +/- while is_relative is false" time="0">
    </testcase>
    <testcase classname="Barriers barriersToString should convert barriers which have +/- to string consisting of them without +/- while is_relative is false" name="Barriers barriersToString should convert barriers which have +/- to string consisting of them without +/- while is_relative is false" time="0.001">
    </testcase>
    <testcase classname="Barriers barriersToString should convert barriers which have +/- to string consisting of them with +/- while is_relative is true" name="Barriers barriersToString should convert barriers which have +/- to string consisting of them with +/- while is_relative is true" time="0">
    </testcase>
    <testcase classname="Barriers removeBarrier should remove the barrier with a specified key from initial barriers array" name="Barriers removeBarrier should remove the barrier with a specified key from initial barriers array" time="0.001">
    </testcase>
    <testcase classname="Barriers removeBarrier should not remove any barriers if the key is not found" name="Barriers removeBarrier should not remove any barriers if the key is not found" time="0">
    </testcase>
    <testcase classname="Barriers removeBarrier should not modify the barriers array if it is empty" name="Barriers removeBarrier should not modify the barriers array if it is empty" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Loading" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.383" tests="2">
    <testcase classname="Loading should render a Loading component" name="Loading should render a Loading component" time="0.011">
    </testcase>
    <testcase classname="Loading should render a Loading component with proper class if the theme was passed" name="Loading should render a Loading component with proper class if the theme was passed" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PopulateHeader /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.488" tests="1">
    <testcase classname="&lt;PopulateHeader /&gt; Should render mocked toggle positions mobile" name="&lt;PopulateHeader /&gt; Should render mocked toggle positions mobile" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradeSettingsExtensions/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.744" tests="1">
    <testcase classname="&lt;TradeSettingsExtensions/&gt; should not render anything, but call populateSettingsExtensions" name="&lt;TradeSettingsExtensions/&gt; should not render anything, but call populateSettingsExtensions" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradeFooterExtensions&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.673" tests="3">
    <testcase classname="&lt;TradeFooterExtensions&gt; should call populateFooterExtensions with position left when is_logged_in is true and current pathname is same as routes.trade" name="&lt;TradeFooterExtensions&gt; should call populateFooterExtensions with position left when is_logged_in is true and current pathname is same as routes.trade" time="0.016">
    </testcase>
    <testcase classname="&lt;TradeFooterExtensions&gt; should call populateFooterExtensions with empty array when is_logged_in is false" name="&lt;TradeFooterExtensions&gt; should call populateFooterExtensions with empty array when is_logged_in is false" time="0.005">
    </testcase>
    <testcase classname="&lt;TradeFooterExtensions&gt; should call populateFooterExtensions with empty array when pathname is not trader" name="&lt;TradeFooterExtensions&gt; should call populateFooterExtensions with empty array when pathname is not trader" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ChartSettings/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.646" tests="2">
    <testcase classname="&lt;ChartSettings/&gt; should render component with media heading and checkbox with label" name="&lt;ChartSettings/&gt; should render component with media heading and checkbox with label" time="0.027">
    </testcase>
    <testcase classname="&lt;ChartSettings/&gt; should call setChartCountdown function if user checked checkbox" name="&lt;ChartSettings/&gt; should call setChartCountdown function if user checked checkbox" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="TradeModals" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.702" tests="7">
    <testcase classname="TradeModals should render modal" name="TradeModals should render modal" time="0.015">
    </testcase>
    <testcase classname="TradeModals should call function unsupportedContractOnConfirm if button onConfirm in UnsupportedContractModal component was clicked" name="TradeModals should call function unsupportedContractOnConfirm if button onConfirm in UnsupportedContractModal component was clicked" time="0.018">
    </testcase>
    <testcase classname="TradeModals should call function unsupportedContractOnClose if button onClose in UnsupportedContractModal component was clicked" name="TradeModals should call function unsupportedContractOnClose if button onClose in UnsupportedContractModal component was clicked" time="0.006">
    </testcase>
    <testcase classname="TradeModals should call function marketUnavailableOnConfirm if button onConfirm in MarketUnavailableModal component was clicked" name="TradeModals should call function marketUnavailableOnConfirm if button onConfirm in MarketUnavailableModal component was clicked" time="0.006">
    </testcase>
    <testcase classname="TradeModals should call function marketUnavailableOnCancel if button onCancel in MarketUnavailableModal component was clicked" name="TradeModals should call function marketUnavailableOnCancel if button onCancel in MarketUnavailableModal component was clicked" time="0.01">
    </testcase>
    <testcase classname="TradeModals should call function servicesErrorModalOnConfirm if button onConfirm in ServicesErrorModal component was clicked" name="TradeModals should call function servicesErrorModalOnConfirm if button onConfirm in ServicesErrorModal component was clicked" time="0.011">
    </testcase>
    <testcase classname="TradeModals should call function servicesErrorModalOnConfirm and clearPurchaseInfo and requestProposal if button onConfirm in ServicesErrorModal component was clicked and type of services_error is equal to buy" name="TradeModals should call function servicesErrorModalOnConfirm and clearPurchaseInfo and requestProposal if button onConfirm in ServicesErrorModal component was clicked and type of services_error is equal to buy" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradeHeaderExtensions /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:32" time="0.849" tests="2">
    <testcase classname="&lt;TradeHeaderExtensions /&gt; populateHeaderExtensions should not be called with null if show_component is true" name="&lt;TradeHeaderExtensions /&gt; populateHeaderExtensions should not be called with null if show_component is true" time="0.013">
    </testcase>
    <testcase classname="&lt;TradeHeaderExtensions /&gt; populateHeaderExtensions should be called with null if is_logged_in is false" name="&lt;TradeHeaderExtensions /&gt; populateHeaderExtensions should be called with null if is_logged_in is false" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="RouteWithSubRoutes component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:33" time="0.595" tests="2">
    <testcase classname="RouteWithSubRoutes component should render the &quot;RouteWithSubRoutes&quot; component" name="RouteWithSubRoutes component should render the &quot;RouteWithSubRoutes&quot; component" time="0.016">
    </testcase>
    <testcase classname="RouteWithSubRoutes component should render properties" name="RouteWithSubRoutes component should render properties" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="MediaHeading" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:33" time="0.27" tests="1">
    <testcase classname="MediaHeading should render children inside of proper MediaHeading div container with className" name="MediaHeading should render children inside of proper MediaHeading div container with className" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="MediaIcon" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:33" time="0.282" tests="2">
    <testcase classname="MediaIcon should render MediaIcon component with enabled SVG if is_enabled === true" name="MediaIcon should render MediaIcon component with enabled SVG if is_enabled === true" time="0.007">
    </testcase>
    <testcase classname="MediaIcon should render MediaIcon component with disabled SVG if is_enabled === false" name="MediaIcon should render MediaIcon component with disabled SVG if is_enabled === false" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="MediaDescription" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:33" time="0.28" tests="1">
    <testcase classname="MediaDescription should render children inside of proper MediaDescription div container with className" name="MediaDescription should render children inside of proper MediaDescription div container with className" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="BinaryLink component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:33" time="0.736" tests="4">
    <testcase classname="BinaryLink component should render &quot;children&quot; when passed in" name="BinaryLink component should render &quot;children&quot; when passed in" time="0.013">
    </testcase>
    <testcase classname="BinaryLink component should have &quot;active_class&quot; when passed in" name="BinaryLink component should have &quot;active_class&quot; when passed in" time="0.003">
    </testcase>
    <testcase classname="BinaryLink component should render &quot;NavLink&quot; when &quot;to&quot; property is passed" name="BinaryLink component should render &quot;NavLink&quot; when &quot;to&quot; property is passed" time="0.003">
    </testcase>
    <testcase classname="BinaryLink component should render &quot;a&quot; element whe property &quot;to&quot; is not passed" name="BinaryLink component should render &quot;a&quot; element whe property &quot;to&quot; is not passed" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Helpers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:33" time="0.634" tests="12">
    <testcase classname="Helpers normalizePath should return / as if path is empty" name="Helpers normalizePath should return / as if path is empty" time="0.001">
    </testcase>
    <testcase classname="Helpers normalizePath should return / + path as if path does not have /" name="Helpers normalizePath should return / + path as if path does not have /" time="0.001">
    </testcase>
    <testcase classname="Helpers normalizePath should return / + path as if path does have /" name="Helpers normalizePath should return / + path as if path does have /" time="0">
    </testcase>
    <testcase classname="Helpers findRouteByPath should return undefined when path is not in routes_config" name="Helpers findRouteByPath should return undefined when path is not in routes_config" time="0.001">
    </testcase>
    <testcase classname="Helpers findRouteByPath should return route_info when path is in routes_config and is not nested" name="Helpers findRouteByPath should return route_info when path is in routes_config and is not nested" time="0.001">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return true if route needs user to be authenticated and user is logged in" name="Helpers isRouteVisible should return true if route needs user to be authenticated and user is logged in" time="0.001">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return false if route needs user to be authenticated and user is not logged in" name="Helpers isRouteVisible should return false if route needs user to be authenticated and user is not logged in" time="0">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is not logged in" name="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is not logged in" time="0">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is logged in" name="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is logged in" time="0">
    </testcase>
    <testcase classname="Helpers getPath should return param values in params as a part of path" name="Helpers getPath should return param values in params as a part of path" time="0">
    </testcase>
    <testcase classname="Helpers getPath should return path as before if there is no params" name="Helpers getPath should return path as before if there is no params" time="0">
    </testcase>
    <testcase classname="Helpers getContractPath should return the path of contract with contract_id passed" name="Helpers getContractPath should return the path of contract with contract_id passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="MediaItem" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:33" time="0.382" tests="1">
    <testcase classname="MediaItem should render children inside of proper MediaItem div container with className" name="MediaItem should render children inside of proper MediaItem div container with className" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SwipeableContractAudit /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:33" time="0.511" tests="3">
    <testcase classname="&lt;SwipeableContractAudit /&gt; should render passed children" name="&lt;SwipeableContractAudit /&gt; should render passed children" time="0.01">
    </testcase>
    <testcase classname="&lt;SwipeableContractAudit /&gt; should not render anything if id in modal is different from dt_contract_drawer_audit" name="&lt;SwipeableContractAudit /&gt; should not render anything if id in modal is different from dt_contract_drawer_audit" time="0.001">
    </testcase>
    <testcase classname="&lt;SwipeableContractDrawer /&gt; should render passed children" name="&lt;SwipeableContractDrawer /&gt; should render passed children" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MarketClosedContractOverlay /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:33" time="0.576" tests="1">
    <testcase classname="&lt;MarketClosedContractOverlay /&gt; should render passed validation_error" name="&lt;MarketClosedContractOverlay /&gt; should render passed validation_error" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LaunchModalButton /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:34" time="0.549" tests="3">
    <testcase classname="&lt;LaunchModalButton /&gt; should render LaunchModalButton" name="&lt;LaunchModalButton /&gt; should render LaunchModalButton" time="0.011">
    </testcase>
    <testcase classname="&lt;LaunchModalButton /&gt; should call only handleOpen function if user click on OK button" name="&lt;LaunchModalButton /&gt; should call only handleOpen function if user click on OK button" time="0.028">
    </testcase>
    <testcase classname="&lt;LaunchModalButton /&gt; should call both handleOpen and setShowDescription function if user click on Learn more button" name="&lt;LaunchModalButton /&gt; should call both handleOpen and setShowDescription function if user click on Learn more button" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractDrawer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:33" time="0.818" tests="6">
    <testcase classname="&lt;ContractDrawer /&gt; should not render component if there is no contract_info" name="&lt;ContractDrawer /&gt; should not render component if there is no contract_info" time="0.019">
    </testcase>
    <testcase classname="&lt;ContractDrawer /&gt; should render PositionsCardLoader component if  contract_info.status || contract_info.is_expired are falsy" name="&lt;ContractDrawer /&gt; should render PositionsCardLoader component if  contract_info.status || contract_info.is_expired are falsy" time="0.009">
    </testcase>
    <testcase classname="&lt;ContractDrawer /&gt; should render component with Contract Drawer card and Contract Audit" name="&lt;ContractDrawer /&gt; should render component with Contract Drawer card and Contract Audit" time="0.004">
    </testcase>
    <testcase classname="&lt;ContractDrawer /&gt; should render only Contract Drawer card by default on mobile" name="&lt;ContractDrawer /&gt; should render only Contract Drawer card by default on mobile" time="0.008">
    </testcase>
    <testcase classname="&lt;ContractDrawer /&gt; should render contract_audit if user click on Contract Drawer card on mobile" name="&lt;ContractDrawer /&gt; should render contract_audit if user click on Contract Drawer card on mobile" time="0.026">
    </testcase>
    <testcase classname="&lt;ContractDrawer /&gt; contract_audit appeared and then be hidden if user swiped up and then swiped down on mobile" name="&lt;ContractDrawer /&gt; contract_audit appeared and then be hidden if user swiped up and then swiped down on mobile" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="EmptyPortfolioMessage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:34" time="0.611" tests="2">
    <testcase classname="EmptyPortfolioMessage should render error text on the screen if EmptyPortfolioMessage component will recive error in props" name="EmptyPortfolioMessage should render error text on the screen if EmptyPortfolioMessage component will recive error in props" time="0.013">
    </testcase>
    <testcase classname="EmptyPortfolioMessage should render empty_portfolio_message on the screen if EmptyPortfolioMessage component will not recive error in props" name="EmptyPortfolioMessage should render empty_portfolio_message on the screen if EmptyPortfolioMessage component will not recive error in props" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractDrawerCard /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:34" time="0.82" tests="3">
    <testcase classname="&lt;ContractDrawerCard /&gt; should render contract card with corresponding fields" name="&lt;ContractDrawerCard /&gt; should render contract card with corresponding fields" time="0.062">
    </testcase>
    <testcase classname="&lt;ContractDrawerCard /&gt; should render Market Closed Contract Overlay if is_market_closed === true and getEndTime returns false" name="&lt;ContractDrawerCard /&gt; should render Market Closed Contract Overlay if is_market_closed === true and getEndTime returns false" time="0.029">
    </testcase>
    <testcase classname="&lt;ContractDrawerCard /&gt; should render contract card with corresponding fields for mobile" name="&lt;ContractDrawerCard /&gt; should render contract card with corresponding fields for mobile" time="0.117">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LaunchModalInfo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:34" time="0.515" tests="1">
    <testcase classname="&lt;LaunchModalInfo /&gt; should render component" name="&lt;LaunchModalInfo /&gt; should render component" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="VideoStream component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:34" time="0.351" tests="8">
    <testcase classname="VideoStream component should render iframe with a video with no controls &amp; enabled picture-in-picture by default" name="VideoStream component should render iframe with a video with no controls &amp; enabled picture-in-picture by default" time="0.016">
    </testcase>
    <testcase classname="VideoStream component should render iframe with a video with controls" name="VideoStream component should render iframe with a video with controls" time="0.004">
    </testcase>
    <testcase classname="VideoStream component should render iframe with a video with disabled picture-in-picture" name="VideoStream component should render iframe with a video with disabled picture-in-picture" time="0.004">
    </testcase>
    <testcase classname="VideoStream component should render iframe with a looped video" name="VideoStream component should render iframe with a looped video" time="0.004">
    </testcase>
    <testcase classname="VideoStream component should render iframe with an autoplaying video" name="VideoStream component should render iframe with an autoplaying video" time="0.01">
    </testcase>
    <testcase classname="VideoStream component should render iframe with a video that starts playing from the specified start_time" name="VideoStream component should render iframe with a video that starts playing from the specified start_time" time="0.004">
    </testcase>
    <testcase classname="VideoStream component should render iframe with a muted video" name="VideoStream component should render iframe with a muted video" time="0.005">
    </testcase>
    <testcase classname="VideoStream component should render iframe with a video that has a poster, an ad, captions, and red primary color" name="VideoStream component should render iframe with a video that has a poster, an ad, captions, and red primary color" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LaunchModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:34" time="0.572" tests="3">
    <testcase classname="&lt;LaunchModal /&gt; should render launch modal " name="&lt;LaunchModal /&gt; should render launch modal " time="0.021">
    </testcase>
    <testcase classname="&lt;LaunchModal /&gt; should set the localStorage key launchModalShown to true on clicking the Ok button" name="&lt;LaunchModal /&gt; should set the localStorage key launchModalShown to true on clicking the Ok button" time="0.042">
    </testcase>
    <testcase classname="&lt;LaunchModal /&gt; should not display launch modal if open is equal to false" name="&lt;LaunchModal /&gt; should not display launch modal if open is equal to false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ErrorComponent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:34" time="0.601" tests="8">
    <testcase classname="ErrorComponent should render ErrorComponent" name="ErrorComponent should render ErrorComponent" time="0.014">
    </testcase>
    <testcase classname="ErrorComponent should render child component Dialog if ErrorComponent receive is_dialog === true" name="ErrorComponent should render child component Dialog if ErrorComponent receive is_dialog === true" time="0.011">
    </testcase>
    <testcase classname="ErrorComponent should render child component Dialog with received title, message and redirect label if ErrorComponent passed them and is_dialog === true" name="ErrorComponent should render child component Dialog with received title, message and redirect label if ErrorComponent passed them and is_dialog === true" time="0.005">
    </testcase>
    <testcase classname="ErrorComponent should render PageError component with received header, message and redirect label if ErrorComponent passed them and is_dialog === false" name="ErrorComponent should render PageError component with received header, message and redirect label if ErrorComponent passed them and is_dialog === false" time="0.004">
    </testcase>
    <testcase classname="ErrorComponent should render PageError without additional text if ErrorComponent receive should_show_refresh === false and is_dialog === false" name="ErrorComponent should render PageError without additional text if ErrorComponent receive should_show_refresh === false and is_dialog === false" time="0.011">
    </testcase>
    <testcase classname="ErrorComponent should call a function which was passed in props when user click on redirect button" name="ErrorComponent should call a function which was passed in props when user click on redirect button" time="0.02">
    </testcase>
    <testcase classname="ErrorComponent should call a reload function when user click on redirect button for Dialog component" name="ErrorComponent should call a reload function when user click on redirect button for Dialog component" time="0.01">
    </testcase>
    <testcase classname="ErrorComponent should call a reload function when user click on redirect button for PageError component" name="ErrorComponent should call a reload function when user click on redirect button for PageError component" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AuthorizationRequiredModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:34" time="0.685" tests="4">
    <testcase classname="&lt;AuthorizationRequiredModal /&gt; modal title, modal description, log in button, and signup button to be rendered" name="&lt;AuthorizationRequiredModal /&gt; modal title, modal description, log in button, and signup button to be rendered" time="0.014">
    </testcase>
    <testcase classname="&lt;AuthorizationRequiredModal /&gt; redirectToLogin should be called when Log in button is clicked" name="&lt;AuthorizationRequiredModal /&gt; redirectToLogin should be called when Log in button is clicked" time="0.018">
    </testcase>
    <testcase classname="&lt;AuthorizationRequiredModal /&gt; redirectToSignUp should be called when Log in button is clicked" name="&lt;AuthorizationRequiredModal /&gt; redirectToSignUp should be called when Log in button is clicked" time="0.008">
    </testcase>
    <testcase classname="&lt;AuthorizationRequiredModal /&gt; should return null when is_visible is false" name="&lt;AuthorizationRequiredModal /&gt; should return null when is_visible is false" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractAudit /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:34" time="0.608" tests="4">
    <testcase classname="&lt;ContractAudit /&gt; should not render component if has_result is falsy" name="&lt;ContractAudit /&gt; should not render component if has_result is falsy" time="0.008">
    </testcase>
    <testcase classname="&lt;ContractAudit /&gt; should render only ContractDetails component if is_multiplier, is_accumulator and is_turbos are falsy" name="&lt;ContractAudit /&gt; should render only ContractDetails component if is_multiplier, is_accumulator and is_turbos are falsy" time="0.004">
    </testcase>
    <testcase classname="&lt;ContractAudit /&gt; should render ContractDetails and ContractHistory components if is_multiplier, is_accumulator or is_turbos is true" name="&lt;ContractAudit /&gt; should render ContractDetails and ContractHistory components if is_multiplier, is_accumulator or is_turbos is true" time="0.004">
    </testcase>
    <testcase classname="&lt;ContractAudit /&gt; should call toggleHistoryTab function if onTabItemClick function was called with 0 index" name="&lt;ContractAudit /&gt; should call toggleHistoryTab function if onTabItemClick function was called with 0 index" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractDetails /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:34" time="0.647" tests="12">
    <testcase classname="&lt;ContractDetails /&gt; should render component with children" name="&lt;ContractDetails /&gt; should render component with children" time="0.024">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; should render specific component for multiplier contract_type" name="&lt;ContractDetails /&gt; should render specific component for multiplier contract_type" time="0.015">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; should render duration and strike barrier information ContractAuditItem if it is vanillas contract type" name="&lt;ContractDetails /&gt; should render duration and strike barrier information ContractAuditItem if it is vanillas contract type" time="0.008">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; should render selected tick if it is tick_high_low contract type" name="&lt;ContractDetails /&gt; should render selected tick if it is tick_high_low contract type" time="0.007">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; should render barrier information in ContractAuditItem if it is digit contract type" name="&lt;ContractDetails /&gt; should render barrier information in ContractAuditItem if it is digit contract type" time="0.013">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; should render hight and low barriers information in ContractAuditItem if it is expiry contract type" name="&lt;ContractDetails /&gt; should render hight and low barriers information in ContractAuditItem if it is expiry contract type" time="0.007">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; should render payout per point information in ContractAuditItem if is_vanilla === true" name="&lt;ContractDetails /&gt; should render payout per point information in ContractAuditItem if is_vanilla === true" time="0.011">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; should render reset time and reset barrier information for Reset contract if it was passed in prop" name="&lt;ContractDetails /&gt; should render reset time and reset barrier information for Reset contract if it was passed in prop" time="0.014">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; getLabel function should return correct label if user sold the contract and it ended before cancellation expired" name="&lt;ContractDetails /&gt; getLabel function should return correct label if user sold the contract and it ended before cancellation expired" time="0.007">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; getLabel function should return correct label if user cancelled contract" name="&lt;ContractDetails /&gt; getLabel function should return correct label if user cancelled contract" time="0.008">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; getLabel function should return correct label if cancellation expired" name="&lt;ContractDetails /&gt; getLabel function should return correct label if cancellation expired" time="0.006">
    </testcase>
    <testcase classname="&lt;ContractDetails /&gt; should render correct rounding for barrier, entry spot and exit spot" name="&lt;ContractDetails /&gt; should render correct rounding for barrier, entry spot and exit spot" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractAuditItem /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.52" tests="5">
    <testcase classname="&lt;ContractAuditItem /&gt; should render component if necessary props were passed" name="&lt;ContractAuditItem /&gt; should render component if necessary props were passed" time="0.011">
    </testcase>
    <testcase classname="&lt;ContractAuditItem /&gt; should render icon inside component if it was passed" name="&lt;ContractAuditItem /&gt; should render icon inside component if it was passed" time="0.003">
    </testcase>
    <testcase classname="&lt;ContractAuditItem /&gt; should render value2 inside component if it was passed" name="&lt;ContractAuditItem /&gt; should render value2 inside component if it was passed" time="0.004">
    </testcase>
    <testcase classname="&lt;ContractAuditItem /&gt; should render formatDate and formatTime inside component if timestamp was passed" name="&lt;ContractAuditItem /&gt; should render formatDate and formatTime inside component if timestamp was passed" time="0.009">
    </testcase>
    <testcase classname="&lt;ContractAuditItem /&gt; should render additional info if additional_info was passed" name="&lt;ContractAuditItem /&gt; should render additional info if additional_info was passed" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractHistory /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.558" tests="3">
    <testcase classname="&lt;ContractHistory /&gt; should render special message if history.length === 0" name="&lt;ContractHistory /&gt; should render special message if history.length === 0" time="0.018">
    </testcase>
    <testcase classname="&lt;ContractHistory /&gt; should render ContractAuditItem if history.length !== 0" name="&lt;ContractHistory /&gt; should render ContractAuditItem if history.length !== 0" time="0.004">
    </testcase>
    <testcase classname="&lt;ContractHistory /&gt; should render Cancelled if order_amount is 0" name="&lt;ContractHistory /&gt; should render Cancelled if order_amount is 0" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="ChartLoader" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.275" tests="2">
    <testcase classname="ChartLoader should not render ChartLoader component if is_visible  === false" name="ChartLoader should not render ChartLoader component if is_visible  === false" time="0.008">
    </testcase>
    <testcase classname="ChartLoader should render ChartLoader component if is_visible  === true" name="ChartLoader should render ChartLoader component if is_visible  === true" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MarketCountdownTimer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.575" tests="2">
    <testcase classname="&lt;MarketCountdownTimer /&gt; should not render component with children if is_main_page is true" name="&lt;MarketCountdownTimer /&gt; should not render component with children if is_main_page is true" time="0.01">
    </testcase>
    <testcase classname="&lt;MarketCountdownTimer /&gt; should render component with children if is_main_page is false" name="&lt;MarketCountdownTimer /&gt; should render component with children if is_main_page is false" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MarketIsClosedOverlay /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.498" tests="3">
    <testcase classname="&lt;MarketIsClosedOverlay /&gt; should render component with children" name="&lt;MarketIsClosedOverlay /&gt; should render component with children" time="0.027">
    </testcase>
    <testcase classname="&lt;MarketIsClosedOverlay /&gt; should render no message and another button text if is_synthetics_trading_market_available is false" name="&lt;MarketIsClosedOverlay /&gt; should render no message and another button text if is_synthetics_trading_market_available is false" time="0.004">
    </testcase>
    <testcase classname="&lt;MarketIsClosedOverlay /&gt; should render default button text if is_eu &amp;&amp; is_synthetics_trading_market_available are equal to true" name="&lt;MarketIsClosedOverlay /&gt; should render default button text if is_eu &amp;&amp; is_synthetics_trading_market_available are equal to true" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="TogglePositions component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.551" tests="4">
    <testcase classname="TogglePositions component should have &quot;positions-toggle--active&quot; class when &quot;is_open&quot; is &quot;true&quot;" name="TogglePositions component should have &quot;positions-toggle--active&quot; class when &quot;is_open&quot; is &quot;true&quot;" time="0.008">
    </testcase>
    <testcase classname="TogglePositions component should have &quot;positions-toggle--has-count&quot; class when &quot;positions_count &gt; 0&quot;" name="TogglePositions component should have &quot;positions-toggle--has-count&quot; class when &quot;positions_count &gt; 0&quot;" time="0.005">
    </testcase>
    <testcase classname="TogglePositions component should call &quot;togglePositions&quot; when the user clicked on the link" name="TogglePositions component should call &quot;togglePositions&quot; when the user clicked on the link" time="0.009">
    </testcase>
    <testcase classname="TogglePositions component should render &quot;IcPortfolio&quot; icon" name="TogglePositions component should render &quot;IcPortfolio&quot; icon" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="UnsupportedContractModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.599" tests="1">
    <testcase classname="UnsupportedContractModal should render modal component" name="UnsupportedContractModal should render modal component" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="MarketUnavailableModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.657" tests="1">
    <testcase classname="MarketUnavailableModal should render modal component" name="MarketUnavailableModal should render modal component" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="TogglePositionsMobile component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.852" tests="5">
    <testcase classname="TogglePositionsMobile component should display TogglePositions with portfolio icon by default when is_positions_drawer_on === false" name="TogglePositionsMobile component should display TogglePositions with portfolio icon by default when is_positions_drawer_on === false" time="0.034">
    </testcase>
    <testcase classname="TogglePositionsMobile component should display an empty Modal when is_positions_drawer_on === true and is_empty === true" name="TogglePositionsMobile component should display an empty Modal when is_positions_drawer_on === true and is_empty === true" time="0.017">
    </testcase>
    <testcase classname="TogglePositionsMobile component should display 2 positions when is_positions_drawer_on === true, is_empty === false, and has 2 active positions" name="TogglePositionsMobile component should display 2 positions when is_positions_drawer_on === true, is_empty === false, and has 2 active positions" time="0.016">
    </testcase>
    <testcase classname="TogglePositionsMobile component should display 1 of 2 positions after closing the modal if one of the 2 positions is sold" name="TogglePositionsMobile component should display 1 of 2 positions after closing the modal if one of the 2 positions is sold" time="0.177">
    </testcase>
    <testcase classname="TogglePositionsMobile component should display no more than 5 recent positions" name="TogglePositionsMobile component should display no more than 5 recent positions" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="getTitle" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.252" tests="5">
    <testcase classname="getTitle should return &quot;Purchase Error&quot; if input is buy" name="getTitle should return &quot;Purchase Error&quot; if input is buy" time="0.002">
    </testcase>
    <testcase classname="getTitle should return &quot;Deal Cancellation Error&quot; if input is cancel" name="getTitle should return &quot;Deal Cancellation Error&quot; if input is cancel" time="0">
    </testcase>
    <testcase classname="getTitle should return &quot;Contract Update Error&quot; if input is buy" name="getTitle should return &quot;Contract Update Error&quot; if input is buy" time="0">
    </testcase>
    <testcase classname="getTitle should return &quot;Sell Error&quot; if input is buy" name="getTitle should return &quot;Sell Error&quot; if input is buy" time="0">
    </testcase>
    <testcase classname="getTitle should return &quot;Error&quot; if input is not a defined type" name="getTitle should return &quot;Error&quot; if input is not a defined type" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountVerificationPendingModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.693" tests="3">
    <testcase classname="&lt;AccountVerificationPendingModal /&gt; should render the component AccountVerificationPendingModal if is_visible is true" name="&lt;AccountVerificationPendingModal /&gt; should render the component AccountVerificationPendingModal if is_visible is true" time="0.067">
    </testcase>
    <testcase classname="&lt;AccountVerificationPendingModal /&gt; should call onConfirm when clicking on OK button" name="&lt;AccountVerificationPendingModal /&gt; should call onConfirm when clicking on OK button" time="0.028">
    </testcase>
    <testcase classname="&lt;AccountVerificationPendingModal /&gt; should not render the component if is_visible is false " name="&lt;AccountVerificationPendingModal /&gt; should not render the component if is_visible is false " time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountVerificationRequiredModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:35" time="0.635" tests="5">
    <testcase classname="&lt;AccountVerificationRequiredModal /&gt; height should be auto if isMobile is true" name="&lt;AccountVerificationRequiredModal /&gt; height should be auto if isMobile is true" time="0.014">
    </testcase>
    <testcase classname="&lt;AccountVerificationRequiredModal /&gt; height should be 220px if isMobile is false" name="&lt;AccountVerificationRequiredModal /&gt; height should be 220px if isMobile is false" time="0.003">
    </testcase>
    <testcase classname="&lt;AccountVerificationRequiredModal /&gt; should render modal title, modal description, and submit button." name="&lt;AccountVerificationRequiredModal /&gt; should render modal title, modal description, and submit button." time="0.006">
    </testcase>
    <testcase classname="&lt;AccountVerificationRequiredModal /&gt; should return null when is_visible is false" name="&lt;AccountVerificationRequiredModal /&gt; should return null when is_visible is false" time="0.004">
    </testcase>
    <testcase classname="&lt;AccountVerificationRequiredModal /&gt; should navigate to proof_of_identity url on clicking on submit button" name="&lt;AccountVerificationRequiredModal /&gt; should navigate to proof_of_identity url on clicking on submit button" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="addCommaToNumber" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.321" tests="5">
    <testcase classname="addCommaToNumber should work as expected with number steps of thousands leading to a comma separated string" name="addCommaToNumber should work as expected with number steps of thousands leading to a comma separated string" time="0.001">
    </testcase>
    <testcase classname="getBarrierLabel should return Target label if contract has a digit contract type" name="getBarrierLabel should return Target label if contract has a digit contract type" time="0.001">
    </testcase>
    <testcase classname="getBarrierValue should return correct target value according to digit type mapping if contract type is digit" name="getBarrierValue should return correct target value according to digit type mapping if contract type is digit" time="0.001">
    </testcase>
    <testcase classname="getBarrierValue should return barrier value with correct rounding" name="getBarrierValue should return barrier value with correct rounding" time="0">
    </testcase>
    <testcase classname="getBarrierValue should return null if there is no barrier value or it is equal to null" name="getBarrierValue should return null if there is no barrier value or it is equal to null" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ServicesErrorModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.504" tests="6">
    <testcase classname="&lt;ServicesErrorModal /&gt; Should return null if code or message is missing" name="&lt;ServicesErrorModal /&gt; Should return null if code or message is missing" time="0.006">
    </testcase>
    <testcase classname="&lt;ServicesErrorModal /&gt; AuthorizationRequiredModal should render when code is AuthorizationRequired" name="&lt;ServicesErrorModal /&gt; AuthorizationRequiredModal should render when code is AuthorizationRequired" time="0.002">
    </testcase>
    <testcase classname="&lt;ServicesErrorModal /&gt; InsufficientBalanceModal should render when code is InsufficientBalance" name="&lt;ServicesErrorModal /&gt; InsufficientBalanceModal should render when code is InsufficientBalance" time="0.002">
    </testcase>
    <testcase classname="&lt;ServicesErrorModal /&gt; CompanyWideLimitExceededModal should render when code is CompanyWideLimitExceeded" name="&lt;ServicesErrorModal /&gt; CompanyWideLimitExceededModal should render when code is CompanyWideLimitExceeded" time="0.001">
    </testcase>
    <testcase classname="&lt;ServicesErrorModal /&gt; AccountVerificationRequiredModal should render when code is PleaseAuthenticate" name="&lt;ServicesErrorModal /&gt; AccountVerificationRequiredModal should render when code is PleaseAuthenticate" time="0.001">
    </testcase>
    <testcase classname="&lt;ServicesErrorModal /&gt; Default case should render when code is not specified in switch case" name="&lt;ServicesErrorModal /&gt; Default case should render when code is not specified in switch case" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InsufficientBalanceModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.608" tests="4">
    <testcase classname="&lt;InsufficientBalanceModal /&gt; modal title, and modal description should be rendered" name="&lt;InsufficientBalanceModal /&gt; modal title, and modal description should be rendered" time="0.011">
    </testcase>
    <testcase classname="&lt;InsufficientBalanceModal /&gt; button text should be OK if is_virtual is true and toggleModal should be called if user clicks on the button" name="&lt;InsufficientBalanceModal /&gt; button text should be OK if is_virtual is true and toggleModal should be called if user clicks on the button" time="0.014">
    </testcase>
    <testcase classname="&lt;InsufficientBalanceModal /&gt; button text should be &quot;Deposit now&quot; if is_virtual is false and should navigate to bla bla if you click on the button" name="&lt;InsufficientBalanceModal /&gt; button text should be &quot;Deposit now&quot; if is_virtual is false and should navigate to bla bla if you click on the button" time="0.009">
    </testcase>
    <testcase classname="&lt;InsufficientBalanceModal /&gt; should return null when is_visible is false" name="&lt;InsufficientBalanceModal /&gt; should return null when is_visible is false" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CompanyWideLimitExceeded /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.582" tests="2">
    <testcase classname="&lt;CompanyWideLimitExceeded /&gt; should render modal title, modal description, and modal button." name="&lt;CompanyWideLimitExceeded /&gt; should render modal title, modal description, and modal button." time="0.014">
    </testcase>
    <testcase classname="&lt;CompanyWideLimitExceeded /&gt; should return null when is_visible is false" name="&lt;CompanyWideLimitExceeded /&gt; should return null when is_visible is false" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Dialog /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.403" tests="2">
    <testcase classname="&lt;Dialog /&gt; Should render minute and hours dialogs" name="&lt;Dialog /&gt; Should render minute and hours dialogs" time="0.022">
    </testcase>
    <testcase classname="&lt;Dialog /&gt; Selecting disabled hour and minute does not call onChange function" name="&lt;Dialog /&gt; Selecting disabled hour and minute does not call onChange function" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="NumberSelector" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.301" tests="4">
    <testcase classname="NumberSelector should render all members of arr_arr_numbers" name="NumberSelector should render all members of arr_arr_numbers" time="0.016">
    </testcase>
    <testcase classname="NumberSelector should render all members of arr_arr_numbers with percentage if should_show_in_percents === true" name="NumberSelector should render all members of arr_arr_numbers with percentage if should_show_in_percents === true" time="0.004">
    </testcase>
    <testcase classname="NumberSelector should call onChange function if user clicks not on the selected value" name="NumberSelector should call onChange function if user clicks not on the selected value" time="0.012">
    </testcase>
    <testcase classname="NumberSelector should not call onChange function if user clicks on the selected value" name="NumberSelector should not call onChange function if user clicks on the selected value" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="PositionsResultMobile" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.653" tests="3">
    <testcase classname="PositionsResultMobile should PositionsResultMobile be in the DOM" name="PositionsResultMobile should PositionsResultMobile be in the DOM" time="0.021">
    </testcase>
    <testcase classname="PositionsResultMobile should PositionsResultMobile render CLOSED if result is won " name="PositionsResultMobile should PositionsResultMobile render CLOSED if result is won " time="0.005">
    </testcase>
    <testcase classname="PositionsResultMobile should PositionsResultMobile render CLOSED if result is lost" name="PositionsResultMobile should PositionsResultMobile render CLOSED if result is lost" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PositionsModalCard /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.788" tests="9">
    <testcase classname="&lt;PositionsModalCard /&gt; should render loader if underlying in contract_info is falsy and contract is unsupported" name="&lt;PositionsModalCard /&gt; should render loader if underlying in contract_info is falsy and contract is unsupported" time="0.015">
    </testcase>
    <testcase classname="&lt;PositionsModalCard /&gt; should render loader if underlying in contract_info is falsy and contract is supported" name="&lt;PositionsModalCard /&gt; should render loader if underlying in contract_info is falsy and contract is supported" time="0.004">
    </testcase>
    <testcase classname="&lt;PositionsModalCard /&gt; should render specific contract card for Vanillas" name="&lt;PositionsModalCard /&gt; should render specific contract card for Vanillas" time="0.038">
    </testcase>
    <testcase classname="&lt;PositionsModalCard /&gt; should render a specific closed contract card for Vanillas" name="&lt;PositionsModalCard /&gt; should render a specific closed contract card for Vanillas" time="0.029">
    </testcase>
    <testcase classname="&lt;PositionsModalCard /&gt; should render specific contract card for Turbos" name="&lt;PositionsModalCard /&gt; should render specific contract card for Turbos" time="0.028">
    </testcase>
    <testcase classname="&lt;PositionsModalCard /&gt; should render contract card for Rise/Fall" name="&lt;PositionsModalCard /&gt; should render contract card for Rise/Fall" time="0.016">
    </testcase>
    <testcase classname="&lt;PositionsModalCard /&gt; should render the same contract card for Touch/No Touch as for Rise/Fall" name="&lt;PositionsModalCard /&gt; should render the same contract card for Touch/No Touch as for Rise/Fall" time="0.017">
    </testcase>
    <testcase classname="&lt;PositionsModalCard /&gt; should render the contract card for Multipliers" name="&lt;PositionsModalCard /&gt; should render the contract card for Multipliers" time="0.023">
    </testcase>
    <testcase classname="&lt;PositionsModalCard /&gt; should not render arrow indicator if the contract was sold (is_sold === 1)" name="&lt;PositionsModalCard /&gt; should not render arrow indicator if the contract was sold (is_sold === 1)" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Fieldset" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.517" tests="4">
    <testcase classname="Fieldset should render Fieldset component with children but without header by default" name="Fieldset should render Fieldset component with children but without header by default" time="0.011">
    </testcase>
    <testcase classname="Fieldset should render Fieldset component with header and specific className if it was passed in props and is_center !== true" name="Fieldset should render Fieldset component with header and specific className if it was passed in props and is_center !== true" time="0.002">
    </testcase>
    <testcase classname="Fieldset should render header with a specific class if is_center === true" name="Fieldset should render header with a specific class if is_center === true" time="0.002">
    </testcase>
    <testcase classname="Fieldset should render popover for header if it was passed in props" name="Fieldset should render popover for header if it was passed in props" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="TickSteps" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:37" time="0.299" tests="10">
    <testcase classname="TickSteps should render 10 tick steps" name="TickSteps should render 10 tick steps" time="0.008">
    </testcase>
    <testcase classname="TickSteps should render 10 tick steps" name="TickSteps should render 10 tick steps" time="0.002">
    </testcase>
    <testcase classname="TickSteps should render 10 tick steps" name="TickSteps should render 10 tick steps" time="0.002">
    </testcase>
    <testcase classname="TickSteps should render 10 tick steps" name="TickSteps should render 10 tick steps" time="0.001">
    </testcase>
    <testcase classname="TickSteps should render 10 tick steps" name="TickSteps should render 10 tick steps" time="0.002">
    </testcase>
    <testcase classname="TickSteps should render 10 tick steps" name="TickSteps should render 10 tick steps" time="0.001">
    </testcase>
    <testcase classname="TickSteps should render 10 tick steps" name="TickSteps should render 10 tick steps" time="0.002">
    </testcase>
    <testcase classname="TickSteps should render 10 tick steps" name="TickSteps should render 10 tick steps" time="0.001">
    </testcase>
    <testcase classname="TickSteps should render 10 tick steps" name="TickSteps should render 10 tick steps" time="0.007">
    </testcase>
    <testcase classname="TickSteps should render 10 tick steps" name="TickSteps should render 10 tick steps" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PositionsDrawer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:36" time="0.738" tests="6">
    <testcase classname="&lt;PositionsDrawer /&gt; should render Recent positions with empty portfolio message if there is no open positions" name="&lt;PositionsDrawer /&gt; should render Recent positions with empty portfolio message if there is no open positions" time="0.019">
    </testcase>
    <testcase classname="&lt;PositionsDrawer /&gt; should render Recent positions with empty portfolio message if there is an error in portfolio even though there is match in open position" name="&lt;PositionsDrawer /&gt; should render Recent positions with empty portfolio message if there is an error in portfolio even though there is match in open position" time="0.009">
    </testcase>
    <testcase classname="&lt;PositionsDrawer /&gt; should render PositionsDrawerCard if portfolio is not empty and there is no error" name="&lt;PositionsDrawer /&gt; should render PositionsDrawerCard if portfolio is not empty and there is no error" time="0.048">
    </testcase>
    <testcase classname="&lt;PositionsDrawer /&gt; should render both PositionsDrawerCard for Turbos Long and Short" name="&lt;PositionsDrawer /&gt; should render both PositionsDrawerCard for Turbos Long and Short" time="0.017">
    </testcase>
    <testcase classname="&lt;PositionsDrawer /&gt; should render both PositionsDrawerCard for Vanilla Call and Put" name="&lt;PositionsDrawer /&gt; should render both PositionsDrawerCard for Vanilla Call and Put" time="0.018">
    </testcase>
    <testcase classname="&lt;PositionsDrawer /&gt; should call onHoverPosition if user hover on position drawer card and should call it twice if he unhover it" name="&lt;PositionsDrawer /&gt; should call onHoverPosition if user hover on position drawer card and should call it twice if he unhover it" time="0.071">
    </testcase>
  </testsuite>
  <testsuite name="RangeSlider" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:37" time="0.523" tests="3">
    <testcase classname="RangeSlider should show 1 Tick if the value is 1" name="RangeSlider should show 1 Tick if the value is 1" time="0.021">
    </testcase>
    <testcase classname="RangeSlider should show 2 Ticks if the value is 2" name="RangeSlider should show 2 Ticks if the value is 2" time="0.003">
    </testcase>
    <testcase classname="RangeSlider should call onChange if user changed input value" name="RangeSlider should call onChange if user changed input value" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="validAddress" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:37" time="0.454" tests="9">
    <testcase classname="validAddress should accept empty string by default" name="validAddress should accept empty string by default" time="0.001">
    </testcase>
    <testcase classname="validAddress should accept a bunch of spaces by default" name="validAddress should accept a bunch of spaces by default" time="0">
    </testcase>
    <testcase classname="validAddress should not accept empty string if is_required is true" name="validAddress should not accept empty string if is_required is true" time="0.001">
    </testcase>
    <testcase classname="validAddress should not accept a bunch of spaces if is_required is true" name="validAddress should not accept a bunch of spaces if is_required is true" time="0">
    </testcase>
    <testcase classname="validAddress should not accept string longer than 70 characters" name="validAddress should not accept string longer than 70 characters" time="0.001">
    </testcase>
    <testcase classname="validAddress should accept English and decimals" name="validAddress should accept English and decimals" time="0">
    </testcase>
    <testcase classname="validAddress should accept permitted characters" name="validAddress should accept permitted characters" time="0">
    </testcase>
    <testcase classname="validAddress should accept different languages" name="validAddress should accept different languages" time="0.001">
    </testcase>
    <testcase classname="validAddress should not accept special characters other then the permitted ones" name="validAddress should not accept special characters other then the permitted ones" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="buildBarriersConfig" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:37" time="0.42" tests="5">
    <testcase classname="buildBarriersConfig Returns Undefined if contract has no barriers" name="buildBarriersConfig Returns Undefined if contract has no barriers" time="0.001">
    </testcase>
    <testcase classname="buildBarriersConfig Returns barriers with added values when contract has barrier but equals to zero" name="buildBarriersConfig Returns barriers with added values when contract has barrier but equals to zero" time="0">
    </testcase>
    <testcase classname="buildBarriersConfig Returns barriers with including empty object when contract has barriers but not values" name="buildBarriersConfig Returns barriers with including empty object when contract has barriers but not values" time="0.001">
    </testcase>
    <testcase classname="buildBarriersConfig Returns barriers with added values when contract has barriers" name="buildBarriersConfig Returns barriers with added values when contract has barriers" time="0.003">
    </testcase>
    <testcase classname="buildBarriersConfig Returns barriers with some of the values when contract has barriers and some of the values" name="buildBarriersConfig Returns barriers with some of the values when contract has barriers and some of the values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TimePicker /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:37" time="0.65" tests="3">
    <testcase classname="&lt;TimePicker /&gt; should render CSS Transition Element, mocked Icon and input with selected_time if is_native_picker is false and input is not clicked" name="&lt;TimePicker /&gt; should render CSS Transition Element, mocked Icon and input with selected_time if is_native_picker is false and input is not clicked" time="0.032">
    </testcase>
    <testcase classname="&lt;TimePicker /&gt; should render TimePickerDialog if input is clicked" name="&lt;TimePicker /&gt; should render TimePickerDialog if input is clicked" time="0.018">
    </testcase>
    <testcase classname="&lt;TimePicker /&gt; should render native html input if is_native_picker is true" name="&lt;TimePicker /&gt; should render native html input if is_native_picker is true" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="shouldHideOccupationField" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:37" time="0.55" tests="4">
    <testcase classname="shouldHideOccupationField should return false when employment_status is &quot;Employed&quot;" name="shouldHideOccupationField should return false when employment_status is &quot;Employed&quot;" time="0.001">
    </testcase>
    <testcase classname="shouldHideOccupationField should return true when employment_status is &quot;Unemployed&quot;" name="shouldHideOccupationField should return true when employment_status is &quot;Unemployed&quot;" time="0">
    </testcase>
    <testcase classname="shouldHideOccupationField should return true when employment_status is &quot;Self employed&quot;" name="shouldHideOccupationField should return true when employment_status is &quot;Self employed&quot;" time="0.001">
    </testcase>
    <testcase classname="shouldHideOccupationField should return false when employment_status is empty sting" name="shouldHideOccupationField should return false when employment_status is empty sting" time="0">
    </testcase>
  </testsuite>
  <testsuite name="format-response" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:37" time="0.552" tests="20">
    <testcase classname="format-response should return an object with values in object passed as argument to formatPortfolioPosition" name="format-response should return an object with values in object passed as argument to formatPortfolioPosition" time="0.003">
    </testcase>
    <testcase classname="format-response should return true if residence is in the list of supported countries for onfido" name="format-response should return true if residence is in the list of supported countries for onfido" time="0">
    </testcase>
    <testcase classname="format-response filterDisabledPositions should return false if a feature flag for position.contract_type is disabled" name="format-response filterDisabledPositions should return false if a feature flag for position.contract_type is disabled" time="0.005">
    </testcase>
    <testcase classname="format-response filterDisabledPositions should return true if a feature flag for position.contract_type is enabled" name="format-response filterDisabledPositions should return true if a feature flag for position.contract_type is enabled" time="0">
    </testcase>
    <testcase classname="format-response filterDisabledPositions should return true if a feature flag for position.contract_type is not defined" name="format-response filterDisabledPositions should return true if a feature flag for position.contract_type is not defined" time="0.001">
    </testcase>
    <testcase classname="format-response filterDisabledPositions should return true if a feature flag for transaction contract category is enabled
            based on shortcode when contract_type property is missing" name="format-response filterDisabledPositions should return true if a feature flag for transaction contract category is enabled
            based on shortcode when contract_type property is missing" time="0">
    </testcase>
    <testcase classname="format-response formatIDVError should return null as error if no errors are present and status is NONE" name="format-response formatIDVError should return null as error if no errors are present and status is NONE" time="0">
    </testcase>
    <testcase classname="format-response formatIDVError should return null as error if no errors are present and status is NONE even for high risk client" name="format-response formatIDVError should return null as error if no errors are present and status is NONE even for high risk client" time="0.001">
    </testcase>
    <testcase classname="format-response formatIDVError should return null as error if no errors are present and status is VERIFIED" name="format-response formatIDVError should return null as error if no errors are present and status is VERIFIED" time="0">
    </testcase>
    <testcase classname="format-response formatIDVError should return HighRisk error code if no errors are present and status is VERIFIED" name="format-response formatIDVError should return HighRisk error code if no errors are present and status is VERIFIED" time="0">
    </testcase>
    <testcase classname="format-response formatIDVError should return Expired error code if status is Expired" name="format-response formatIDVError should return Expired error code if status is Expired" time="0.001">
    </testcase>
    <testcase classname="format-response formatIDVError should return NameMismatch error code if errors array contains NameMismatch" name="format-response formatIDVError should return NameMismatch error code if errors array contains NameMismatch" time="0">
    </testcase>
    <testcase classname="format-response formatIDVError should return DobMismatch error code if errors array contains DobMismatch" name="format-response formatIDVError should return DobMismatch error code if errors array contains DobMismatch" time="0">
    </testcase>
    <testcase classname="format-response formatIDVError should return NameDobMismatch error code if errors array contains DobMismatch and NameMismatch" name="format-response formatIDVError should return NameDobMismatch error code if errors array contains DobMismatch and NameMismatch" time="0.001">
    </testcase>
    <testcase classname="format-response formatIDVError should return Failed error code if errors array contains DobMismatch and Failed" name="format-response formatIDVError should return Failed error code if errors array contains DobMismatch and Failed" time="0">
    </testcase>
    <testcase classname="format-response formatIDVError should return Underage error code if errors array contains Underage" name="format-response formatIDVError should return Underage error code if errors array contains Underage" time="0">
    </testcase>
    <testcase classname="format-response formatIDVError should return first error code from the error of error codes if errors array exists" name="format-response formatIDVError should return first error code from the error of error codes if errors array exists" time="0">
    </testcase>
    <testcase classname="format-response formatOnfidoError should return Expired error code along with the rest of error codes if status is Expired" name="format-response formatOnfidoError should return Expired error code along with the rest of error codes if status is Expired" time="0.001">
    </testcase>
    <testcase classname="format-response formatOnfidoError should return the rest of error codes if status is not Expired" name="format-response formatOnfidoError should return the rest of error codes if status is not Expired" time="0">
    </testcase>
    <testcase classname="format-response formatOnfidoError should return the rest of error codes if status is not Expired" name="format-response formatOnfidoError should return the rest of error codes if status is not Expired" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Barriers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:37" time="0.323" tests="6">
    <testcase classname="Barriers isBarrierSupported should return false when barrier is not in CONTRACT_SHADES" name="Barriers isBarrierSupported should return false when barrier is not in CONTRACT_SHADES" time="0.001">
    </testcase>
    <testcase classname="Barriers isBarrierSupported should return true when barrier is in CONTRACT_SHADES" name="Barriers isBarrierSupported should return true when barrier is in CONTRACT_SHADES" time="0.001">
    </testcase>
    <testcase classname="Barriers barriersToString should convert non-zero barriers which do not have +/- to string consisting of them without +/- while is_relative is false" name="Barriers barriersToString should convert non-zero barriers which do not have +/- to string consisting of them without +/- while is_relative is false" time="0.002">
    </testcase>
    <testcase classname="Barriers barriersToString should convert values without +/- and zero to string consisting of them without +/- while is_relative is false" name="Barriers barriersToString should convert values without +/- and zero to string consisting of them without +/- while is_relative is false" time="0.001">
    </testcase>
    <testcase classname="Barriers barriersToString should convert barriers which have +/- to string consisting of them without +/- while is_relative is false" name="Barriers barriersToString should convert barriers which have +/- to string consisting of them without +/- while is_relative is false" time="0.001">
    </testcase>
    <testcase classname="Barriers barriersToString should convert barriers which have +/- to string consisting of them with +/- while is_relative is true" name="Barriers barriersToString should convert barriers which have +/- to string consisting of them with +/- while is_relative is true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="market-underlying" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:37" time="0.342" tests="15">
    <testcase classname="market-underlying getContractDurationType should return Ticks if longcode contains ticks" name="market-underlying getContractDurationType should return Ticks if longcode contains ticks" time="0.002">
    </testcase>
    <testcase classname="market-underlying getContractDurationType should return Days when longcode does not contain duration and shortcode is not passed" name="market-underlying getContractDurationType should return Days when longcode does not contain duration and shortcode is not passed" time="0.002">
    </testcase>
    <testcase classname="market-underlying getContractDurationType should return Days when longcode does not contain duration and shortcode is not for Multipliers" name="market-underlying getContractDurationType should return Days when longcode does not contain duration and shortcode is not for Multipliers" time="0.001">
    </testcase>
    <testcase classname="market-underlying getContractDurationType should return an empty string when shortcode is for Multipliers" name="market-underlying getContractDurationType should return an empty string when shortcode is for Multipliers" time="0">
    </testcase>
    <testcase classname="market-underlying getContractDurationType should return a plural duration if longcode contains singular duration" name="market-underlying getContractDurationType should return a plural duration if longcode contains singular duration" time="0.001">
    </testcase>
    <testcase classname="market-underlying getMarketInformation should return an object with correct data about contract_type and symbol when shortcode is provided" name="market-underlying getMarketInformation should return an object with correct data about contract_type and symbol when shortcode is provided" time="0.001">
    </testcase>
    <testcase classname="market-underlying getMarketInformation should return an object with empty values when shortcode is not provided" name="market-underlying getMarketInformation should return an object with empty values when shortcode is not provided" time="0">
    </testcase>
    <testcase classname="market-underlying getMarketName should return the correct symbol display name when symbol is provided" name="market-underlying getMarketName should return the correct symbol display name when symbol is provided" time="0.003">
    </testcase>
    <testcase classname="market-underlying getMarketName should return null when symbol is not provided" name="market-underlying getMarketName should return null when symbol is not provided" time="0">
    </testcase>
    <testcase classname="market-underlying getTradeTypeName should return the correct contract type display name" name="market-underlying getTradeTypeName should return the correct contract type display name" time="0.002">
    </testcase>
    <testcase classname="market-underlying getTradeTypeName should return the correct Higher or Lower contract type display name when is_how_low === true" name="market-underlying getTradeTypeName should return the correct Higher or Lower contract type display name when is_how_low === true" time="0.004">
    </testcase>
    <testcase classname="market-underlying getTradeTypeName should return the correct Rise or Fall contract type display name when is_how_low === false" name="market-underlying getTradeTypeName should return the correct Rise or Fall contract type display name when is_how_low === false" time="0.002">
    </testcase>
    <testcase classname="market-underlying getTradeTypeName should return the correct Long or Short contract type display name when show_button_name is true" name="market-underlying getTradeTypeName should return the correct Long or Short contract type display name when show_button_name is true" time="0.017">
    </testcase>
    <testcase classname="market-underlying getTradeTypeName should return Turbos for both Turbos contract types when show_button_name is false" name="market-underlying getTradeTypeName should return Turbos for both Turbos contract types when show_button_name is false" time="0.006">
    </testcase>
    <testcase classname="market-underlying getTradeTypeName should return null if an incorrect contract_type is provided" name="market-underlying getTradeTypeName should return null if an incorrect contract_type is provided" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="buildDurationConfig" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.347" tests="17">
    <testcase classname="buildDurationConfig Returns correct value when durations is not passed" name="buildDurationConfig Returns correct value when durations is not passed" time="0.004">
    </testcase>
    <testcase classname="buildDurationConfig Returns correct value when durations passed" name="buildDurationConfig Returns correct value when durations passed" time="0.001">
    </testcase>
    <testcase classname="convertDurationUnit Returns correct value convert day to second" name="convertDurationUnit Returns correct value convert day to second" time="0">
    </testcase>
    <testcase classname="convertDurationUnit Returns correct value convert minute to second" name="convertDurationUnit Returns correct value convert minute to second" time="0.001">
    </testcase>
    <testcase classname="convertDurationUnit Returns correct value convert day to minute" name="convertDurationUnit Returns correct value convert day to minute" time="0.008">
    </testcase>
    <testcase classname="convertDurationUnit Returns correct value convert second to minute" name="convertDurationUnit Returns correct value convert second to minute" time="0.001">
    </testcase>
    <testcase classname="convertDurationUnit Returns correct value convert minute to day" name="convertDurationUnit Returns correct value convert minute to day" time="0">
    </testcase>
    <testcase classname="convertDurationUnit Returns correct value convert second to day" name="convertDurationUnit Returns correct value convert second to day" time="0.001">
    </testcase>
    <testcase classname="getExpiryType Return intraday if expiry date is today" name="getExpiryType Return intraday if expiry date is today" time="0.002">
    </testcase>
    <testcase classname="getExpiryType Return daily if expiry date is tomorrow" name="getExpiryType Return daily if expiry date is tomorrow" time="0">
    </testcase>
    <testcase classname="getExpiryType Return tick if duration unit is t" name="getExpiryType Return tick if duration unit is t" time="0.001">
    </testcase>
    <testcase classname="getExpiryType Return intraday if duration unit is m" name="getExpiryType Return intraday if duration unit is m" time="0">
    </testcase>
    <testcase classname="getExpiryType Return daily if duration unit is d" name="getExpiryType Return daily if duration unit is d" time="0">
    </testcase>
    <testcase classname="convertDurationLimit Returns correct value for ticks unit" name="convertDurationLimit Returns correct value for ticks unit" time="0.001">
    </testcase>
    <testcase classname="convertDurationLimit Returns correct value for minutes unit" name="convertDurationLimit Returns correct value for minutes unit" time="0">
    </testcase>
    <testcase classname="convertDurationLimit Returns correct value for hour unit" name="convertDurationLimit Returns correct value for hour unit" time="0">
    </testcase>
    <testcase classname="convertDurationLimit Returns correct value for day unit" name="convertDurationLimit Returns correct value for day unit" time="0">
    </testcase>
  </testsuite>
  <testsuite name="start_date" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.345" tests="1">
    <testcase classname="start_date buildForwardStartingConfig Returns empty object when forward_starting_options and forward_starting_dates are both empties" name="start_date buildForwardStartingConfig Returns empty object when forward_starting_options and forward_starting_dates are both empties" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:37" time="1.157" tests="2">
    <testcase classname="useStore should throw an error if StoreContext has not been provided" name="useStore should throw an error if StoreContext has not been provided" time="0.02">
    </testcase>
    <testcase classname="useStore should be able to access store data if StoreContext has been provided" name="useStore should be able to access store data if StoreContext has been provided" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="CurrencyUtils" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.329" tests="14">
    <testcase classname="CurrencyUtils .formatMoney() works as expected" name="CurrencyUtils .formatMoney() works as expected" time="0.003">
    </testcase>
    <testcase classname="CurrencyUtils .formatMoney() works with negative values" name="CurrencyUtils .formatMoney() works with negative values" time="0.006">
    </testcase>
    <testcase classname="CurrencyUtils .formatMoney() works when exclude currency" name="CurrencyUtils .formatMoney() works when exclude currency" time="0">
    </testcase>
    <testcase classname="CurrencyUtils .formatCurrency() works as expected" name="CurrencyUtils .formatCurrency() works as expected" time="0">
    </testcase>
    <testcase classname="CurrencyUtils .addComma() works as expected" name="CurrencyUtils .addComma() works as expected" time="0">
    </testcase>
    <testcase classname="CurrencyUtils .addComma() works with decimal places" name="CurrencyUtils .addComma() works with decimal places" time="0.001">
    </testcase>
    <testcase classname="CurrencyUtils .addComma() works with negative numbers" name="CurrencyUtils .addComma() works with negative numbers" time="0.001">
    </testcase>
    <testcase classname="CurrencyUtils .addComma() handles null values" name="CurrencyUtils .addComma() handles null values" time="0.001">
    </testcase>
    <testcase classname="CurrencyUtils .getDecimalPlaces() works as expected" name="CurrencyUtils .getDecimalPlaces() works as expected" time="0.001">
    </testcase>
    <testcase classname="CurrencyUtils .getDecimalPlaces() works with dummy currencies" name="CurrencyUtils .getDecimalPlaces() works with dummy currencies" time="0">
    </testcase>
    <testcase classname="CurrencyUtils .getDecimalPlaces() works with undefined" name="CurrencyUtils .getDecimalPlaces() works with undefined" time="0.001">
    </testcase>
    <testcase classname="CurrencyUtils .getCurrencies() works as expected" name="CurrencyUtils .getCurrencies() works as expected" time="0.001">
    </testcase>
    <testcase classname="CurrencyUtils .isCryptocurrency() works as expected" name="CurrencyUtils .isCryptocurrency() works as expected" time="0.002">
    </testcase>
    <testcase classname="CurrencyUtils .isCryptocurrency() works with undefined currencies" name="CurrencyUtils .isCryptocurrency() works with undefined currencies" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getUnitMap" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.58" tests="13">
    <testcase classname="getUnitMap should return object with proper fields" name="getUnitMap should return object with proper fields" time="0.005">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 2 hours" name="formatResetDuration should return correct reset time if duration is 2 hours" time="0.005">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 1 hour" name="formatResetDuration should return correct reset time if duration is 1 hour" time="0.001">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 1 minute" name="formatResetDuration should return correct reset time if duration is 1 minute" time="0">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 2 minutes" name="formatResetDuration should return correct reset time if duration is 2 minutes" time="0.001">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 3 minutes" name="formatResetDuration should return correct reset time if duration is 3 minutes" time="0.001">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 60 minutes" name="formatResetDuration should return correct reset time if duration is 60 minutes" time="0.001">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 110 minutes" name="formatResetDuration should return correct reset time if duration is 110 minutes" time="0.001">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 120 minutes" name="formatResetDuration should return correct reset time if duration is 120 minutes" time="0.001">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 20 seconds" name="formatResetDuration should return correct reset time if duration is 20 seconds" time="0">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 75 seconds" name="formatResetDuration should return correct reset time if duration is 75 seconds" time="0.001">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 6200 seconds" name="formatResetDuration should return correct reset time if duration is 6200 seconds" time="0.007">
    </testcase>
    <testcase classname="formatResetDuration should return correct reset time if duration is 7200 seconds" name="formatResetDuration should return correct reset time if duration is 7200 seconds" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="cryptoMathRandom" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.298" tests="1">
    <testcase classname="cryptoMathRandom should return a number between 0 and 1" name="cryptoMathRandom should return a number between 0 and 1" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Utility" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.389" tests="18">
    <testcase classname="Utility .isEmptyObject() returns true for empty objects or non-objects" name="Utility .isEmptyObject() returns true for empty objects or non-objects" time="0.003">
    </testcase>
    <testcase classname="Utility .isEmptyObject() returns false for not empty objects" name="Utility .isEmptyObject() returns false for not empty objects" time="0">
    </testcase>
    <testcase classname="Utility .getPropertyValue() returns correct values with correct type" name="Utility .getPropertyValue() returns correct values with correct type" time="0.008">
    </testcase>
    <testcase classname="Utility .getPropertyValue() handles arrays correctly" name="Utility .getPropertyValue() handles arrays correctly" time="0.001">
    </testcase>
    <testcase classname="Utility .getPropertyValue() handles nested objects correctly" name="Utility .getPropertyValue() handles nested objects correctly" time="0.001">
    </testcase>
    <testcase classname="Utility .getPropertyValue() returns cloned array to prevent unwanted changes to the source" name="Utility .getPropertyValue() returns cloned array to prevent unwanted changes to the source" time="0.004">
    </testcase>
    <testcase classname="Utility .getPropertyValue() returns deeply cloned object to prevent unwanted changes to the source" name="Utility .getPropertyValue() returns deeply cloned object to prevent unwanted changes to the source" time="0.003">
    </testcase>
    <testcase classname="Utility .isDeepEqual() simple data types null" name="Utility .isDeepEqual() simple data types null" time="0">
    </testcase>
    <testcase classname="Utility .isDeepEqual() simple data types undefined" name="Utility .isDeepEqual() simple data types undefined" time="0">
    </testcase>
    <testcase classname="Utility .isDeepEqual() simple data types string" name="Utility .isDeepEqual() simple data types string" time="0.001">
    </testcase>
    <testcase classname="Utility .isDeepEqual() simple data types number" name="Utility .isDeepEqual() simple data types number" time="0.001">
    </testcase>
    <testcase classname="Utility .isDeepEqual() simple data types boolean" name="Utility .isDeepEqual() simple data types boolean" time="0">
    </testcase>
    <testcase classname="Utility .isDeepEqual() simple data types special cases" name="Utility .isDeepEqual() simple data types special cases" time="0.002">
    </testcase>
    <testcase classname="Utility .isDeepEqual() arrays and objects works with arrays" name="Utility .isDeepEqual() arrays and objects works with arrays" time="0.005">
    </testcase>
    <testcase classname="Utility .isDeepEqual() arrays and objects works with objects" name="Utility .isDeepEqual() arrays and objects works with objects" time="0.001">
    </testcase>
    <testcase classname="Utility .isDeepEqual() complex values works as expected" name="Utility .isDeepEqual() complex values works as expected" time="0.001">
    </testcase>
    <testcase classname="Utility .isDeepEqual() .unique() filters out duplicate array objects with provided key" name="Utility .isDeepEqual() .unique() filters out duplicate array objects with provided key" time="0.001">
    </testcase>
    <testcase classname="Utility .isDeepEqual() .unique() works with faulty arguments" name="Utility .isDeepEqual() .unique() works with faulty arguments" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Url" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.269" tests="10">
    <testcase classname="Url https://app.deriv.com assert mocking globals is working" name="Url https://app.deriv.com assert mocking globals is working" time="0.007">
    </testcase>
    <testcase classname="Url https://app.deriv.com .urlFor() returns home as default" name="Url https://app.deriv.com .urlFor() returns home as default" time="0.001">
    </testcase>
    <testcase classname="Url https://app.deriv.com .urlFor() accepts params" name="Url https://app.deriv.com .urlFor() accepts params" time="0.001">
    </testcase>
    <testcase classname="Url https://app.deriv.com .urlFor() returns the correct language" name="Url https://app.deriv.com .urlFor() returns the correct language" time="0.001">
    </testcase>
    <testcase classname="Url https://app.deriv.com .urlFor() ignores invalid characters" name="Url https://app.deriv.com .urlFor() ignores invalid characters" time="0">
    </testcase>
    <testcase classname="Url https://app.deriv.com .urlFor() handles all valid characters" name="Url https://app.deriv.com .urlFor() handles all valid characters" time="0">
    </testcase>
    <testcase classname="Url https://app.deriv.com .websiteUrl() returns expected value" name="Url https://app.deriv.com .websiteUrl() returns expected value" time="0">
    </testcase>
    <testcase classname="Url https://app.deriv.com getPath should return param values in params as a part of path" name="Url https://app.deriv.com getPath should return param values in params as a part of path" time="0.001">
    </testcase>
    <testcase classname="Url https://app.deriv.com getPath should return path as before if there is no params" name="Url https://app.deriv.com getPath should return path as before if there is no params" time="0">
    </testcase>
    <testcase classname="Url https://app.deriv.com getContractPath should return the path of contract with contract_id passed" name="Url https://app.deriv.com getContractPath should return the path of contract with contract_id passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="shuffleArray" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.227" tests="1">
    <testcase classname="shuffleArray shuffleArray should return same shuffled array" name="shuffleArray shuffleArray should return same shuffled array" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getCardLabels" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.285" tests="19">
    <testcase classname="getCardLabels should return an object with card labels, e.g. such as Apply" name="getCardLabels should return an object with card labels, e.g. such as Apply" time="0.002">
    </testcase>
    <testcase classname="getMarketNamesMap should return an object with symbols, e.g. such as AUD/CAD" name="getMarketNamesMap should return an object with symbols, e.g. such as AUD/CAD" time="0.001">
    </testcase>
    <testcase classname="getMarketNamesMap should return an object with symbols, including Volatility 25 (1s) Index, Volatility 50 (1s) Index and Volatility 75 (1s) Index" name="getMarketNamesMap should return an object with symbols, including Volatility 25 (1s) Index, Volatility 50 (1s) Index and Volatility 75 (1s) Index" time="0.001">
    </testcase>
    <testcase classname="getUnsupportedContracts should return an object with unsupported contracts, e.g. such as Spread Up" name="getUnsupportedContracts should return an object with unsupported contracts, e.g. such as Spread Up" time="0">
    </testcase>
    <testcase classname="getUnsupportedContracts should not return TICKHIGH as a part of unsupported contracts" name="getUnsupportedContracts should not return TICKHIGH as a part of unsupported contracts" time="0.001">
    </testcase>
    <testcase classname="getSupportedContracts should return an object with specific supported contracts if is_high_low === true" name="getSupportedContracts should return an object with specific supported contracts if is_high_low === true" time="0.001">
    </testcase>
    <testcase classname="getSupportedContracts should return an object with specific supported contracts if is_high_low === false" name="getSupportedContracts should return an object with specific supported contracts if is_high_low === false" time="0.001">
    </testcase>
    <testcase classname="getSupportedContracts should return TICKHIGH as a part of supported contracts" name="getSupportedContracts should return TICKHIGH as a part of supported contracts" time="0">
    </testcase>
    <testcase classname="getContractConfig should return an object with specific contracts if is_high_low === true" name="getContractConfig should return an object with specific contracts if is_high_low === true" time="0.007">
    </testcase>
    <testcase classname="getContractConfig should return object with specific contracts if is_high_low === false" name="getContractConfig should return object with specific contracts if is_high_low === false" time="0.001">
    </testcase>
    <testcase classname="getContractTypeDisplay should return a specific button name if show_button_name === true and contract_config has a button_name field" name="getContractTypeDisplay should return a specific button name if show_button_name === true and contract_config has a button_name field" time="0.001">
    </testcase>
    <testcase classname="getContractTypeDisplay should return a specific contract name if show_button_name === false but contract_config has a button_name field" name="getContractTypeDisplay should return a specific contract name if show_button_name === false but contract_config has a button_name field" time="0.001">
    </testcase>
    <testcase classname="getContractTypeDisplay should return a specific contract name if show_button_name === true but contract_config has no button_name field" name="getContractTypeDisplay should return a specific contract name if show_button_name === true but contract_config has no button_name field" time="0.001">
    </testcase>
    <testcase classname="getContractTypeDisplay should return an empty string if show_button_name === false and contract_config has no name field" name="getContractTypeDisplay should return an empty string if show_button_name === false and contract_config has no name field" time="0.001">
    </testcase>
    <testcase classname="getContractTypeDisplay should return an empty string if show_button_name === true and contract_config has no name field and no button_name" name="getContractTypeDisplay should return an empty string if show_button_name === true and contract_config has no name field and no button_name" time="0.001">
    </testcase>
    <testcase classname="getContractTypePosition should return a specific button position if such type exist" name="getContractTypePosition should return a specific button position if such type exist" time="0.001">
    </testcase>
    <testcase classname="getContractTypePosition should return a top position if such type does not exist" name="getContractTypePosition should return a top position if such type does not exist" time="0">
    </testcase>
    <testcase classname="getCleanedUpCategories should return only those trade categories that are objects containing value &amp; text" name="getCleanedUpCategories should return only those trade categories that are objects containing value &amp; text" time="0.001">
    </testcase>
    <testcase classname="getCleanedUpCategories should return only those trade categories that do not have disabled feature flag" name="getCleanedUpCategories should return only those trade categories that do not have disabled feature flag" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Adapter functions tests" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.264" tests="2">
    <testcase classname="Adapter functions tests should return the correct IDV form values" name="Adapter functions tests should return the correct IDV form values" time="0.002">
    </testcase>
    <testcase classname="Adapter functions tests should render the correct IDV form values when document type is not applicable" name="Adapter functions tests should render the correct IDV form values when document type is not applicable" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isRouteVisible" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.235" tests="5">
    <testcase classname="isRouteVisible should return true if route needs user to be authenticated and user is logged in" name="isRouteVisible should return true if route needs user to be authenticated and user is logged in" time="0.001">
    </testcase>
    <testcase classname="isRouteVisible should return false if route needs user to be authenticated and user is not logged in" name="isRouteVisible should return false if route needs user to be authenticated and user is not logged in" time="0.001">
    </testcase>
    <testcase classname="isRouteVisible should return true if route does not need user to be authenticated and user is not logged in" name="isRouteVisible should return true if route does not need user to be authenticated and user is not logged in" time="0">
    </testcase>
    <testcase classname="isRouteVisible should return true if route does not need user to be authenticated and user is logged in" name="isRouteVisible should return true if route does not need user to be authenticated and user is logged in" time="0">
    </testcase>
    <testcase classname="isRouteVisible should return true if user is trying to get to my-ads subroute in p2p" name="isRouteVisible should return true if user is trying to get to my-ads subroute in p2p" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Errors" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.249" tests="8">
    <testcase classname="Errors should add a new error to the errors" name="Errors should add a new error to the errors" time="0.002">
    </testcase>
    <testcase classname="Errors should not add an error if already existed" name="Errors should not add an error if already existed" time="0">
    </testcase>
    <testcase classname="Errors should return all errors" name="Errors should return all errors" time="0.001">
    </testcase>
    <testcase classname="Errors should return first error if attribute exists" name="Errors should return first error if attribute exists" time="0">
    </testcase>
    <testcase classname="Errors should return data if attribute exists" name="Errors should return data if attribute exists" time="0">
    </testcase>
    <testcase classname="Errors should return an empty array if attribute does not exist" name="Errors should return an empty array if attribute does not exist" time="0.001">
    </testcase>
    <testcase classname="Errors should return &quot;true&quot; if attribute exists" name="Errors should return &quot;true&quot; if attribute exists" time="0">
    </testcase>
    <testcase classname="Errors should return &quot;false&quot; if the attribute does not exist" name="Errors should return &quot;false&quot; if the attribute does not exist" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="toMoment" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.536" tests="18">
    <testcase classname="toMoment return utc epoch value date based on client epoch value passed" name="toMoment return utc epoch value date based on client epoch value passed" time="0.001">
    </testcase>
    <testcase classname="toMoment return correct date when plain string date passed" name="toMoment return correct date when plain string date passed" time="0.003">
    </testcase>
    <testcase classname="convertToUnix return correct unix value when date and time passed" name="convertToUnix return correct unix value when date and time passed" time="0.005">
    </testcase>
    <testcase classname="toGMTFormat return correct GMT value when no argument passed" name="toGMTFormat return correct GMT value when no argument passed" time="0.002">
    </testcase>
    <testcase classname="toGMTFormat return correct GMT value when argument passed" name="toGMTFormat return correct GMT value when argument passed" time="0.001">
    </testcase>
    <testcase classname="formatDate return correct response when no argument passed" name="formatDate return correct response when no argument passed" time="0.001">
    </testcase>
    <testcase classname="formatDate return correct date value when argument passed" name="formatDate return correct date value when argument passed" time="0">
    </testcase>
    <testcase classname="formatDate returns undefined when date is null and should_format_null is false" name="formatDate returns undefined when date is null and should_format_null is false" time="0">
    </testcase>
    <testcase classname="formatDate returns formatted date when date is null and should_format_null is true" name="formatDate returns formatted date when date is null and should_format_null is true" time="0.001">
    </testcase>
    <testcase classname="formatDate returns formatted date when date is not null and should_format_null is true" name="formatDate returns formatted date when date is not null and should_format_null is true" time="0.001">
    </testcase>
    <testcase classname="formatDate returns formatted date when date is not null and should_format_null is false" name="formatDate returns formatted date when date is not null and should_format_null is false" time="0">
    </testcase>
    <testcase classname="daysFromTodayTo return empty string when there is no argument passed" name="daysFromTodayTo return empty string when there is no argument passed" time="0.001">
    </testcase>
    <testcase classname="daysFromTodayTo return empty string if the user selected previous day" name="daysFromTodayTo return empty string if the user selected previous day" time="0.001">
    </testcase>
    <testcase classname="daysFromTodayTo return difference value between selected date and today" name="daysFromTodayTo return difference value between selected date and today" time="0">
    </testcase>
    <testcase classname="convertDuration getDiffDuration return correct value when argument passed" name="convertDuration getDiffDuration return correct value when argument passed" time="0.001">
    </testcase>
    <testcase classname="convertDuration formatDuration return correct value when argument passed" name="convertDuration formatDuration return correct value when argument passed" time="0.001">
    </testcase>
    <testcase classname="getTimeSince should return correct time since timestamp for each time unit" name="getTimeSince should return correct time since timestamp for each time unit" time="0.006">
    </testcase>
    <testcase classname="getTimeSince should return an empty string when called with 0" name="getTimeSince should return an empty string when called with 0" time="0">
    </testcase>
  </testsuite>
  <testsuite name="validator.ts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.354" tests="10">
    <testcase classname="validator.ts template should return a string where variables in brackets are replaced with respective items from content array" name="validator.ts template should return a string where variables in brackets are replaced with respective items from content array" time="0.002">
    </testcase>
    <testcase classname="validator.ts template should replace variables in brackets with items from content array only once, not twice" name="validator.ts template should replace variables in brackets with items from content array only once, not twice" time="0">
    </testcase>
    <testcase classname="validator.ts template should replace the 1st variable with provided content if content is a string instead of an array" name="validator.ts template should replace the 1st variable with provided content if content is a string instead of an array" time="0.001">
    </testcase>
    <testcase classname="validator.ts template should replace the variable in brackets with undefined if content is not provided" name="validator.ts template should replace the variable in brackets with undefined if content is not provided" time="0">
    </testcase>
    <testcase classname="validator.ts Validator should pass amount validation" name="validator.ts Validator should pass amount validation" time="0.003">
    </testcase>
    <testcase classname="validator.ts Validator should fail amount validation with an error from amount rules" name="validator.ts Validator should fail amount validation with an error from amount rules" time="0.001">
    </testcase>
    <testcase classname="validator.ts Validator should fail number validation with an invalid number error" name="validator.ts Validator should fail number validation with an invalid number error" time="0.002">
    </testcase>
    <testcase classname="validator.ts Validator should fail length validation with 99 chars limit error" name="validator.ts Validator should fail length validation with 99 chars limit error" time="0.005">
    </testcase>
    <testcase classname="validator.ts Validator should fail min value validation" name="validator.ts Validator should fail min value validation" time="0.001">
    </testcase>
    <testcase classname="validator.ts Validator getRuleObject should return an object" name="validator.ts Validator getRuleObject should return an object" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getFinalPrice" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.429" tests="82">
    <testcase classname="getFinalPrice should return sell_price as final price when it&apos;s available" name="getFinalPrice should return sell_price as final price when it&apos;s available" time="0.002">
    </testcase>
    <testcase classname="getFinalPrice should return sell_price as final price when sell_price &amp;&amp; bid_price are available" name="getFinalPrice should return sell_price as final price when sell_price &amp;&amp; bid_price are available" time="0.001">
    </testcase>
    <testcase classname="getFinalPrice should return bid_price as final price when sell_price is not available and bid_price is available" name="getFinalPrice should return bid_price as final price when sell_price is not available and bid_price is available" time="0">
    </testcase>
    <testcase classname="getFinalPrice should return 0 as final price when sell_price and bid_price are empty" name="getFinalPrice should return 0 as final price when sell_price and bid_price are empty" time="0.001">
    </testcase>
    <testcase classname="getIndicativePrice should return getFinalPrice if it has final price and contract is ended" name="getIndicativePrice should return getFinalPrice if it has final price and contract is ended" time="0">
    </testcase>
    <testcase classname="getIndicativePrice should return null if it doesn&apos;t have final price, bid_price and contract is not ended" name="getIndicativePrice should return null if it doesn&apos;t have final price, bid_price and contract is not ended" time="0">
    </testcase>
    <testcase classname="getIndicativePrice should return bid_price if it doesn&apos;t have final price, has bid_price and contract is not ended" name="getIndicativePrice should return bid_price if it doesn&apos;t have final price, has bid_price and contract is not ended" time="0.001">
    </testcase>
    <testcase classname="isEnded should return false when there is status and it&apos;s equal to open in contract info" name="isEnded should return false when there is status and it&apos;s equal to open in contract info" time="0">
    </testcase>
    <testcase classname="isEnded should return true when there is status and it&apos;s not equal to open in contract info" name="isEnded should return true when there is status and it&apos;s not equal to open in contract info" time="0">
    </testcase>
    <testcase classname="isEnded should return true when contract is expired" name="isEnded should return true when contract is expired" time="0.001">
    </testcase>
    <testcase classname="isEnded should return true when contract is settleable" name="isEnded should return true when contract is settleable" time="0">
    </testcase>
    <testcase classname="isEnded should return true when contract is not expired" name="isEnded should return true when contract is not expired" time="0">
    </testcase>
    <testcase classname="isEnded should return true when contract does not have is_settleable, is_expired and status" name="isEnded should return true when contract does not have is_settleable, is_expired and status" time="0.001">
    </testcase>
    <testcase classname="isUserSold should return true if contract&apos;s status is sold" name="isUserSold should return true if contract&apos;s status is sold" time="0">
    </testcase>
    <testcase classname="isUserSold should return false if contract&apos;s status is not sold" name="isUserSold should return false if contract&apos;s status is not sold" time="0">
    </testcase>
    <testcase classname="isValidToSell should return true if contract is not ended and is not sold and contract is valid to_sell" name="isValidToSell should return true if contract is not ended and is not sold and contract is valid to_sell" time="0.001">
    </testcase>
    <testcase classname="isValidToSell should return false if contract is ended and is sold and contract is valid to sell" name="isValidToSell should return false if contract is ended and is sold and contract is valid to sell" time="0">
    </testcase>
    <testcase classname="isValidToSell should return false if contract is ended and is not sold and contract is valid to sell" name="isValidToSell should return false if contract is ended and is not sold and contract is valid to sell" time="0">
    </testcase>
    <testcase classname="isValidToSell should return false if contract is ended and is sold and contract is not valid to sell" name="isValidToSell should return false if contract is ended and is sold and contract is not valid to sell" time="0">
    </testcase>
    <testcase classname="isValidToSell should return false if contract is ended and is not sold and contract is not valid to sell" name="isValidToSell should return false if contract is ended and is not sold and contract is not valid to sell" time="0.001">
    </testcase>
    <testcase classname="isValidToSell should return false if contract is not ended and is not sold and contract is not valid to sell" name="isValidToSell should return false if contract is not ended and is not sold and contract is not valid to sell" time="0.001">
    </testcase>
    <testcase classname="getLastTickFromTickStream should return the last tick in the tick_stream array" name="getLastTickFromTickStream should return the last tick in the tick_stream array" time="0">
    </testcase>
    <testcase classname="getLastTickFromTickStream should return an empty object if the tick_stream array is empty" name="getLastTickFromTickStream should return an empty object if the tick_stream array is empty" time="0">
    </testcase>
    <testcase classname="isDigitContract should return true if contract is digits" name="isDigitContract should return true if contract is digits" time="0.005">
    </testcase>
    <testcase classname="isDigitContract should return false if contract is not digits" name="isDigitContract should return false if contract is not digits" time="0.001">
    </testcase>
    <testcase classname="isTurbosContract should return true if contract_type includes TURBOS" name="isTurbosContract should return true if contract_type includes TURBOS" time="0">
    </testcase>
    <testcase classname="isTurbosContract should return false if contract_type does not include TURBOS" name="isTurbosContract should return false if contract_type does not include TURBOS" time="0">
    </testcase>
    <testcase classname="getDigitInfo should return an empty object when tick_stream is not in contract_info" name="getDigitInfo should return an empty object when tick_stream is not in contract_info" time="0.001">
    </testcase>
    <testcase classname="getDigitInfo should return an empty object if tick_stream data is already in digits_info" name="getDigitInfo should return an empty object if tick_stream data is already in digits_info" time="0">
    </testcase>
    <testcase classname="getDigitInfo should return a digits_info object with the latest tick_stream array data" name="getDigitInfo should return a digits_info object with the latest tick_stream array data" time="0">
    </testcase>
    <testcase classname="getDisplayStatus should return won if contract is ended and profit is more than zero" name="getDisplayStatus should return won if contract is ended and profit is more than zero" time="0">
    </testcase>
    <testcase classname="getDisplayStatus should return lost if contract is ended and profit is less than zero" name="getDisplayStatus should return lost if contract is ended and profit is less than zero" time="0">
    </testcase>
    <testcase classname="getDisplayStatus should return won if contract is ended and profit is zero" name="getDisplayStatus should return won if contract is ended and profit is zero" time="0">
    </testcase>
    <testcase classname="getDisplayStatus should return purchased if contract is not ended" name="getDisplayStatus should return purchased if contract is not ended" time="0.001">
    </testcase>
    <testcase classname="isAccumulatorContract should return true if contract_type includes CONTRACT_TYPES.ACCUMULATOR" name="isAccumulatorContract should return true if contract_type includes CONTRACT_TYPES.ACCUMULATOR" time="0">
    </testcase>
    <testcase classname="isAccumulatorContract should return false if contract_type is not CONTRACT_TYPES.ACCUMULATOR" name="isAccumulatorContract should return false if contract_type is not CONTRACT_TYPES.ACCUMULATOR" time="0.001">
    </testcase>
    <testcase classname="isTicksContract should return true if contract_type includes CONTRACT_TYPES.TICK_HIGH_LOW.HIGH" name="isTicksContract should return true if contract_type includes CONTRACT_TYPES.TICK_HIGH_LOW.HIGH" time="0">
    </testcase>
    <testcase classname="isTicksContract should return false if contract_type is not CONTRACT_TYPES.TICK" name="isTicksContract should return false if contract_type is not CONTRACT_TYPES.TICK" time="0">
    </testcase>
    <testcase classname="isAccumulatorContractOpen should return true if contract_type includes CONTRACT_TYPES.ACCUMULATOR, status is open, and current spot has NOT crossed barriers" name="isAccumulatorContractOpen should return true if contract_type includes CONTRACT_TYPES.ACCUMULATOR, status is open, and current spot has NOT crossed barriers" time="0">
    </testcase>
    <testcase classname="isAccumulatorContractOpen should return false if contract_type is not CONTRACT_TYPES.ACCUMULATOR" name="isAccumulatorContractOpen should return false if contract_type is not CONTRACT_TYPES.ACCUMULATOR" time="0.001">
    </testcase>
    <testcase classname="isAccumulatorContractOpen should return false if status is not open" name="isAccumulatorContractOpen should return false if status is not open" time="0">
    </testcase>
    <testcase classname="isAccumulatorContractOpen should return false if exit_tick_time is present" name="isAccumulatorContractOpen should return false if exit_tick_time is present" time="0">
    </testcase>
    <testcase classname="isOpen isOpen returns true for an open contract" name="isOpen isOpen returns true for an open contract" time="0.001">
    </testcase>
    <testcase classname="isOpen isOpen returns false for a closed contract" name="isOpen isOpen returns false for a closed contract" time="0">
    </testcase>
    <testcase classname="isOpen isOpen returns false for an accumulator contract that has recently lost" name="isOpen isOpen returns false for an accumulator contract that has recently lost" time="0">
    </testcase>
    <testcase classname="isOpen isOpen returns false for an accumulator contract that has recently won" name="isOpen isOpen returns false for an accumulator contract that has recently won" time="0">
    </testcase>
    <testcase classname="getAccuBarriersDefaultTimeout should return DELAY_TIME_1S_SYMBOL * 2 if symbols_2s array includes current symbol" name="getAccuBarriersDefaultTimeout should return DELAY_TIME_1S_SYMBOL * 2 if symbols_2s array includes current symbol" time="0.001">
    </testcase>
    <testcase classname="getAccuBarriersDefaultTimeout should return DELAY_TIME_1S_SYMBOL if symbols_2s array does NOT include current symbol" name="getAccuBarriersDefaultTimeout should return DELAY_TIME_1S_SYMBOL if symbols_2s array does NOT include current symbol" time="0">
    </testcase>
    <testcase classname="getAccuBarriersDTraderTimeout should return a timeout equal to difference between target time and current barriers receival time for 2-second symbol" name="getAccuBarriersDTraderTimeout should return a timeout equal to difference between target time and current barriers receival time for 2-second symbol" time="0">
    </testcase>
    <testcase classname="getAccuBarriersDTraderTimeout should return a timeout equal to difference between target time and current barriers receival time for 1-second symbol" name="getAccuBarriersDTraderTimeout should return a timeout equal to difference between target time and current barriers receival time for 1-second symbol" time="0.001">
    </testcase>
    <testcase classname="getAccuBarriersDTraderTimeout should return a default timeout when has_default_timeout is true, or when tick_update_timestamp is null" name="getAccuBarriersDTraderTimeout should return a default timeout when has_default_timeout is true, or when tick_update_timestamp is null" time="0">
    </testcase>
    <testcase classname="getAccuBarriersDTraderTimeout should return 0 timeout when current barriers receival happens too late (after/at target time) and timeout is no longer applicable" name="getAccuBarriersDTraderTimeout should return 0 timeout when current barriers receival happens too late (after/at target time) and timeout is no longer applicable" time="0.001">
    </testcase>
    <testcase classname="getAccuBarriersForContractDetails should return an object { accu_high_barrier: current_spot_high_barrier, accu_low_barrier: current_spot_low_barrier } while ACCUMULATOR contract is open" name="getAccuBarriersForContractDetails should return an object { accu_high_barrier: current_spot_high_barrier, accu_low_barrier: current_spot_low_barrier } while ACCUMULATOR contract is open" time="0.001">
    </testcase>
    <testcase classname="getAccuBarriersForContractDetails should return an object { accu_high_barrier: high_barrier, accu_low_barrier: low_barrier } if status is not open" name="getAccuBarriersForContractDetails should return an object { accu_high_barrier: high_barrier, accu_low_barrier: low_barrier } if status is not open" time="0">
    </testcase>
    <testcase classname="getAccuBarriersForContractDetails should return an object { accu_high_barrier: high_barrier, accu_low_barrier: low_barrier } if exit_tick_time is present" name="getAccuBarriersForContractDetails should return an object { accu_high_barrier: high_barrier, accu_low_barrier: low_barrier } if exit_tick_time is present" time="0.001">
    </testcase>
    <testcase classname="getAccuBarriersForContractDetails should return an empty object if contract type is not ACCUMULATOR" name="getAccuBarriersForContractDetails should return an empty object if contract type is not ACCUMULATOR" time="0.002">
    </testcase>
    <testcase classname="getContractStatus should return original status for non-accumulator contracts" name="getContractStatus should return original status for non-accumulator contracts" time="0.001">
    </testcase>
    <testcase classname="getContractStatus should return &quot;open&quot; for accumulator contracts without exit_tick_time and with open status" name="getContractStatus should return &quot;open&quot; for accumulator contracts without exit_tick_time and with open status" time="0">
    </testcase>
    <testcase classname="getContractStatus should return &quot;lost&quot; for accumulator contracts with profit less than 0 and exit_tick_time present" name="getContractStatus should return &quot;lost&quot; for accumulator contracts with profit less than 0 and exit_tick_time present" time="0">
    </testcase>
    <testcase classname="getContractStatus should return &quot;won&quot; for accumulator contracts with profit &gt;= 0 and status !== &quot;open&quot;" name="getContractStatus should return &quot;won&quot; for accumulator contracts with profit &gt;= 0 and status !== &quot;open&quot;" time="0">
    </testcase>
    <testcase classname="getLastContractMarkerIndex should return index of a marker that has the biggest date_start" name="getLastContractMarkerIndex should return index of a marker that has the biggest date_start" time="0">
    </testcase>
    <testcase classname="getLastContractMarkerIndex should return index of the last marker if a marker with the biggest date_start is not found" name="getLastContractMarkerIndex should return index of the last marker if a marker with the biggest date_start is not found" time="0.001">
    </testcase>
    <testcase classname="getLocalizedTurbosSubtype should return an empty string for non-turbos contracts" name="getLocalizedTurbosSubtype should return an empty string for non-turbos contracts" time="0.009">
    </testcase>
    <testcase classname="getLocalizedTurbosSubtype should render &quot;Long&quot; for CONTRACT_TYPES.TURBOS.LONG contract" name="getLocalizedTurbosSubtype should render &quot;Long&quot; for CONTRACT_TYPES.TURBOS.LONG contract" time="0.004">
    </testcase>
    <testcase classname="getLocalizedTurbosSubtype should render &quot;Short&quot; for CONTRACT_TYPES.TURBOS.SHORT contract" name="getLocalizedTurbosSubtype should render &quot;Short&quot; for CONTRACT_TYPES.TURBOS.SHORT contract" time="0.002">
    </testcase>
    <testcase classname="getSortedTradeTypes should return an unchanged array if it does not contain turbos or multipliers" name="getSortedTradeTypes should return an unchanged array if it does not contain turbos or multipliers" time="0">
    </testcase>
    <testcase classname="getSortedTradeTypes should return an array with turboslong as the 1st element if multipliers are not present" name="getSortedTradeTypes should return an array with turboslong as the 1st element if multipliers are not present" time="0">
    </testcase>
    <testcase classname="getSortedTradeTypes should return an array with multipliers as the 1st element if turboslong is not present" name="getSortedTradeTypes should return an array with multipliers as the 1st element if turboslong is not present" time="0.001">
    </testcase>
    <testcase classname="getSortedTradeTypes should return an array with turboslong as the 1st element and disregard multipliers" name="getSortedTradeTypes should return an array with turboslong as the 1st element and disregard multipliers" time="0">
    </testcase>
    <testcase classname="getSortedTradeTypes should return an empty array if called with empty arguments or an empty array" name="getSortedTradeTypes should return an empty array if called with empty arguments or an empty array" time="0.001">
    </testcase>
    <testcase classname="isSmartTraderContract should return true if contract_type is RUN|EXPIRY|RANGE|UPORDOWN|ASIAN|RESET" name="isSmartTraderContract should return true if contract_type is RUN|EXPIRY|RANGE|UPORDOWN|ASIAN|RESET" time="0.001">
    </testcase>
    <testcase classname="isSmartTraderContract should return false if contract_type is not RUN|EXPIRY|RANGE|UPORDOWN|ASIAN|RESET" name="isSmartTraderContract should return false if contract_type is not RUN|EXPIRY|RANGE|UPORDOWN|ASIAN|RESET" time="0">
    </testcase>
    <testcase classname="isSmartTraderContract should return false if contract_type was not passed" name="isSmartTraderContract should return false if contract_type was not passed" time="0">
    </testcase>
    <testcase classname="isResetContract should return true if contract_type is RESET" name="isResetContract should return true if contract_type is RESET" time="0">
    </testcase>
    <testcase classname="isResetContract should return false if contract_type is not RESET" name="isResetContract should return false if contract_type is not RESET" time="0.001">
    </testcase>
    <testcase classname="isResetContract should return false if contract_type was not passed" name="isResetContract should return false if contract_type was not passed" time="0">
    </testcase>
    <testcase classname="isAsiansContract should return true if contract_type is ASIAN" name="isAsiansContract should return true if contract_type is ASIAN" time="0.001">
    </testcase>
    <testcase classname="isAsiansContract should return false if contract_type is not ASIAN" name="isAsiansContract should return false if contract_type is not ASIAN" time="0.001">
    </testcase>
    <testcase classname="isAsiansContract should return false if contract_type was not passed" name="isAsiansContract should return false if contract_type was not passed" time="0">
    </testcase>
    <testcase classname="hasTwoBarriers should return true if contract_type is EXPIRY|RANGE|UPORDOWN" name="hasTwoBarriers should return true if contract_type is EXPIRY|RANGE|UPORDOWN" time="0">
    </testcase>
    <testcase classname="hasTwoBarriers should return false if contract_type is not EXPIRY" name="hasTwoBarriers should return false if contract_type is not EXPIRY" time="0.001">
    </testcase>
    <testcase classname="hasTwoBarriers should return false if contract_type was not passed" name="hasTwoBarriers should return false if contract_type was not passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="RouteWithSubRoutes component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="0.737" tests="2">
    <testcase classname="RouteWithSubRoutes component should render the &quot;RouteWithSubRoutes&quot; component" name="RouteWithSubRoutes component should render the &quot;RouteWithSubRoutes&quot; component" time="0.009">
    </testcase>
    <testcase classname="RouteWithSubRoutes component should render properties" name="RouteWithSubRoutes component should render properties" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="formatStatementTransaction" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:39" time="0.653" tests="2">
    <testcase classname="formatStatementTransaction should return an object with values of object passed as argument" name="formatStatementTransaction should return an object with values of object passed as argument" time="0.003">
    </testcase>
    <testcase classname="formatStatementTransaction should return payout, amount and balance as -" name="formatStatementTransaction should return payout, amount and balance as -" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Helpers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:39" time="1.336" tests="9">
    <testcase classname="Helpers findRouteByPath should return undefined when path is not in routes_config" name="Helpers findRouteByPath should return undefined when path is not in routes_config" time="0.002">
    </testcase>
    <testcase classname="Helpers findRouteByPath should return route_info when path is in routes_config and is not nested" name="Helpers findRouteByPath should return route_info when path is in routes_config and is not nested" time="0">
    </testcase>
    <testcase classname="Helpers findRouteByPath should return route_info of parent route when path is in routes_config child level and is nested" name="Helpers findRouteByPath should return route_info of parent route when path is in routes_config child level and is nested" time="0.002">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return true if route needs user to be authenticated and user is logged in" name="Helpers isRouteVisible should return true if route needs user to be authenticated and user is logged in" time="0">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return false if route needs user to be authenticated and user is not logged in" name="Helpers isRouteVisible should return false if route needs user to be authenticated and user is not logged in" time="0.001">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is not logged in" name="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is not logged in" time="0">
    </testcase>
    <testcase classname="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is logged in" name="Helpers isRouteVisible should return true if route does not need user to be authenticated and user is logged in" time="0">
    </testcase>
    <testcase classname="Helpers getPath should return param values in params as a part of path" name="Helpers getPath should return param values in params as a part of path" time="0.001">
    </testcase>
    <testcase classname="Helpers getPath should return path as before if there is no params" name="Helpers getPath should return path as before if there is no params" time="0">
    </testcase>
  </testsuite>
  <testsuite name="OpenPositionsTable" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:38" time="1.76" tests="3">
    <testcase classname="OpenPositionsTable should render &quot;Loading&quot; component when &quot;is_loading&quot; property is passed and it&apos;s value is &quot;true&quot;" name="OpenPositionsTable should render &quot;Loading&quot; component when &quot;is_loading&quot; property is passed and it&apos;s value is &quot;true&quot;" time="0.008">
    </testcase>
    <testcase classname="OpenPositionsTable should render &quot;DataTable&quot; component and it&apos;s properties when &quot;is_loading&quot; property is &quot;false&quot; and the &quot;currency&quot; property is passed in the &quot;desktop&quot; view" name="OpenPositionsTable should render &quot;DataTable&quot; component and it&apos;s properties when &quot;is_loading&quot; property is &quot;false&quot; and the &quot;currency&quot; property is passed in the &quot;desktop&quot; view" time="0.02">
    </testcase>
    <testcase classname="OpenPositionsTable should render &quot;DataList&quot; component and it&apos;s properties when &quot;is_loading&quot; property is &quot;false&quot; and the &quot;currency&quot; property is passed in the &quot;mobile&quot; view" name="OpenPositionsTable should render &quot;DataList&quot; component and it&apos;s properties when &quot;is_loading&quot; property is &quot;false&quot; and the &quot;currency&quot; property is passed in the &quot;mobile&quot; view" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BlockUserEmpty /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:39" time="1.546" tests="2">
    <testcase classname="&lt;BlockUserEmpty /&gt; should render &lt;BlockUserEmpty/&gt; component in desktop view" name="&lt;BlockUserEmpty /&gt; should render &lt;BlockUserEmpty/&gt; component in desktop view" time="0.016">
    </testcase>
    <testcase classname="&lt;BlockUserEmpty /&gt; should render &lt;BlockUserEmpty /&gt; component in mobile view" name="&lt;BlockUserEmpty /&gt; should render &lt;BlockUserEmpty /&gt; component in mobile view" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BlockUserList /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:39" time="2.014" tests="4">
    <testcase classname="&lt;BlockUserList /&gt; should render the BlockUserList component" name="&lt;BlockUserList /&gt; should render the BlockUserList component" time="0.034">
    </testcase>
    <testcase classname="&lt;BlockUserList /&gt; should render the loading screen if is_loading is true" name="&lt;BlockUserList /&gt; should render the loading screen if is_loading is true" time="0.003">
    </testcase>
    <testcase classname="&lt;BlockUserList /&gt; should show error message if error_code has TemporaryBar and block_unblock_user_error has an error message" name="&lt;BlockUserList /&gt; should show error message if error_code has TemporaryBar and block_unblock_user_error has an error message" time="0.004">
    </testcase>
    <testcase classname="&lt;BlockUserList /&gt; should call onSearch function when searching for advertiser" name="&lt;BlockUserList /&gt; should call onSearch function when searching for advertiser" time="0.086">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BlockUserDropdown /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:39" time="1.769" tests="2">
    <testcase classname="&lt;BlockUserDropdown /&gt; should render BlockUserDropdown with default sorting as all_users" name="&lt;BlockUserDropdown /&gt; should render BlockUserDropdown with default sorting as all_users" time="0.019">
    </testcase>
    <testcase classname="&lt;BlockUserDropdown /&gt; should call showModal when clicking on filter icon in mobile" name="&lt;BlockUserDropdown /&gt; should call showModal when clicking on filter icon in mobile" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BlockUser /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:39" time="1.976" tests="3">
    <testcase classname="&lt;BlockUser /&gt; should render the BlockUser component" name="&lt;BlockUser /&gt; should render the BlockUser component" time="0.032">
    </testcase>
    <testcase classname="&lt;BlockUser /&gt; should call setActiveTab when clicking on pageReturn" name="&lt;BlockUser /&gt; should call setActiveTab when clicking on pageReturn" time="0.019">
    </testcase>
    <testcase classname="&lt;BlockUser /&gt; should call showModal and setBlockUnblockUserError when block_unblock_user_error changes" name="&lt;BlockUser /&gt; should call showModal and setBlockUnblockUserError when block_unblock_user_error changes" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BlockUserRow/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:40" time="1.124" tests="4">
    <testcase classname="&lt;BlockUserRow/&gt; should render BlockUserRow component" name="&lt;BlockUserRow/&gt; should render BlockUserRow component" time="0.032">
    </testcase>
    <testcase classname="&lt;BlockUserRow/&gt; should allow user to click on advertiser name if the user is not barred" name="&lt;BlockUserRow/&gt; should allow user to click on advertiser name if the user is not barred" time="0.011">
    </testcase>
    <testcase classname="&lt;BlockUserRow/&gt; should render the Block button if advertiser is not blocked and call onClickUnblock when clicked" name="&lt;BlockUserRow/&gt; should render the Block button if advertiser is not blocked and call onClickUnblock when clicked" time="0.022">
    </testcase>
    <testcase classname="&lt;BlockUserRow/&gt; should render the Unblock button if advertiser is blocked and call onClickUnblock when clicked" name="&lt;BlockUserRow/&gt; should render the Unblock button if advertiser is blocked and call onClickUnblock when clicked" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfileContent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:41" time="0.816" tests="7">
    <testcase classname="&lt;MyProfileContent /&gt; should render MyProfileStats if active_tab is MY_STATS" name="&lt;MyProfileContent /&gt; should render MyProfileStats if active_tab is MY_STATS" time="0.008">
    </testcase>
    <testcase classname="&lt;MyProfileContent /&gt; should render MyProfileForm if active_tab is AD_TEMPLATE" name="&lt;MyProfileContent /&gt; should render MyProfileForm if active_tab is AD_TEMPLATE" time="0.006">
    </testcase>
    <testcase classname="&lt;MyProfileContent /&gt; should render BlockUser if active_tab is MY_COUNTERPARTIES" name="&lt;MyProfileContent /&gt; should render BlockUser if active_tab is MY_COUNTERPARTIES" time="0.002">
    </testcase>
    <testcase classname="&lt;MyProfileContent /&gt; should render PaymentMethods if active_tab is PAYMENT_METHODS" name="&lt;MyProfileContent /&gt; should render PaymentMethods if active_tab is PAYMENT_METHODS" time="0.015">
    </testcase>
    <testcase classname="&lt;MyProfileContent /&gt; should call hideAddPaymentMethodForm and setShouldShowEditPaymentMethodForm when clicking return icon" name="&lt;MyProfileContent /&gt; should call hideAddPaymentMethodForm and setShouldShowEditPaymentMethodForm when clicking return icon" time="0.014">
    </testcase>
    <testcase classname="&lt;MyProfileContent /&gt; should call showModal with CancelAddPaymentMethodModal if is_form_modified is true and should_show_add_payment_method_form is true" name="&lt;MyProfileContent /&gt; should call showModal with CancelAddPaymentMethodModal if is_form_modified is true and should_show_add_payment_method_form is true" time="0.01">
    </testcase>
    <testcase classname="&lt;MyProfileContent /&gt; should call showModal with CancelEditPaymentMethodModal if is_form_modified is true and should_show_edit_payment_method_form is true" name="&lt;MyProfileContent /&gt; should call showModal with CancelEditPaymentMethodModal if is_form_modified is true and should_show_edit_payment_method_form is true" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfileHeader/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:41" time="0.797" tests="2">
    <testcase classname="&lt;MyProfileHeader/&gt; renders the MyProfileHeader component with all the tabs" name="&lt;MyProfileHeader/&gt; renders the MyProfileHeader component with all the tabs" time="0.026">
    </testcase>
    <testcase classname="&lt;MyProfileHeader/&gt; can switch between tabs when a tab is clicked on" name="&lt;MyProfileHeader/&gt; can switch between tabs when a tab is clicked on" time="0.045">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BlockUserTable /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:40" time="1.957" tests="4">
    <testcase classname="&lt;BlockUserTable /&gt; should show default message when user has no trade partners" name="&lt;BlockUserTable /&gt; should show default message when user has no trade partners" time="0.017">
    </testcase>
    <testcase classname="&lt;BlockUserTable /&gt; should show loading screen if is_block_user_table_loading is true" name="&lt;BlockUserTable /&gt; should show loading screen if is_block_user_table_loading is true" time="0.004">
    </testcase>
    <testcase classname="&lt;BlockUserTable /&gt; should show default message if searched advertiser does not exist" name="&lt;BlockUserTable /&gt; should show default message if searched advertiser does not exist" time="0.003">
    </testcase>
    <testcase classname="&lt;BlockUserTable /&gt; should show trade_partners_list if it is not empty" name="&lt;BlockUserTable /&gt; should show trade_partners_list if it is not empty" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfileForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:41" time="0.791" tests="3">
    <testcase classname="&lt;MyProfileForm /&gt; should render MyProfileForm component" name="&lt;MyProfileForm /&gt; should render MyProfileForm component" time="0.03">
    </testcase>
    <testcase classname="&lt;MyProfileForm /&gt; should render the Loading component when my_profile_store.is_loading is set to true" name="&lt;MyProfileForm /&gt; should render the Loading component when my_profile_store.is_loading is set to true" time="0.005">
    </testcase>
    <testcase classname="&lt;MyProfileForm /&gt; expects the setActiveTab function to be called when return function is clicked" name="&lt;MyProfileForm /&gt; expects the setActiveTab function to be called when return function is clicked" time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentMethodsEmpty/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:41" time="0.745" tests="2">
    <testcase classname="&lt;PaymentMethodsEmpty/&gt; should render PaymentMethodsEmpty component" name="&lt;PaymentMethodsEmpty/&gt; should render PaymentMethodsEmpty component" time="0.046">
    </testcase>
    <testcase classname="&lt;PaymentMethodsEmpty/&gt; should call setActiveTab when clicking on return icon" name="&lt;PaymentMethodsEmpty/&gt; should call setActiveTab when clicking on return icon" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BlockUserTableError /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:40" time="2.004" tests="2">
    <testcase classname="&lt;BlockUserTableError /&gt; should render the BlockUserTableError component" name="&lt;BlockUserTableError /&gt; should render the BlockUserTableError component" time="0.041">
    </testcase>
    <testcase classname="&lt;BlockUserTableError /&gt; should call setActiveTab when clicking return icon" name="&lt;BlockUserTableError /&gt; should call setActiveTab when clicking return icon" time="0.07">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentMethods /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:42" time="0.927" tests="6">
    <testcase classname="&lt;PaymentMethods /&gt; should render PaymentMethods component" name="&lt;PaymentMethods /&gt; should render PaymentMethods component" time="0.04">
    </testcase>
    <testcase classname="&lt;PaymentMethods /&gt; should render Loading Component if is_loading is true" name="&lt;PaymentMethods /&gt; should render Loading Component if is_loading is true" time="0.003">
    </testcase>
    <testcase classname="&lt;PaymentMethods /&gt; should render AddPaymentMethod if should_show_add_payment_method_form is true" name="&lt;PaymentMethods /&gt; should render AddPaymentMethod if should_show_add_payment_method_form is true" time="0.003">
    </testcase>
    <testcase classname="&lt;PaymentMethods /&gt; should render EditPaymentMethodForm if should_show_edit_payment_method_form is true" name="&lt;PaymentMethods /&gt; should render EditPaymentMethodForm if should_show_edit_payment_method_form is true" time="0.003">
    </testcase>
    <testcase classname="&lt;PaymentMethods /&gt; should render PaymentMethodsEmpty if advertiser_has_payment_methods is false" name="&lt;PaymentMethods /&gt; should render PaymentMethodsEmpty if advertiser_has_payment_methods is false" time="0.003">
    </testcase>
    <testcase classname="&lt;PaymentMethods /&gt; should call getPaymentMethodsList when component mounted" name="&lt;PaymentMethods /&gt; should call getPaymentMethodsList when component mounted" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfileBalance /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:42" time="0.938" tests="2">
    <testcase classname="&lt;MyProfileBalance /&gt; should render MyProfileBalance" name="&lt;MyProfileBalance /&gt; should render MyProfileBalance" time="0.04">
    </testcase>
    <testcase classname="&lt;MyProfileBalance /&gt; should render MyProfileBalanceModal when icon is clicked on and call showModal" name="&lt;MyProfileBalance /&gt; should render MyProfileBalanceModal when icon is clicked on and call showModal" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentMethodsList /&gt; Desktop" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:42" time="1.075" tests="4">
    <testcase classname="&lt;PaymentMethodsList /&gt; Desktop should render the Loading component if data is empty" name="&lt;PaymentMethodsList /&gt; Desktop should render the Loading component if data is empty" time="0.018">
    </testcase>
    <testcase classname="&lt;PaymentMethodsList /&gt; Desktop should render PaymentMethodsList component" name="&lt;PaymentMethodsList /&gt; Desktop should render PaymentMethodsList component" time="0.078">
    </testcase>
    <testcase classname="&lt;PaymentMethodsList /&gt; Desktop should call setShouldShowAddPaymentMethodForm when clicking Add new button" name="&lt;PaymentMethodsList /&gt; Desktop should call setShouldShowAddPaymentMethodForm when clicking Add new button" time="0.055">
    </testcase>
    <testcase classname="&lt;PaymentMethodsList /&gt; Desktop should call setActiveTab when clicking return icon" name="&lt;PaymentMethodsList /&gt; Desktop should call setActiveTab when clicking return icon" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="&lt;EditPaymentMethodForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:42" time="1.087" tests="6">
    <testcase classname="&lt;EditPaymentMethodForm /&gt; should render the EditPaymentMethodForm component" name="&lt;EditPaymentMethodForm /&gt; should render the EditPaymentMethodForm component" time="0.072">
    </testcase>
    <testcase classname="&lt;EditPaymentMethodForm /&gt; should render the Loading component if payment_method_info is empty" name="&lt;EditPaymentMethodForm /&gt; should render the Loading component if payment_method_info is empty" time="0.004">
    </testcase>
    <testcase classname="&lt;EditPaymentMethodForm /&gt; should call setShouldShowEditPaymentMethodForm if form fields are filled when clicking page return" name="&lt;EditPaymentMethodForm /&gt; should call setShouldShowEditPaymentMethodForm if form fields are filled when clicking page return" time="0.019">
    </testcase>
    <testcase classname="&lt;EditPaymentMethodForm /&gt; should call setPaymentMethodToEdit and setShouldShowEditPaymentMethodForm if form fields are filled when clicking Cancel button" name="&lt;EditPaymentMethodForm /&gt; should call setPaymentMethodToEdit and setShouldShowEditPaymentMethodForm if form fields are filled when clicking Cancel button" time="0.027">
    </testcase>
    <testcase classname="&lt;EditPaymentMethodForm /&gt; should call showModal if form fields are not filled when clicking page return" name="&lt;EditPaymentMethodForm /&gt; should call showModal if form fields are not filled when clicking page return" time="0.044">
    </testcase>
    <testcase classname="&lt;EditPaymentMethodForm /&gt; should call showModal if form fields are not filled when clicking Cancel button" name="&lt;EditPaymentMethodForm /&gt; should call showModal if form fields are not filled when clicking Cancel button" time="0.048">
    </testcase>
  </testsuite>
  <testsuite name="&lt;NoAds/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:42" time="0.848" tests="3">
    <testcase classname="&lt;NoAds/&gt; should render the component" name="&lt;NoAds/&gt; should render the component" time="0.014">
    </testcase>
    <testcase classname="&lt;NoAds/&gt; should display &quot;You have no ads 😞&quot; when is_ads_page is true" name="&lt;NoAds/&gt; should display &quot;You have no ads 😞&quot; when is_ads_page is true" time="0.004">
    </testcase>
    <testcase classname="&lt;NoAds/&gt; should handle onclick of create ad button" name="&lt;NoAds/&gt; should handle onclick of create ad button" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfilePrivacy /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:42" time="0.895" tests="1">
    <testcase classname="&lt;MyProfilePrivacy /&gt; should render the MyProfilePrivacy component" name="&lt;MyProfilePrivacy /&gt; should render the MyProfilePrivacy component" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfileDetailsTable /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:43" time="0.919" tests="2">
    <testcase classname="&lt;MyProfileDetailsTable /&gt; should render MyProfileDetailsTable component" name="&lt;MyProfileDetailsTable /&gt; should render MyProfileDetailsTable component" time="0.026">
    </testcase>
    <testcase classname="&lt;MyProfileDetailsTable /&gt; should render MyProfileDetailsTable component" name="&lt;MyProfileDetailsTable /&gt; should render MyProfileDetailsTable component" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfileDetailsContainer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:43" time="0.784" tests="1">
    <testcase classname="&lt;MyProfileDetailsContainer /&gt; should render MyProfileDetailsContainer component" name="&lt;MyProfileDetailsContainer /&gt; should render MyProfileDetailsContainer component" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfileStats /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:43" time="0.811" tests="3">
    <testcase classname="&lt;MyProfileStats /&gt; should render MyProfileStats component showing all 4 tabs if isMobile is true" name="&lt;MyProfileStats /&gt; should render MyProfileStats component showing all 4 tabs if isMobile is true" time="0.037">
    </testcase>
    <testcase classname="&lt;MyProfileStats /&gt; should allow the user to press the return button in MobileFullPageModal" name="&lt;MyProfileStats /&gt; should allow the user to press the return button in MobileFullPageModal" time="0.032">
    </testcase>
    <testcase classname="&lt;MyProfileStats /&gt; should allow a user to click on each different tab, which should call setShouldShowStatsAndRatings and setActiveTab" name="&lt;MyProfileStats /&gt; should allow a user to click on each different tab, which should call setShouldShowStatsAndRatings and setActiveTab" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfileStatsTable /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:43" time="0.855" tests="3">
    <testcase classname="&lt;MyProfileStatsTable /&gt; should render MyProfileStatsTable" name="&lt;MyProfileStatsTable /&gt; should render MyProfileStatsTable" time="0.053">
    </testcase>
    <testcase classname="&lt;MyProfileStatsTable /&gt; should render be able to switch between 30d and lifetime for Trade volume" name="&lt;MyProfileStatsTable /&gt; should render be able to switch between 30d and lifetime for Trade volume" time="0.056">
    </testcase>
    <testcase classname="&lt;MyProfileStatsTable /&gt; should render be able to switch between 30d and lifetime for Total orders" name="&lt;MyProfileStatsTable /&gt; should render be able to switch between 30d and lifetime for Total orders" time="0.047">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfileName /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:43" time="0.816" tests="3">
    <testcase classname="&lt;MyProfileName /&gt; should render default view for new P2P user" name="&lt;MyProfileName /&gt; should render default view for new P2P user" time="0.028">
    </testcase>
    <testcase classname="&lt;MyProfileName /&gt; should render 1 rating when rating_count is 1" name="&lt;MyProfileName /&gt; should render 1 rating when rating_count is 1" time="0.016">
    </testcase>
    <testcase classname="&lt;MyProfileName /&gt; should not render default view for long time P2P user" name="&lt;MyProfileName /&gt; should not render default view for long time P2P user" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfile /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:43" time="0.682" tests="4">
    <testcase classname="&lt;MyProfile /&gt; should render MyProfile component" name="&lt;MyProfile /&gt; should render MyProfile component" time="0.01">
    </testcase>
    <testcase classname="&lt;MyProfile /&gt; should show error message if error_message has value" name="&lt;MyProfile /&gt; should show error message if error_message has value" time="0.002">
    </testcase>
    <testcase classname="&lt;MyProfile /&gt; should render loading component if advertiser info is empty and should_show_dp2p_blocked is false" name="&lt;MyProfile /&gt; should render loading component if advertiser info is empty and should_show_dp2p_blocked is false" time="0.002">
    </testcase>
    <testcase classname="&lt;MyProfile /&gt; should render Verification component if is_advertiser is false" name="&lt;MyProfile /&gt; should render Verification component if is_advertiser is false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BuySellFormReceiveAmount/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:44" time="0.727" tests="2">
    <testcase classname="&lt;BuySellFormReceiveAmount/&gt; should show the proper description" name="&lt;BuySellFormReceiveAmount/&gt; should show the proper description" time="0.017">
    </testcase>
    <testcase classname="&lt;BuySellFormReceiveAmount/&gt; should show the proper formatted amount and currency" name="&lt;BuySellFormReceiveAmount/&gt; should show the proper formatted amount and currency" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SortDropdown/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:44" time="0.68" tests="3">
    <testcase classname="&lt;SortDropdown/&gt; should render the mobile view containing icon" name="&lt;SortDropdown/&gt; should render the mobile view containing icon" time="0.012">
    </testcase>
    <testcase classname="&lt;SortDropdown/&gt; should invoke isSortDropDown method on click" name="&lt;SortDropdown/&gt; should invoke isSortDropDown method on click" time="0.004">
    </testcase>
    <testcase classname="&lt;SortDropdown/&gt; should render dropdown in desktop view" name="&lt;SortDropdown/&gt; should render dropdown in desktop view" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Orders/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:44" time="0.774" tests="3">
    <testcase classname="&lt;Orders/&gt; should invoke setup methods on component load" name="&lt;Orders/&gt; should invoke setup methods on component load" time="0.011">
    </testcase>
    <testcase classname="&lt;Orders/&gt; should list all orders via Order table component" name="&lt;Orders/&gt; should list all orders via Order table component" time="0.002">
    </testcase>
    <testcase classname="&lt;Orders/&gt; should display the order details for a particular " name="&lt;Orders/&gt; should display the order details for a particular " time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Orders/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:44" time="0.817" tests="3">
    <testcase classname="&lt;Orders/&gt; should invoke setup methods on component load" name="&lt;Orders/&gt; should invoke setup methods on component load" time="0.01">
    </testcase>
    <testcase classname="&lt;Orders/&gt; should list all orders via Order table component" name="&lt;Orders/&gt; should list all orders via Order table component" time="0.002">
    </testcase>
    <testcase classname="&lt;Orders/&gt; should display the order details for a particular " name="&lt;Orders/&gt; should display the order details for a particular " time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Orders/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:44" time="0.824" tests="1">
    <testcase classname="&lt;Orders/&gt; should pass the values into OrderTableContent" name="&lt;Orders/&gt; should pass the values into OrderTableContent" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BuySellPage/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:44" time="0.964" tests="2">
    <testcase classname="&lt;BuySellPage/&gt; should render the buy/sell page" name="&lt;BuySellPage/&gt; should render the buy/sell page" time="0.011">
    </testcase>
    <testcase classname="&lt;BuySellPage/&gt; should render Verification Section when user is not verified" name="&lt;BuySellPage/&gt; should render Verification Section when user is not verified" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Chat /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:44" time="0.69" tests="1">
    <testcase classname="&lt;Chat /&gt; should remove order id and active order during unmount" name="&lt;Chat /&gt; should remove order id and active order during unmount" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ChatMessages /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:44" time="0.665" tests="1">
    <testcase classname="&lt;ChatMessages /&gt; should render the bot message with appropriate styles" name="&lt;ChatMessages /&gt; should render the bot message with appropriate styles" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AdStatus /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:45" time="0.501" tests="2">
    <testcase classname="&lt;AdStatus /&gt; Component should show proper status if is_active prop is true" name="&lt;AdStatus /&gt; Component should show proper status if is_active prop is true" time="0.01">
    </testcase>
    <testcase classname="&lt;AdStatus /&gt; Component should show proper status if is_active prop is false" name="&lt;AdStatus /&gt; Component should show proper status if is_active prop is false" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ChatHeader /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:45" time="0.648" tests="2">
    <testcase classname="&lt;ChatHeader /&gt; should show chat header with online status label" name="&lt;ChatHeader /&gt; should show chat header with online status label" time="0.013">
    </testcase>
    <testcase classname="&lt;ChatHeader /&gt; should show user&apos;s last online status" name="&lt;ChatHeader /&gt; should show user&apos;s last online status" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyAdsTable/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:45" time="0.751" tests="1">
    <testcase classname="&lt;MyAdsTable/&gt; should render the NoAds component when there are no ads" name="&lt;MyAdsTable/&gt; should render the NoAds component when there are no ads" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Advertiserpage /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:45" time="0.724" tests="3">
    <testcase classname="&lt;Advertiserpage /&gt; should render advertiser page" name="&lt;Advertiserpage /&gt; should render advertiser page" time="0.02">
    </testcase>
    <testcase classname="&lt;Advertiserpage /&gt; should handle unmount of advertiser page" name="&lt;Advertiserpage /&gt; should handle unmount of advertiser page" time="0.009">
    </testcase>
    <testcase classname="&lt;Advertiserpage /&gt; should call setCounterpartyAdvertiserId when component mounted" name="&lt;Advertiserpage /&gt; should call setCounterpartyAdvertiserId when component mounted" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ErrorComponent/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:45" time="0.552" tests="9">
    <testcase classname="&lt;ErrorComponent/&gt; should show the error message when header and message is passed" name="&lt;ErrorComponent/&gt; should show the error message when header and message is passed" time="0.015">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should show refresh message when should_show_refresh is true" name="&lt;ErrorComponent/&gt; should show refresh message when should_show_refresh is true" time="0.005">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should not show refresh message when should_show_refresh is false" name="&lt;ErrorComponent/&gt; should not show refresh message when should_show_refresh is false" time="0.003">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should show header message when header message is passed" name="&lt;ErrorComponent/&gt; should show header message when header message is passed" time="0.003">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should refresh the page when redirectOnClick is not passed" name="&lt;ErrorComponent/&gt; should refresh the page when redirectOnClick is not passed" time="0.002">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should refresh the page when redirectOnClick is not passed or empty" name="&lt;ErrorComponent/&gt; should refresh the page when redirectOnClick is not passed or empty" time="0.003">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should show the redirect button label as refresh when there is no redirect_label" name="&lt;ErrorComponent/&gt; should show the redirect button label as refresh when there is no redirect_label" time="0.008">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should trigger the history.listen and call the setError function when redirect button get clicked" name="&lt;ErrorComponent/&gt; should trigger the history.listen and call the setError function when redirect button get clicked" time="0.019">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should call location.reload when redirectOnClick is not passed should_clear_error_on_click is false and button is pressed" name="&lt;ErrorComponent/&gt; should call location.reload when redirectOnClick is not passed should_clear_error_on_click is false and button is pressed" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="RouteWithSubRoutes component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:45" time="0.342" tests="1">
    <testcase classname="RouteWithSubRoutes component should render RouteWithSubRoutes properties" name="RouteWithSubRoutes component should render RouteWithSubRoutes properties" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="useP2PAdvertiserAdverts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:45" time="0.742" tests="6">
    <testcase classname="useP2PAdvertiserAdverts should return the advertiser adverts object from response when is_advertiser_info_subscribed is true and counterparty_advertiser_id is defined" name="useP2PAdvertiserAdverts should return the advertiser adverts object from response when is_advertiser_info_subscribed is true and counterparty_advertiser_id is defined" time="0.008">
    </testcase>
    <testcase classname="useP2PAdvertiserAdverts should return the advertiser adverts object from response when is_advertiser_info_subscribed is false and counterparty_advertiser_id is defined" name="useP2PAdvertiserAdverts should return the advertiser adverts object from response when is_advertiser_info_subscribed is false and counterparty_advertiser_id is defined" time="0.003">
    </testcase>
    <testcase classname="useP2PAdvertiserAdverts should return the advertiser adverts object from response when is_advertiser_info_subscribed is false and counterparty_advertiser_id is undefined" name="useP2PAdvertiserAdverts should return the advertiser adverts object from response when is_advertiser_info_subscribed is false and counterparty_advertiser_id is undefined" time="0.003">
    </testcase>
    <testcase classname="useP2PAdvertiserAdverts should return the advertiser adverts object from response when is_advertiser_info_subscribed is true and counterparty_advertiser_id is undefined" name="useP2PAdvertiserAdverts should return the advertiser adverts object from response when is_advertiser_info_subscribed is true and counterparty_advertiser_id is undefined" time="0.003">
    </testcase>
    <testcase classname="useP2PAdvertiserAdverts should return the advertiser adverts object from response when selected_local_currency is truthy" name="useP2PAdvertiserAdverts should return the advertiser adverts object from response when selected_local_currency is truthy" time="0.003">
    </testcase>
    <testcase classname="useP2PAdvertiserAdverts should return the advertiser adverts object from response when selected_local_currency is falsey" name="useP2PAdvertiserAdverts should return the advertiser adverts object from response when selected_local_currency is falsey" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useP2PRenderedAdverts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:45" time="0.759" tests="13">
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response with type sell when table_type is buy" name="useP2PRenderedAdverts should return the adverts object from response with type sell when table_type is buy" time="0.012">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response with type buy when table_type is sell" name="useP2PRenderedAdverts should return the adverts object from response with type buy when table_type is sell" time="0.006">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response when selected_payment_method_value has a length &gt; 0" name="useP2PRenderedAdverts should return the adverts object from response when selected_payment_method_value has a length &gt; 0" time="0.003">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response when selected_payment_method_value has a length === 0" name="useP2PRenderedAdverts should return the adverts object from response when selected_payment_method_value has a length === 0" time="0.003">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response when selected_local_currency is defined" name="useP2PRenderedAdverts should return the adverts object from response when selected_local_currency is defined" time="0.008">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response when selected_local_currency is undefined" name="useP2PRenderedAdverts should return the adverts object from response when selected_local_currency is undefined" time="0.003">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response when should_use_client_limits is true" name="useP2PRenderedAdverts should return the adverts object from response when should_use_client_limits is true" time="0.002">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response when should_use_client_limits is false" name="useP2PRenderedAdverts should return the adverts object from response when should_use_client_limits is false" time="0.003">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response when is_buy is true" name="useP2PRenderedAdverts should return the adverts object from response when is_buy is true" time="0.009">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response when is_buy is false" name="useP2PRenderedAdverts should return the adverts object from response when is_buy is false" time="0.006">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response for adverts that match the given search_term" name="useP2PRenderedAdverts should return the adverts object from response for adverts that match the given search_term" time="0.003">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response for adverts that match the given search_term for mobile" name="useP2PRenderedAdverts should return the adverts object from response for adverts that match the given search_term for mobile" time="0.002">
    </testcase>
    <testcase classname="useP2PRenderedAdverts should return the adverts object from response for adverts for mobile when search_term is undefined" name="useP2PRenderedAdverts should return the adverts object from response for adverts for mobile when search_term is undefined" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BinaryRoutes /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:46" time="0.414" tests="1">
    <testcase classname="&lt;BinaryRoutes /&gt; should render Loading... then RouteWithSubRoutes with mocked route component" name="&lt;BinaryRoutes /&gt; should render Loading... then RouteWithSubRoutes with mocked route component" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FloatingRate/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:45" time="0.84" tests="5">
    <testcase classname="&lt;FloatingRate/&gt; should render default state of the component with hint message and increment, decrement buttons" name="&lt;FloatingRate/&gt; should render default state of the component with hint message and increment, decrement buttons" time="0.042">
    </testcase>
    <testcase classname="&lt;FloatingRate/&gt; should display error messages when error is passed as props" name="&lt;FloatingRate/&gt; should display error messages when error is passed as props" time="0.007">
    </testcase>
    <testcase classname="&lt;FloatingRate/&gt; should render market rate feed based on the floating rate value passed" name="&lt;FloatingRate/&gt; should render market rate feed based on the floating rate value passed" time="0.007">
    </testcase>
    <testcase classname="&lt;FloatingRate/&gt; should render the exchange rate in hint" name="&lt;FloatingRate/&gt; should render the exchange rate in hint" time="0.011">
    </testcase>
    <testcase classname="&lt;FloatingRate/&gt; should call onChange with the modified event object on blur" name="&lt;FloatingRate/&gt; should call onChange with the modified event object on blur" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Routes /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:45" time="0.847" tests="3">
    <testcase classname="&lt;Routes /&gt; should show error messages when has_error is true" name="&lt;Routes /&gt; should show error messages when has_error is true" time="0.017">
    </testcase>
    <testcase classname="&lt;Routes /&gt; should render BinaryRoutes component when has_error is false" name="&lt;Routes /&gt; should render BinaryRoutes component when has_error is false" time="0.002">
    </testcase>
    <testcase classname="&lt;Routes /&gt; should render Dp2pBlocked component when should_show_dp2p_blocked is true" name="&lt;Routes /&gt; should render Dp2pBlocked component when should_show_dp2p_blocked is true" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RecommendedBy /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:46" time="0.665" tests="4">
    <testcase classname="&lt;RecommendedBy /&gt; it should show `No one has recommended this trader yet` and `recommended_average` equals to 0% if there is no props passed" name="&lt;RecommendedBy /&gt; it should show `No one has recommended this trader yet` and `recommended_average` equals to 0% if there is no props passed" time="0.038">
    </testcase>
    <testcase classname="&lt;RecommendedBy /&gt; it should show `Recommended by 1 trader` and `recommended_average` equals to 100%" name="&lt;RecommendedBy /&gt; it should show `Recommended by 1 trader` and `recommended_average` equals to 100%" time="0.009">
    </testcase>
    <testcase classname="&lt;RecommendedBy /&gt; it should show `Recommended by 2 traders` and `recommended_average` equals to 50%" name="&lt;RecommendedBy /&gt; it should show `Recommended by 2 traders` and `recommended_average` equals to 50%" time="0.008">
    </testcase>
    <testcase classname="&lt;RecommendedBy /&gt; should call showModal function in mobile view" name="&lt;RecommendedBy /&gt; should call showModal function in mobile view" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradeBadge /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:46" time="0.542" tests="6">
    <testcase classname="&lt;TradeBadge /&gt; should retuen empty DOM element when trade count is less than or equal to 100, poi and poa not verified" name="&lt;TradeBadge /&gt; should retuen empty DOM element when trade count is less than or equal to 100, poi and poa not verified" time="0.01">
    </testcase>
    <testcase classname="&lt;TradeBadge /&gt; should render trade badge with trade count 100+" name="&lt;TradeBadge /&gt; should render trade badge with trade count 100+" time="0.003">
    </testcase>
    <testcase classname="&lt;TradeBadge /&gt; should render trade badge with trade count 250+" name="&lt;TradeBadge /&gt; should render trade badge with trade count 250+" time="0.002">
    </testcase>
    <testcase classname="&lt;TradeBadge /&gt; should render `250+ trades` badge if trade count more than 250+ and large is true" name="&lt;TradeBadge /&gt; should render `250+ trades` badge if trade count more than 250+ and large is true" time="0.001">
    </testcase>
    <testcase classname="&lt;TradeBadge /&gt; should render poi verified badge" name="&lt;TradeBadge /&gt; should render poi verified badge" time="0.005">
    </testcase>
    <testcase classname="&lt;TradeBadge /&gt; should render poa verified badge" name="&lt;TradeBadge /&gt; should render poa verified badge" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CalendarIcon /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:46" time="0.542" tests="1">
    <testcase classname="&lt;CalendarIcon /&gt; should render icon" name="&lt;CalendarIcon /&gt; should render icon" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentMethodCard /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:46" time="1.046" tests="4">
    <testcase classname="&lt;PaymentMethodCard /&gt; should render the PaymentMethodCard component" name="&lt;PaymentMethodCard /&gt; should render the PaymentMethodCard component" time="0.039">
    </testcase>
    <testcase classname="&lt;PaymentMethodCard /&gt; should render add PaymentMethodCard component if is_add is true" name="&lt;PaymentMethodCard /&gt; should render add PaymentMethodCard component if is_add is true" time="0.011">
    </testcase>
    <testcase classname="&lt;PaymentMethodCard /&gt; should call setPaymentMethodToEdit, setSelectedPaymentMethodDisplayName, setShouldShowEditPaymentMethodForm if Edit is pressed" name="&lt;PaymentMethodCard /&gt; should call setPaymentMethodToEdit, setSelectedPaymentMethodDisplayName, setShouldShowEditPaymentMethodForm if Edit is pressed" time="0.082">
    </testcase>
    <testcase classname="&lt;PaymentMethodCard /&gt; should call showModal if Delete is pressed" name="&lt;PaymentMethodCard /&gt; should call showModal if Delete is pressed" time="0.105">
    </testcase>
  </testsuite>
  <testsuite name="TwoMonthPicker" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:46" time="0.689" tests="1">
    <testcase classname="TwoMonthPicker should render the component" name="TwoMonthPicker should render the component" time="0.058">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CashierUnderMaintenance /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:46" time="1.088" tests="1">
    <testcase classname="&lt;CashierUnderMaintenance /&gt; should render the CashierUnderMaintenance" name="&lt;CashierUnderMaintenance /&gt; should render the CashierUnderMaintenance" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="CalendarSideList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:47" time="0.504" tests="2">
    <testcase classname="CalendarSideList should render the side list for duration as 0" name="CalendarSideList should render the side list for duration as 0" time="0.011">
    </testcase>
    <testcase classname="CalendarSideList should render the side list for duation as non-zero" name="CalendarSideList should render the side list for duation as non-zero" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ListItem" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:47" time="0.542" tests="2">
    <testcase classname="ListItem should render the list item" name="ListItem should render the list item" time="0.008">
    </testcase>
    <testcase classname="ListItem should handle onclick for label" name="ListItem should handle onclick for label" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CompositeCalendar /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:46" time="0.807" tests="12">
    <testcase classname="&lt;CompositeCalendar /&gt; should render the component" name="&lt;CompositeCalendar /&gt; should render the component" time="0.019">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should handle onclick for &quot;from date&quot; input" name="&lt;CompositeCalendar /&gt; should handle onclick for &quot;from date&quot; input" time="0.021">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should handle onclick for &quot;to date&quot; input" name="&lt;CompositeCalendar /&gt; should handle onclick for &quot;to date&quot; input" time="0.017">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should handle setToDate function click" name="&lt;CompositeCalendar /&gt; should handle setToDate function click" time="0.016">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should handle setFromDate function click" name="&lt;CompositeCalendar /&gt; should handle setFromDate function click" time="0.017">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should handle onclick for &quot;All time&quot; option" name="&lt;CompositeCalendar /&gt; should handle onclick for &quot;All time&quot; option" time="0.017">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should handle onclick for &quot;Today&quot; option" name="&lt;CompositeCalendar /&gt; should handle onclick for &quot;Today&quot; option" time="0.02">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should handle onclick for &quot;Last 7 days&quot; option" name="&lt;CompositeCalendar /&gt; should handle onclick for &quot;Last 7 days&quot; option" time="0.015">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should handle onclick for &quot;Last 30 days&quot; option" name="&lt;CompositeCalendar /&gt; should handle onclick for &quot;Last 30 days&quot; option" time="0.017">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should handle onclick for &quot;Last quarter&quot; option" name="&lt;CompositeCalendar /&gt; should handle onclick for &quot;Last quarter&quot; option" time="0.016">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should disable date before from date in &quot;to input&quot; section " name="&lt;CompositeCalendar /&gt; should disable date before from date in &quot;to input&quot; section " time="0.014">
    </testcase>
    <testcase classname="&lt;CompositeCalendar /&gt; should disable date after to date in &quot;from input&quot; section " name="&lt;CompositeCalendar /&gt; should disable date after to date in &quot;from input&quot; section " time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OnlineStatusIcon/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:47" time="0.27" tests="2">
    <testcase classname="&lt;OnlineStatusIcon/&gt; should render the default state as offline" name="&lt;OnlineStatusIcon/&gt; should render the default state as offline" time="0.008">
    </testcase>
    <testcase classname="&lt;OnlineStatusIcon/&gt; should render online state when user is online" name="&lt;OnlineStatusIcon/&gt; should render online state when user is online" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CalendarRadioButton" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:47" time="0.503" tests="2">
    <testcase classname="CalendarRadioButton should render the radio button" name="CalendarRadioButton should render the radio button" time="0.01">
    </testcase>
    <testcase classname="CalendarRadioButton should handle on click of radio button" name="CalendarRadioButton should handle on click of radio button" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="CompositeCalendarMobileFooter" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:47" time="0.531" tests="3">
    <testcase classname="CompositeCalendarMobileFooter should render the component" name="CompositeCalendarMobileFooter should render the component" time="0.015">
    </testcase>
    <testcase classname="CompositeCalendarMobileFooter should handle Cancel click" name="CompositeCalendarMobileFooter should handle Cancel click" time="0.016">
    </testcase>
    <testcase classname="CompositeCalendarMobileFooter should handle OK button click" name="CompositeCalendarMobileFooter should handle OK button click" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="CompositeCalendarMobile" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:47" time="0.559" tests="5">
    <testcase classname="CompositeCalendarMobile should render the component" name="CompositeCalendarMobile should render the component" time="0.019">
    </testcase>
    <testcase classname="CompositeCalendarMobile should open the mobile dialog on clicking the calendar field" name="CompositeCalendarMobile should open the mobile dialog on clicking the calendar field" time="0.022">
    </testcase>
    <testcase classname="CompositeCalendarMobile should close the modal on close click" name="CompositeCalendarMobile should close the modal on close click" time="0.01">
    </testcase>
    <testcase classname="CompositeCalendarMobile should handle applydaterange function" name="CompositeCalendarMobile should handle applydaterange function" time="0.008">
    </testcase>
    <testcase classname="CompositeCalendarMobile should handle DatePicker onChange function with from date" name="CompositeCalendarMobile should handle DatePicker onChange function with from date" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FileUploaderComponent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:47" time="0.664" tests="5">
    <testcase classname="&lt;FileUploaderComponent /&gt; should render FileUploaderComponent component in desktop mode" name="&lt;FileUploaderComponent /&gt; should render FileUploaderComponent component in desktop mode" time="0.024">
    </testcase>
    <testcase classname="&lt;FileUploaderComponent /&gt; should upload supported file" name="&lt;FileUploaderComponent /&gt; should upload supported file" time="0.022">
    </testcase>
    <testcase classname="&lt;FileUploaderComponent /&gt; should show validation_error_message when unsupported file is uploaded" name="&lt;FileUploaderComponent /&gt; should show validation_error_message when unsupported file is uploaded" time="0.021">
    </testcase>
    <testcase classname="&lt;FileUploaderComponent /&gt; should render validation error message if validation_error_message is passed as a function" name="&lt;FileUploaderComponent /&gt; should render validation error message if validation_error_message is passed as a function" time="0.008">
    </testcase>
    <testcase classname="&lt;FileUploaderComponent /&gt; should return multiple files and single filenames if multiple is true, values &gt; 0 and validation_error_message is empty" name="&lt;FileUploaderComponent /&gt; should return multiple files and single filenames if multiple is true, values &gt; 0 and validation_error_message is empty" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OnlineStatusAvatar/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:47" time="0.584" tests="1">
    <testcase classname="&lt;OnlineStatusAvatar/&gt; should render shortened nickname as the avatar" name="&lt;OnlineStatusAvatar/&gt; should render shortened nickname as the avatar" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OnlineStatusLabel/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:48" time="0.656" tests="1">
    <testcase classname="&lt;OnlineStatusLabel/&gt; should call the getLastOnlineLabel function with is_online and last_online_time" name="&lt;OnlineStatusLabel/&gt; should call the getLastOnlineLabel function with is_online and last_online_time" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Dp2pBlocked /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:48" time="0.693" tests="1">
    <testcase classname="&lt;Dp2pBlocked /&gt; it should render &lt;Dp2pBlocked /&gt; component" name="&lt;Dp2pBlocked /&gt; it should render &lt;Dp2pBlocked /&gt; component" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Dp2pBlockedDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:48" time="0.723" tests="3">
    <testcase classname="&lt;Dp2pBlockedDescription /&gt; it should return `P2P transactions are locked. This feature is not available for payment agents.`" name="&lt;Dp2pBlockedDescription /&gt; it should return `P2P transactions are locked. This feature is not available for payment agents.`" time="0.013">
    </testcase>
    <testcase classname="&lt;Dp2pBlockedDescription /&gt; it should return `To enable this feature you must complete the following:`" name="&lt;Dp2pBlockedDescription /&gt; it should return `To enable this feature you must complete the following:`" time="0.002">
    </testcase>
    <testcase classname="&lt;Dp2pBlockedDescription /&gt; it should return `Please use live chat to contact our Customer Support team for help.` and open live chat when clicking on the `live chat`" name="&lt;Dp2pBlockedDescription /&gt; it should return `Please use live chat to contact our Customer Support team for help.` and open live chat when clicking on the `live chat`" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Dp2pBlockedChecklist /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:48" time="0.856" tests="3">
    <testcase classname="&lt;Dp2pBlockedChecklist /&gt; it should render &lt;Dp2pBlockedChecklist /&gt; component if client is high risk and not blocked" name="&lt;Dp2pBlockedChecklist /&gt; it should render &lt;Dp2pBlockedChecklist /&gt; component if client is high risk and not blocked" time="0.016">
    </testcase>
    <testcase classname="&lt;Dp2pBlockedChecklist /&gt; it should redirect to `/account/financial-assessment` while clicking on checklist button if client is high risk and not blocked" name="&lt;Dp2pBlockedChecklist /&gt; it should redirect to `/account/financial-assessment` while clicking on checklist button if client is high risk and not blocked" time="0.038">
    </testcase>
    <testcase classname="&lt;Dp2pBlockedChecklist /&gt; it should return null when client is not high risk" name="&lt;Dp2pBlockedChecklist /&gt; it should return null when client is not high risk" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TemporarilyBarredHint /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:48" time="0.894" tests="2">
    <testcase classname="&lt;TemporarilyBarredHint /&gt; it should render &lt;TemporarilyBarredHint /&gt; component if client is barred" name="&lt;TemporarilyBarredHint /&gt; it should render &lt;TemporarilyBarredHint /&gt; component if client is barred" time="0.018">
    </testcase>
    <testcase classname="&lt;TemporarilyBarredHint /&gt; it should return null when client is not barred" name="&lt;TemporarilyBarredHint /&gt; it should return null when client is not barred" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;StarRating/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:48" time="0.725" tests="2">
    <testcase classname="&lt;StarRating/&gt; renders star rating component without initial value" name="&lt;StarRating/&gt; renders star rating component without initial value" time="0.024">
    </testcase>
    <testcase classname="&lt;StarRating/&gt; renders star rating component without icons" name="&lt;StarRating/&gt; renders star rating component without icons" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SeparatorContainer/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:48" time="0.487" tests="1">
    <testcase classname="&lt;SeparatorContainer/&gt; should render the SeparatorContainer component" name="&lt;SeparatorContainer/&gt; should render the SeparatorContainer component" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AppContent/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:48" time="1.062" tests="3">
    <testcase classname="&lt;AppContent/&gt; should set the table type to buy on initial page render" name="&lt;AppContent/&gt; should set the table type to buy on initial page render" time="0.016">
    </testcase>
    <testcase classname="&lt;AppContent/&gt; should load the Tab component when no error status are set" name="&lt;AppContent/&gt; should load the Tab component when no error status are set" time="0.007">
    </testcase>
    <testcase classname="&lt;AppContent/&gt; should render the loading component when is_loading state is true" name="&lt;AppContent/&gt; should render the loading component when is_loading state is true" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;UserAvatar/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:48" time="0.686" tests="1">
    <testcase classname="&lt;UserAvatar/&gt; should render the UserAvatar component with a short nickname" name="&lt;UserAvatar/&gt; should render the UserAvatar component with a short nickname" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Verification /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:48" time="1.007" tests="5">
    <testcase classname="&lt;Verification /&gt; should render default state" name="&lt;Verification /&gt; should render default state" time="0.016">
    </testcase>
    <testcase classname="&lt;Verification /&gt; Should ask for proof of address if poa is required" name="&lt;Verification /&gt; Should ask for proof of address if poa is required" time="0.006">
    </testcase>
    <testcase classname="&lt;Verification /&gt; Should redirect to account poi verification if poi has not been verified" name="&lt;Verification /&gt; Should redirect to account poi verification if poi has not been verified" time="0.018">
    </testcase>
    <testcase classname="&lt;Verification /&gt; Should redirect to account poa verification if poa has not been verified" name="&lt;Verification /&gt; Should redirect to account poa verification if poa has not been verified" time="0.011">
    </testcase>
    <testcase classname="&lt;Verification /&gt; Should render Dp2pBlocked component if user is not advertiser, but is poi verified and has nickname" name="&lt;Verification /&gt; Should render Dp2pBlocked component if user is not advertiser, but is poi verified and has nickname" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ModalManager /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:49" time="0.4" tests="1">
    <testcase classname="&lt;ModalManager /&gt; should throw an error if not wrapped with ModalManagerContextProvider component" name="&lt;ModalManager /&gt; should throw an error if not wrapped with ModalManagerContextProvider component" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RecommendUser /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:49" time="1.004" tests="6">
    <testcase classname="&lt;RecommendUser /&gt; should render the component with correct message if it is not a buy order for the user and both buttons" name="&lt;RecommendUser /&gt; should render the component with correct message if it is not a buy order for the user and both buttons" time="0.036">
    </testcase>
    <testcase classname="&lt;RecommendUser /&gt; should render the component with correct message if it is a buy order for the user and both buttons" name="&lt;RecommendUser /&gt; should render the component with correct message if it is a buy order for the user and both buttons" time="0.01">
    </testcase>
    <testcase classname="&lt;RecommendUser /&gt; should auto select the Yes button if the user was previously recommended" name="&lt;RecommendUser /&gt; should auto select the Yes button if the user was previously recommended" time="0.073">
    </testcase>
    <testcase classname="&lt;RecommendUser /&gt; should disable the Yes Button after being clicked" name="&lt;RecommendUser /&gt; should disable the Yes Button after being clicked" time="0.049">
    </testcase>
    <testcase classname="&lt;RecommendUser /&gt; should disable the No Button after being clicked" name="&lt;RecommendUser /&gt; should disable the No Button after being clicked" time="0.053">
    </testcase>
    <testcase classname="&lt;RecommendUser /&gt; should disable the other button if one of the buttons are selected" name="&lt;RecommendUser /&gt; should disable the other button if one of the buttons are selected" time="0.07">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentMethodIcon /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:49" time="0.787" tests="1">
    <testcase classname="&lt;PaymentMethodIcon /&gt; should render payment method icon with passed props" name="&lt;PaymentMethodIcon /&gt; should render payment method icon with passed props" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ModalForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:49" time="0.833" tests="3">
    <testcase classname="&lt;ModalForm /&gt; should render ModalForm component" name="&lt;ModalForm /&gt; should render ModalForm component" time="0.012">
    </testcase>
    <testcase classname="&lt;ModalForm /&gt; should set formik_ref" name="&lt;ModalForm /&gt; should set formik_ref" time="0.001">
    </testcase>
    <testcase classname="&lt;ModalForm /&gt; should restore saved form values when ModalForm is rendered" name="&lt;ModalForm /&gt; should restore saved form values when ModalForm is rendered" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ModalManager /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:49" time="0.764" tests="6">
    <testcase classname="&lt;ModalManager /&gt; should not render any modals if no modals are intended to be shown" name="&lt;ModalManager /&gt; should not render any modals if no modals are intended to be shown" time="0.016">
    </testcase>
    <testcase classname="&lt;ModalManager /&gt; should render MockModal component if there are modals to be shown" name="&lt;ModalManager /&gt; should render MockModal component if there are modals to be shown" time="0.009">
    </testcase>
    <testcase classname="&lt;ModalManager /&gt; should render the latest shown modal" name="&lt;ModalManager /&gt; should render the latest shown modal" time="0.001">
    </testcase>
    <testcase classname="&lt;ModalManager /&gt; should render MockModal component with props passed" name="&lt;ModalManager /&gt; should render MockModal component with props passed" time="0.003">
    </testcase>
    <testcase classname="&lt;ModalManager /&gt; should pass modal props to the MockModal when there are cached and registered props" name="&lt;ModalManager /&gt; should pass modal props to the MockModal when there are cached and registered props" time="0.003">
    </testcase>
    <testcase classname="&lt;ModalManager /&gt; should use registered props and passed-in props to the MockModal" name="&lt;ModalManager /&gt; should use registered props and passed-in props to the MockModal" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ModalManagerContextProvider /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:49" time="1.149" tests="12">
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should render the mock modal when showModal is called in desktop view" name="&lt;ModalManagerContextProvider /&gt; should render the mock modal when showModal is called in desktop view" time="0.032">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should render the latest shown modal when showModal is called multiple times in desktop view" name="&lt;ModalManagerContextProvider /&gt; should render the latest shown modal when showModal is called multiple times in desktop view" time="0.034">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should render the mock modal when showModal is called in responsive view" name="&lt;ModalManagerContextProvider /&gt; should render the mock modal when showModal is called in responsive view" time="0.013">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should render the latest shown modal when showModal is called multiple times in responsive view" name="&lt;ModalManagerContextProvider /&gt; should render the latest shown modal when showModal is called multiple times in responsive view" time="0.038">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should return correct status of modal visibility based on isCurrentModal function" name="&lt;ModalManagerContextProvider /&gt; should return correct status of modal visibility based on isCurrentModal function" time="0.013">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should hide a modal if hideModal is called in desktop view" name="&lt;ModalManagerContextProvider /&gt; should hide a modal if hideModal is called in desktop view" time="0.041">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should hide a modal if hideModal is called in responsive view" name="&lt;ModalManagerContextProvider /&gt; should hide a modal if hideModal is called in responsive view" time="0.039">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should hide all modals if should_hide_all_modals option is passed in hideModal function on desktop view" name="&lt;ModalManagerContextProvider /&gt; should hide all modals if should_hide_all_modals option is passed in hideModal function on desktop view" time="0.028">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should hide all modals if should_hide_all_modals option is passed in hideModal function on responsive view" name="&lt;ModalManagerContextProvider /&gt; should hide all modals if should_hide_all_modals option is passed in hideModal function on responsive view" time="0.037">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should cache and register the modal props with useRegisterModalProps and pass it to the registered modal" name="&lt;ModalManagerContextProvider /&gt; should cache and register the modal props with useRegisterModalProps and pass it to the registered modal" time="0.025">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should cache and register multiple modal props with useRegisterModalProps and pass it to the registered modal" name="&lt;ModalManagerContextProvider /&gt; should cache and register multiple modal props with useRegisterModalProps and pass it to the registered modal" time="0.024">
    </testcase>
    <testcase classname="&lt;ModalManagerContextProvider /&gt; should save form state of the modal in general_store when saveFormState is called" name="&lt;ModalManagerContextProvider /&gt; should save form state of the modal in general_store when saveFormState is called" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyAdsFloatingRateSwitchModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:49" time="0.92" tests="6">
    <testcase classname="&lt;MyAdsFloatingRateSwitchModal /&gt; should render MyAdsFloatingRateSwitchModal component with corresponding message when rate type is float" name="&lt;MyAdsFloatingRateSwitchModal /&gt; should render MyAdsFloatingRateSwitchModal component with corresponding message when rate type is float" time="0.038">
    </testcase>
    <testcase classname="&lt;MyAdsFloatingRateSwitchModal /&gt; should render MyAdsFloatingRateSwitchModal component with corresponding message when rate type is fixed" name="&lt;MyAdsFloatingRateSwitchModal /&gt; should render MyAdsFloatingRateSwitchModal component with corresponding message when rate type is fixed" time="0.016">
    </testcase>
    <testcase classname="&lt;MyAdsFloatingRateSwitchModal /&gt; should show Cancel button when target date is reached" name="&lt;MyAdsFloatingRateSwitchModal /&gt; should show Cancel button when target date is reached" time="0.015">
    </testcase>
    <testcase classname="&lt;MyAdsFloatingRateSwitchModal /&gt; should handle onClick for set button" name="&lt;MyAdsFloatingRateSwitchModal /&gt; should handle onClick for set button" time="0.024">
    </testcase>
    <testcase classname="&lt;MyAdsFloatingRateSwitchModal /&gt; should handle onClick for clicking I&apos;ll do this later button" name="&lt;MyAdsFloatingRateSwitchModal /&gt; should handle onClick for clicking I&apos;ll do this later button" time="0.022">
    </testcase>
    <testcase classname="&lt;MyAdsFloatingRateSwitchModal /&gt; should handle onClick for cancel button" name="&lt;MyAdsFloatingRateSwitchModal /&gt; should handle onClick for cancel button" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LeavePageModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:50" time="0.783" tests="3">
    <testcase classname="&lt;LeavePageModal/&gt; should render LeavePageModal with given props" name="&lt;LeavePageModal/&gt; should render LeavePageModal with given props" time="0.019">
    </testcase>
    <testcase classname="&lt;LeavePageModal/&gt; should call onLeavePage and close the modal on click of Leave page button" name="&lt;LeavePageModal/&gt; should call onLeavePage and close the modal on click of Leave page button" time="0.026">
    </testcase>
    <testcase classname="&lt;LeavePageModal/&gt; should call onCancel and close the modal on click of Cancel button" name="&lt;LeavePageModal/&gt; should call onCancel and close the modal on click of Cancel button" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyAdsDeleteErrorModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:50" time="0.899" tests="4">
    <testcase classname="&lt;MyAdsDeleteErrorModal /&gt; should render MyAdsDeleteErrorModal component" name="&lt;MyAdsDeleteErrorModal /&gt; should render MyAdsDeleteErrorModal component" time="0.07">
    </testcase>
    <testcase classname="&lt;MyAdsDeleteErrorModal /&gt; should close modal when cancel button is clicked" name="&lt;MyAdsDeleteErrorModal /&gt; should close modal when cancel button is clicked" time="0.029">
    </testcase>
    <testcase classname="&lt;MyAdsDeleteErrorModal /&gt; should delete ad when delete button is clicked" name="&lt;MyAdsDeleteErrorModal /&gt; should delete ad when delete button is clicked" time="0.026">
    </testcase>
    <testcase classname="&lt;MyAdsDeleteErrorModal /&gt; should show error modal when delete button is clicked and API call fails" name="&lt;MyAdsDeleteErrorModal /&gt; should show error modal when delete button is clicked and API call fails" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MarketRateChangeErrorModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:50" time="0.568" tests="2">
    <testcase classname="&lt;MarketRateChangeErrorModal /&gt; should render MarketRateChangeErrorModal" name="&lt;MarketRateChangeErrorModal /&gt; should render MarketRateChangeErrorModal" time="0.015">
    </testcase>
    <testcase classname="&lt;MarketRateChangeErrorModal /&gt; should close the modal on clicking try again button" name="&lt;MarketRateChangeErrorModal /&gt; should close the modal on clicking try again button" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="&lt;rating-modal.spec /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:50" time="1.258" tests="6">
    <testcase classname="&lt;rating-modal.spec /&gt; should render the RatingModal" name="&lt;rating-modal.spec /&gt; should render the RatingModal" time="0.039">
    </testcase>
    <testcase classname="&lt;rating-modal.spec /&gt; should call setIsRecommended with 1 if user presses Yes button" name="&lt;rating-modal.spec /&gt; should call setIsRecommended with 1 if user presses Yes button" time="0.151">
    </testcase>
    <testcase classname="&lt;rating-modal.spec /&gt; should call setIsRecommended with 0 if user presses No button" name="&lt;rating-modal.spec /&gt; should call setIsRecommended with 0 if user presses No button" time="0.149">
    </testcase>
    <testcase classname="&lt;rating-modal.spec /&gt; should call setIsRecommended with null if user presses selected button" name="&lt;rating-modal.spec /&gt; should call setIsRecommended with null if user presses selected button" time="0.051">
    </testcase>
    <testcase classname="&lt;rating-modal.spec /&gt; should call onClickDone when user clicks Done button" name="&lt;rating-modal.spec /&gt; should call onClickDone when user clicks Done button" time="0.049">
    </testcase>
    <testcase classname="&lt;rating-modal.spec /&gt; should call onClickSkip when user clicks Done button" name="&lt;rating-modal.spec /&gt; should call onClickSkip when user clicks Done button" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="EmailVerificationModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:50" time="0.73" tests="3">
    <testcase classname="EmailVerificationModal /&gt; should render EmailVerificationModal" name="EmailVerificationModal /&gt; should render EmailVerificationModal" time="0.034">
    </testcase>
    <testcase classname="EmailVerificationModal /&gt; should be able to click on didn`t receive email and setShouldShowReasonsIfNoEmail should be passing true" name="EmailVerificationModal /&gt; should be able to click on didn`t receive email and setShouldShowReasonsIfNoEmail should be passing true" time="0.051">
    </testcase>
    <testcase classname="EmailVerificationModal /&gt; should call hideModal, confirmOrderRequest when clicking on Resend Email button" name="EmailVerificationModal /&gt; should call hideModal, confirmOrderRequest when clicking on Resend Email button" time="0.078">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ShareMyAdsModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:50" time="1.058" tests="5">
    <testcase classname="&lt;ShareMyAdsModal /&gt; should render the ShareMyAdsModal" name="&lt;ShareMyAdsModal /&gt; should render the ShareMyAdsModal" time="0.037">
    </testcase>
    <testcase classname="&lt;ShareMyAdsModal /&gt; should toggle the modal" name="&lt;ShareMyAdsModal /&gt; should toggle the modal" time="0.045">
    </testcase>
    <testcase classname="&lt;ShareMyAdsModal /&gt; should call setShowPopup when clicking on Share link" name="&lt;ShareMyAdsModal /&gt; should call setShowPopup when clicking on Share link" time="0.074">
    </testcase>
    <testcase classname="&lt;ShareMyAdsModal /&gt; should call onCopy function when clicking on copy icon" name="&lt;ShareMyAdsModal /&gt; should call onCopy function when clicking on copy icon" time="0.086">
    </testcase>
    <testcase classname="&lt;ShareMyAdsModal /&gt; should call html2canvas function when clicking on Download this QR code button" name="&lt;ShareMyAdsModal /&gt; should call html2canvas function when clicking on Download this QR code button" time="0.081">
    </testcase>
  </testsuite>
  <testsuite name="&lt;EditAdCancelModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:50" time="0.735" tests="2">
    <testcase classname="&lt;EditAdCancelModal/&gt; should render the EditAdCancelModal" name="&lt;EditAdCancelModal/&gt; should render the EditAdCancelModal" time="0.02">
    </testcase>
    <testcase classname="&lt;EditAdCancelModal/&gt; should close modal on clicking cancel button" name="&lt;EditAdCancelModal/&gt; should close modal on clicking cancel button" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InvalidVerificationLinkModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:51" time="0.819" tests="2">
    <testcase classname="&lt;InvalidVerificationLinkModal /&gt; should render InvalidVerificationLinkModal with given props" name="&lt;InvalidVerificationLinkModal /&gt; should render InvalidVerificationLinkModal with given props" time="0.024">
    </testcase>
    <testcase classname="&lt;InvalidVerificationLinkModal /&gt; should close modal and request for new link on clicking &quot;get new link&quot; button" name="&lt;InvalidVerificationLinkModal /&gt; should close modal and request for new link on clicking &quot;get new link&quot; button" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CurrenySelectorModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:51" time="0.931" tests="2">
    <testcase classname="&lt;CurrenySelectorModal/&gt; should render the CurrenySelectorModal" name="&lt;CurrenySelectorModal/&gt; should render the CurrenySelectorModal" time="0.034">
    </testcase>
    <testcase classname="&lt;CurrenySelectorModal/&gt; should handle currency selection" name="&lt;CurrenySelectorModal/&gt; should handle currency selection" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyProfileBalanceModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:51" time="0.687" tests="2">
    <testcase classname="&lt;MyProfileBalanceModal /&gt; should render MyProfileBalanceModal" name="&lt;MyProfileBalanceModal /&gt; should render MyProfileBalanceModal" time="0.019">
    </testcase>
    <testcase classname="&lt;MyProfileBalanceModal /&gt; should call hideModal when clicking on the OK button" name="&lt;MyProfileBalanceModal /&gt; should call hideModal when clicking on the OK button" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BlockUserFilterModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:51" time="0.83" tests="1">
    <testcase classname="&lt;BlockUserFilterModal /&gt; should render the BlockUserFilterModal" name="&lt;BlockUserFilterModal /&gt; should render the BlockUserFilterModal" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RecommendedModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:51" time="0.849" tests="2">
    <testcase classname="&lt;RecommendedModal /&gt; should render RecommendedModal with the given message" name="&lt;RecommendedModal /&gt; should render RecommendedModal with the given message" time="0.023">
    </testcase>
    <testcase classname="&lt;RecommendedModal /&gt; should close the modal on clicking ok button" name="&lt;RecommendedModal /&gt; should close the modal on clicking ok button" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CancelAddPaymentMethodModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:51" time="0.931" tests="4">
    <testcase classname="&lt;CancelAddPaymentMethodModal /&gt; should render &lt;CancelAddPaymentMethodModal /&gt; component" name="&lt;CancelAddPaymentMethodModal /&gt; should render &lt;CancelAddPaymentMethodModal /&gt; component" time="0.047">
    </testcase>
    <testcase classname="&lt;CancelAddPaymentMethodModal /&gt; should hide modal and clear the form when clicking on cancel button" name="&lt;CancelAddPaymentMethodModal /&gt; should hide modal and clear the form when clicking on cancel button" time="0.023">
    </testcase>
    <testcase classname="&lt;CancelAddPaymentMethodModal /&gt; should cancel adding payment method without hiding all modals" name="&lt;CancelAddPaymentMethodModal /&gt; should cancel adding payment method without hiding all modals" time="0.019">
    </testcase>
    <testcase classname="&lt;CancelAddPaymentMethodModal /&gt; should hide modal when clicking on go back button" name="&lt;CancelAddPaymentMethodModal /&gt; should hide modal when clicking on go back button" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ErrorModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:52" time="0.672" tests="3">
    <testcase classname="&lt;ErrorModal/&gt; should show error modal with the correct details" name="&lt;ErrorModal/&gt; should show error modal with the correct details" time="0.023">
    </testcase>
    <testcase classname="&lt;ErrorModal/&gt; should call onClose when footer&apos;s button is clicked" name="&lt;ErrorModal/&gt; should call onClose when footer&apos;s button is clicked" time="0.014">
    </testcase>
    <testcase classname="&lt;ErrorModal/&gt; should call hideModal when footer&apos;s button is clicked" name="&lt;ErrorModal/&gt; should call hideModal when footer&apos;s button is clicked" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;EmailLinkedBlockedModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:52" time="0.662" tests="2">
    <testcase classname="&lt;EmailLinkedBlockedModal /&gt; should render EmailLinkedBlockedModal with the given error message" name="&lt;EmailLinkedBlockedModal /&gt; should render EmailLinkedBlockedModal with the given error message" time="0.028">
    </testcase>
    <testcase classname="&lt;EmailLinkedBlockedModal /&gt; should handle close modal" name="&lt;EmailLinkedBlockedModal /&gt; should handle close modal" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AdErrorTooltipModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:52" time="0.965" tests="10">
    <testcase classname="&lt;AdErrorTooltipModal /&gt; should render the component in default state" name="&lt;AdErrorTooltipModal /&gt; should render the component in default state" time="0.038">
    </testcase>
    <testcase classname="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advert_inactive&quot;" name="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advert_inactive&quot;" time="0.01">
    </testcase>
    <testcase classname="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advert_max_limit&quot;" name="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advert_max_limit&quot;" time="0.018">
    </testcase>
    <testcase classname="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advert_min_limit&quot;" name="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advert_min_limit&quot;" time="0.007">
    </testcase>
    <testcase classname="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advert_remaining&quot;" name="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advert_remaining&quot;" time="0.005">
    </testcase>
    <testcase classname="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advertiser_ads_paused&quot;" name="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advertiser_ads_paused&quot;" time="0.011">
    </testcase>
    <testcase classname="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advertiser_balance&quot;" name="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advertiser_balance&quot;" time="0.012">
    </testcase>
    <testcase classname="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advertiser_daily_limit&quot;" name="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advertiser_daily_limit&quot;" time="0.01">
    </testcase>
    <testcase classname="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advertiser_temp_ban&quot;" name="&lt;AdErrorTooltipModal /&gt; should display the error message for &quot;advertiser_temp_ban&quot;" time="0.025">
    </testcase>
    <testcase classname="&lt;AdErrorTooltipModal /&gt; should handle the error message when there are multiple visibility statuses" name="&lt;AdErrorTooltipModal /&gt; should handle the error message when there are multiple visibility statuses" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;EmailLinkExpiredModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:52" time="0.928" tests="3">
    <testcase classname="&lt;EmailLinkExpiredModal /&gt; should render the EmailLinKExpiredModal" name="&lt;EmailLinkExpiredModal /&gt; should render the EmailLinKExpiredModal" time="0.056">
    </testcase>
    <testcase classname="&lt;EmailLinkExpiredModal /&gt; should call hideModal and confirmOrderRequest when clicking on button" name="&lt;EmailLinkExpiredModal /&gt; should call hideModal and confirmOrderRequest when clicking on button" time="0.041">
    </testcase>
    <testcase classname="&lt;EmailLinkExpiredModal /&gt; should call hideModal when toggling the modal" name="&lt;EmailLinkExpiredModal /&gt; should call hideModal when toggling the modal" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AdVisibilityErrorModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:52" time="1.187" tests="4">
    <testcase classname="&lt;AdVisibilityErrorModal/&gt; should render ad exceeds balance error" name="&lt;AdVisibilityErrorModal/&gt; should render ad exceeds balance error" time="0.103">
    </testcase>
    <testcase classname="&lt;AdVisibilityErrorModal/&gt; should render ad exceeds daily limit error modal and can open live chat" name="&lt;AdVisibilityErrorModal/&gt; should render ad exceeds daily limit error modal and can open live chat" time="0.044">
    </testcase>
    <testcase classname="&lt;AdVisibilityErrorModal/&gt; should render default error message" name="&lt;AdVisibilityErrorModal/&gt; should render default error message" time="0.017">
    </testcase>
    <testcase classname="&lt;AdVisibilityErrorModal/&gt; should hide modal when ok button is clicked" name="&lt;AdVisibilityErrorModal/&gt; should hide modal when ok button is clicked" time="0.09">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DeletePaymentMethodErrorModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:52" time="0.968" tests="2">
    <testcase classname="&lt;DeletePaymentMethodErrorModal /&gt; should render the DeletePaymentMethodErrorModal" name="&lt;DeletePaymentMethodErrorModal /&gt; should render the DeletePaymentMethodErrorModal" time="0.034">
    </testcase>
    <testcase classname="&lt;DeletePaymentMethodErrorModal /&gt; should call hideModal when clicking on the Ok button" name="&lt;DeletePaymentMethodErrorModal /&gt; should call hideModal when clicking on the Ok button" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OrderDetailsConfirmModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:52" time="1.281" tests="4">
    <testcase classname="&lt;OrderDetailsConfirmModal/&gt; should render the modal" name="&lt;OrderDetailsConfirmModal/&gt; should render the modal" time="0.053">
    </testcase>
    <testcase classname="&lt;OrderDetailsConfirmModal/&gt; should handle GoBack Click" name="&lt;OrderDetailsConfirmModal/&gt; should handle GoBack Click" time="0.067">
    </testcase>
    <testcase classname="&lt;OrderDetailsConfirmModal/&gt; should send a request when confirm button is clicked" name="&lt;OrderDetailsConfirmModal/&gt; should send a request when confirm button is clicked" time="0.064">
    </testcase>
    <testcase classname="&lt;OrderDetailsConfirmModal/&gt; should call hideModal when clicking the close icon" name="&lt;OrderDetailsConfirmModal/&gt; should call hideModal when clicking the close icon" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ConfirmDeletePaymentMethodModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:53" time="1.148" tests="1">
    <testcase classname="&lt;ConfirmDeletePaymentMethodModal /&gt; should render ConfirmDeletePaymentMethodModal" name="&lt;ConfirmDeletePaymentMethodModal /&gt; should render ConfirmDeletePaymentMethodModal" time="0.059">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CreateAdAddPaymentMethodModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:53" time="1.396" tests="5">
    <testcase classname="&lt;CreateAdAddPaymentMethodModal /&gt; should render CreateAdAddPaymentMethodModal component in desktop view" name="&lt;CreateAdAddPaymentMethodModal /&gt; should render CreateAdAddPaymentMethodModal component in desktop view" time="0.064">
    </testcase>
    <testcase classname="&lt;CreateAdAddPaymentMethodModal /&gt; should close CreateAdAddPaymentMethodModal component when clicking Cancel button" name="&lt;CreateAdAddPaymentMethodModal /&gt; should close CreateAdAddPaymentMethodModal component when clicking Cancel button" time="0.043">
    </testcase>
    <testcase classname="&lt;CreateAdAddPaymentMethodModal /&gt; should show CancelAddPaymentMethod modal if is_form_modified is true" name="&lt;CreateAdAddPaymentMethodModal /&gt; should show CancelAddPaymentMethod modal if is_form_modified is true" time="0.031">
    </testcase>
    <testcase classname="&lt;CreateAdAddPaymentMethodModal /&gt; should not show Cancel button if selected_payment_method is not empty in desktop view" name="&lt;CreateAdAddPaymentMethodModal /&gt; should not show Cancel button if selected_payment_method is not empty in desktop view" time="0.021">
    </testcase>
    <testcase classname="&lt;CreateAdAddPaymentMethodModal /&gt; should render CreateAdAddPaymentMethodModal component in mobile view" name="&lt;CreateAdAddPaymentMethodModal /&gt; should render CreateAdAddPaymentMethodModal component in mobile view" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MyAdsDeleteErrorModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:53" time="1.135" tests="3">
    <testcase classname="&lt;MyAdsDeleteErrorModal /&gt; should render MyAdsDeleteErrorModal component with my ads delete error message" name="&lt;MyAdsDeleteErrorModal /&gt; should render MyAdsDeleteErrorModal component with my ads delete error message" time="0.022">
    </testcase>
    <testcase classname="&lt;MyAdsDeleteErrorModal /&gt; should close modal when ok button is clicked" name="&lt;MyAdsDeleteErrorModal /&gt; should close modal when ok button is clicked" time="0.028">
    </testcase>
    <testcase classname="&lt;MyAdsDeleteErrorModal /&gt; should render MyAdsDeleteErrorModal component in mobile view" name="&lt;MyAdsDeleteErrorModal /&gt; should render MyAdsDeleteErrorModal component in mobile view" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="DisclaimerModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:53" time="1.007" tests="4">
    <testcase classname="DisclaimerModal should render the modal with the correct title and content" name="DisclaimerModal should render the modal with the correct title and content" time="0.031">
    </testcase>
    <testcase classname="DisclaimerModal should disable button when checkbox is not clicked" name="DisclaimerModal should disable button when checkbox is not clicked" time="0.036">
    </testcase>
    <testcase classname="DisclaimerModal should enable button when checkbox is clicked" name="DisclaimerModal should enable button when checkbox is clicked" time="0.055">
    </testcase>
    <testcase classname="DisclaimerModal should set value in local storage when confirm button is clicked" name="DisclaimerModal should set value in local storage when confirm button is clicked" time="0.061">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DailyLimitModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:53" time="1.115" tests="5">
    <testcase classname="&lt;DailyLimitModal /&gt; should render DailyLimitModal and prompt user if they want to upgrade" name="&lt;DailyLimitModal /&gt; should render DailyLimitModal and prompt user if they want to upgrade" time="0.044">
    </testcase>
    <testcase classname="&lt;DailyLimitModal /&gt; should render the Loading component when is_daily_limit_upgrading is true" name="&lt;DailyLimitModal /&gt; should render the Loading component when is_daily_limit_upgrading is true" time="0.008">
    </testcase>
    <testcase classname="&lt;DailyLimitModal /&gt; should prompt the user that there was an error when is_there_daily_limit_error is true" name="&lt;DailyLimitModal /&gt; should prompt the user that there was an error when is_there_daily_limit_error is true" time="0.01">
    </testcase>
    <testcase classname="&lt;DailyLimitModal /&gt; should render a success message when is_daily_limit_upgrade_success is true" name="&lt;DailyLimitModal /&gt; should render a success message when is_daily_limit_upgrade_success is true" time="0.007">
    </testcase>
    <testcase classname="&lt;DailyLimitModal /&gt; should call setIsDailyLimitUpgrading and upgradeDailyLimit functions when clicking on Yes button" name="&lt;DailyLimitModal /&gt; should call setIsDailyLimitUpgrading and upgradeDailyLimit functions when clicking on Yes button" time="0.086">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BuySellModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:53" time="1.418" tests="7">
    <testcase classname="&lt;BuySellModal /&gt; should render the BuySellModal" name="&lt;BuySellModal /&gt; should render the BuySellModal" time="0.102">
    </testcase>
    <testcase classname="&lt;BuySellModal /&gt; should call hideModal, fetchAdvertiserAdverts, unsubscribeAdvertInfo when clicking cross icon if should_show_add_payment_method_form is false" name="&lt;BuySellModal /&gt; should call hideModal, fetchAdvertiserAdverts, unsubscribeAdvertInfo when clicking cross icon if should_show_add_payment_method_form is false" time="0.021">
    </testcase>
    <testcase classname="&lt;BuySellModal /&gt; should call hideAddPaymentMethodForm when clicking cross icon if should_show_add_payment_method_form is true and is_form_modified is false" name="&lt;BuySellModal /&gt; should call hideAddPaymentMethodForm when clicking cross icon if should_show_add_payment_method_form is true and is_form_modified is false" time="0.025">
    </testcase>
    <testcase classname="&lt;BuySellModal /&gt; should call showModal when clicking cross icon if should_show_add_payment_method_form and is_form_modified is true" name="&lt;BuySellModal /&gt; should call showModal when clicking cross icon if should_show_add_payment_method_form and is_form_modified is true" time="0.014">
    </testcase>
    <testcase classname="&lt;BuySellModal /&gt; should call submitForm when pressing Confirm" name="&lt;BuySellModal /&gt; should call submitForm when pressing Confirm" time="0.039">
    </testcase>
    <testcase classname="&lt;BuySellModal /&gt; should call showModal and setFormErrorCode when advert rate has changed" name="&lt;BuySellModal /&gt; should call showModal and setFormErrorCode when advert rate has changed" time="0.01">
    </testcase>
    <testcase classname="&lt;BuySellModal /&gt; should setErrorMessage to empty string if is_modal_open is false" name="&lt;BuySellModal /&gt; should setErrorMessage to empty string if is_modal_open is false" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BuySellModalError /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:54" time="0.811" tests="3">
    <testcase classname="&lt;BuySellModalError /&gt; should display the error_message if it is not an empty string and show_low_balance_message is false" name="&lt;BuySellModalError /&gt; should display the error_message if it is not an empty string and show_low_balance_message is false" time="0.013">
    </testcase>
    <testcase classname="&lt;BuySellModalError /&gt; should display the show_low_balance_message if it is true and has error_message" name="&lt;BuySellModalError /&gt; should display the show_low_balance_message if it is true and has error_message" time="0.003">
    </testcase>
    <testcase classname="&lt;BuySellModalError /&gt; should display nothing if error_message is an empty string" name="&lt;BuySellModalError /&gt; should display nothing if error_message is an empty string" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BuySellModalTitle /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:54" time="1.155" tests="5">
    <testcase classname="&lt;BuySellModalTitle /&gt; should display Sell USD if table type is sell" name="&lt;BuySellModalTitle /&gt; should display Sell USD if table type is sell" time="0.01">
    </testcase>
    <testcase classname="&lt;BuySellModalTitle /&gt; should display Buy USD if table type is buy" name="&lt;BuySellModalTitle /&gt; should display Buy USD if table type is buy" time="0.002">
    </testcase>
    <testcase classname="&lt;BuySellModalTitle /&gt; should display Add payment method text if should_show_add_payment_method_form is true and isDesktop is false" name="&lt;BuySellModalTitle /&gt; should display Add payment method text if should_show_add_payment_method_form is true and isDesktop is false" time="0.004">
    </testcase>
    <testcase classname="&lt;BuySellModalTitle /&gt; should display Add payment method text with arrow icon if should_show_add_payment_method_form is true and isDesktop is true" name="&lt;BuySellModalTitle /&gt; should display Add payment method text with arrow icon if should_show_add_payment_method_form is true and isDesktop is true" time="0.013">
    </testcase>
    <testcase classname="&lt;BuySellModalTitle /&gt; should call onReturn if user presses return icon" name="&lt;BuySellModalTitle /&gt; should call onReturn if user presses return icon" time="0.092">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DeletePaymentMethodConfirmationModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:54" time="1.18" tests="3">
    <testcase classname="&lt;DeletePaymentMethodConfirmationModal /&gt; should render delete payment method confirmation modal" name="&lt;DeletePaymentMethodConfirmationModal /&gt; should render delete payment method confirmation modal" time="0.077">
    </testcase>
    <testcase classname="&lt;DeletePaymentMethodConfirmationModal /&gt; should call delete_payment_method when Yes, remove button is clicked" name="&lt;DeletePaymentMethodConfirmationModal /&gt; should call delete_payment_method when Yes, remove button is clicked" time="0.024">
    </testcase>
    <testcase classname="&lt;DeletePaymentMethodConfirmationModal /&gt; should close modal when No button is clicked" name="&lt;DeletePaymentMethodConfirmationModal /&gt; should close modal when No button is clicked" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FilterModalBody /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:54" time="1.029" tests="4">
    <testcase classname="&lt;FilterModalBody /&gt; should render the modal content" name="&lt;FilterModalBody /&gt; should render the modal content" time="0.019">
    </testcase>
    <testcase classname="&lt;FilterModalBody /&gt; should handle onclick for payment methods section" name="&lt;FilterModalBody /&gt; should handle onclick for payment methods section" time="0.015">
    </testcase>
    <testcase classname="&lt;FilterModalBody /&gt; should handle toggle button click" name="&lt;FilterModalBody /&gt; should handle toggle button click" time="0.012">
    </testcase>
    <testcase classname="&lt;FilterModalBody /&gt; should show the result section and search section when payment method section was already clicked" name="&lt;FilterModalBody /&gt; should show the result section and search section when payment method section was already clicked" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FilterModalFooter /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:54" time="1.026" tests="5">
    <testcase classname="&lt;FilterModalFooter /&gt; should render the component" name="&lt;FilterModalFooter /&gt; should render the component" time="0.044">
    </testcase>
    <testcase classname="&lt;FilterModalFooter /&gt; should handle reset button click" name="&lt;FilterModalFooter /&gt; should handle reset button click" time="0.017">
    </testcase>
    <testcase classname="&lt;FilterModalFooter /&gt; should handle apply button click" name="&lt;FilterModalFooter /&gt; should handle apply button click" time="0.019">
    </testcase>
    <testcase classname="&lt;FilterModalFooter /&gt; should handle clear button click" name="&lt;FilterModalFooter /&gt; should handle clear button click" time="0.012">
    </testcase>
    <testcase classname="&lt;FilterModalFooter /&gt; should handle confirm button click" name="&lt;FilterModalFooter /&gt; should handle confirm button click" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FilterModalHeader /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:55" time="0.974" tests="3">
    <testcase classname="&lt;FilterModalHeader /&gt; should render the component" name="&lt;FilterModalHeader /&gt; should render the component" time="0.015">
    </testcase>
    <testcase classname="&lt;FilterModalHeader /&gt; should render the component with payment methods" name="&lt;FilterModalHeader /&gt; should render the component with payment methods" time="0.006">
    </testcase>
    <testcase classname="&lt;FilterModalHeader /&gt; should handle clicking return" name="&lt;FilterModalHeader /&gt; should handle clicking return" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FilterModalResult /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:55" time="1.077" tests="6">
    <testcase classname="&lt;FilterModalResult /&gt; should render the component with the passed props" name="&lt;FilterModalResult /&gt; should render the component with the passed props" time="0.027">
    </testcase>
    <testcase classname="&lt;FilterModalResult /&gt; should handle checkbox selection" name="&lt;FilterModalResult /&gt; should handle checkbox selection" time="0.065">
    </testcase>
    <testcase classname="&lt;FilterModalResult /&gt; should show no results if search term is present and no results are found" name="&lt;FilterModalResult /&gt; should show no results if search term is present and no results are found" time="0.004">
    </testcase>
    <testcase classname="&lt;FilterModalResult /&gt; should show the search results if search term is present and results are found" name="&lt;FilterModalResult /&gt; should show the search results if search term is present and results are found" time="0.002">
    </testcase>
    <testcase classname="&lt;FilterModalResult /&gt; should handle selection of search results" name="&lt;FilterModalResult /&gt; should handle selection of search results" time="0.024">
    </testcase>
    <testcase classname="&lt;FilterModalResult /&gt; should show the Loading indicator when in loading state" name="&lt;FilterModalResult /&gt; should show the Loading indicator when in loading state" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FilterModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:55" time="1.292" tests="9">
    <testcase classname="&lt;FilterModal /&gt; should render the component" name="&lt;FilterModal /&gt; should render the component" time="0.033">
    </testcase>
    <testcase classname="&lt;FilterModal /&gt; should clear the search results and search term on unmount" name="&lt;FilterModal /&gt; should clear the search results and search term on unmount" time="0.008">
    </testcase>
    <testcase classname="&lt;FilterModal /&gt; should handle clicking close icon" name="&lt;FilterModal /&gt; should handle clicking close icon" time="0.025">
    </testcase>
    <testcase classname="&lt;FilterModal /&gt; should open LeavePageModal if user has made changes and clicks close icon" name="&lt;FilterModal /&gt; should open LeavePageModal if user has made changes and clicks close icon" time="0.016">
    </testcase>
    <testcase classname="&lt;FilterModal /&gt; should handle clicking reset button" name="&lt;FilterModal /&gt; should handle clicking reset button" time="0.048">
    </testcase>
    <testcase classname="&lt;FilterModal /&gt; should handle clicking apply button" name="&lt;FilterModal /&gt; should handle clicking apply button" time="0.035">
    </testcase>
    <testcase classname="&lt;FilterModal /&gt; should handle clicking confirm button" name="&lt;FilterModal /&gt; should handle clicking confirm button" time="0.05">
    </testcase>
    <testcase classname="&lt;FilterModal /&gt; should handle clicking clear button" name="&lt;FilterModal /&gt; should handle clicking clear button" time="0.036">
    </testcase>
    <testcase classname="&lt;FilterModal /&gt; should close the payment methods section on clicking back from there" name="&lt;FilterModal /&gt; should close the payment methods section on clicking back from there" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FilterModalSearch /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:55" time="0.941" tests="3">
    <testcase classname="&lt;FilterModalSearch /&gt; should render the component" name="&lt;FilterModalSearch /&gt; should render the component" time="0.018">
    </testcase>
    <testcase classname="&lt;FilterModalSearch /&gt; should handle search functionality" name="&lt;FilterModalSearch /&gt; should handle search functionality" time="0.052">
    </testcase>
    <testcase classname="&lt;FilterModalSearch /&gt; should handle clearing search text" name="&lt;FilterModalSearch /&gt; should handle clearing search text" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FilterModalNoResults /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:55" time="0.889" tests="1">
    <testcase classname="&lt;FilterModalNoResults /&gt; should render the component with the passed props" name="&lt;FilterModalNoResults /&gt; should render the component with the passed props" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BlockUserModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:55" time="0.922" tests="2">
    <testcase classname="&lt;BlockUserModal /&gt; should show Block message if advertiser is not blocked by user" name="&lt;BlockUserModal /&gt; should show Block message if advertiser is not blocked by user" time="0.048">
    </testcase>
    <testcase classname="&lt;BlockUserModal /&gt; should show Unblock message if advertiser is blocked by user" name="&lt;BlockUserModal /&gt; should show Unblock message if advertiser is blocked by user" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="&lt;EmailLinkVerifiedModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:56" time="0.768" tests="2">
    <testcase classname="&lt;EmailLinkVerifiedModal /&gt; should render EmailLinkVerifiedModal" name="&lt;EmailLinkVerifiedModal /&gt; should render EmailLinkVerifiedModal" time="0.023">
    </testcase>
    <testcase classname="&lt;EmailLinkVerifiedModal /&gt; should handle confirm button click" name="&lt;EmailLinkVerifiedModal /&gt; should handle confirm button click" time="0.038">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LoadingModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:56" time="0.73" tests="1">
    <testcase classname="&lt;LoadingModal /&gt; should render loading modal" name="&lt;LoadingModal /&gt; should render loading modal" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OrderDetailsCancelModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:56" time="1.19" tests="5">
    <testcase classname="&lt;OrderDetailsCancelModal/&gt; should render order details cancel modal in desktop " name="&lt;OrderDetailsCancelModal/&gt; should render order details cancel modal in desktop " time="0.037">
    </testcase>
    <testcase classname="&lt;OrderDetailsCancelModal/&gt; should warn the user if the number of remaining cancels is equal to 1 " name="&lt;OrderDetailsCancelModal/&gt; should warn the user if the number of remaining cancels is equal to 1 " time="0.02">
    </testcase>
    <testcase classname="&lt;OrderDetailsCancelModal/&gt; should not cancel the order and hide the modal if Do not Cancel button is clicked" name="&lt;OrderDetailsCancelModal/&gt; should not cancel the order and hide the modal if Do not Cancel button is clicked" time="0.194">
    </testcase>
    <testcase classname="&lt;OrderDetailsCancelModal/&gt; should cancel the order when Cancel this order button is clicked" name="&lt;OrderDetailsCancelModal/&gt; should cancel the order when Cancel this order button is clicked" time="0.028">
    </testcase>
    <testcase classname="&lt;OrderDetailsCancelModal/&gt; should show error message when error response is received" name="&lt;OrderDetailsCancelModal/&gt; should show error message when error response is received" time="0.134">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AddPaymentMethodErrorModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:56" time="1.393" tests="2">
    <testcase classname="&lt;AddPaymentMethodErrorModal /&gt; should render AddPaymentMethodErrorModal" name="&lt;AddPaymentMethodErrorModal /&gt; should render AddPaymentMethodErrorModal" time="0.128">
    </testcase>
    <testcase classname="&lt;AddPaymentMethodErrorModal /&gt; should close the modal on clicking ok button" name="&lt;AddPaymentMethodErrorModal /&gt; should close the modal on clicking ok button" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CancelEditPaymentMethodModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:56" time="1.49" tests="3">
    <testcase classname="&lt;CancelEditPaymentMethodModal /&gt; should render &lt;CancelEditPaymentMethodModal /&gt; component" name="&lt;CancelEditPaymentMethodModal /&gt; should render &lt;CancelEditPaymentMethodModal /&gt; component" time="0.067">
    </testcase>
    <testcase classname="&lt;CancelEditPaymentMethodModal /&gt; should cancel edits when clicking on cancel button" name="&lt;CancelEditPaymentMethodModal /&gt; should cancel edits when clicking on cancel button" time="0.019">
    </testcase>
    <testcase classname="&lt;CancelEditPaymentMethodModal /&gt; should not cancel edits when clicking on dont cancel button" name="&lt;CancelEditPaymentMethodModal /&gt; should not cancel edits when clicking on dont cancel button" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AdCreateEditErrorModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:56" time="1.438" tests="4">
    <testcase classname="&lt;AdCreateEditErrorModal /&gt; should render AdCreateEditErrorModal" name="&lt;AdCreateEditErrorModal /&gt; should render AdCreateEditErrorModal" time="0.02">
    </testcase>
    <testcase classname="&lt;AdCreateEditErrorModal /&gt; should display the ok button when there is no api error" name="&lt;AdCreateEditErrorModal /&gt; should display the ok button when there is no api error" time="0.027">
    </testcase>
    <testcase classname="&lt;AdCreateEditErrorModal /&gt; should display the update ad button and &quot;You already have an ad with this range&quot; when there is api error" name="&lt;AdCreateEditErrorModal /&gt; should display the update ad button and &quot;You already have an ad with this range&quot; when there is api error" time="0.014">
    </testcase>
    <testcase classname="&lt;AdCreateEditErrorModal /&gt; should close the modal on clicking update ad/ok button" name="&lt;AdCreateEditErrorModal /&gt; should close the modal on clicking update ad/ok button" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PreviewSingle /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:57" time="0.717" tests="2">
    <testcase classname="&lt;PreviewSingle /&gt; should render the Text component if preview_single is false" name="&lt;PreviewSingle /&gt; should render the Text component if preview_single is false" time="0.013">
    </testcase>
    <testcase classname="&lt;PreviewSingle /&gt; should render the Image component if preview_single is true" name="&lt;PreviewSingle /&gt; should render the Image component if preview_single is true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;NicknameForm/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:56" time="2.075" tests="11">
    <testcase classname="&lt;NicknameForm/&gt; should render the component" name="&lt;NicknameForm/&gt; should render the component" time="0.085">
    </testcase>
    <testcase classname="&lt;NicknameForm/&gt; should accept a valid nickname" name="&lt;NicknameForm/&gt; should accept a valid nickname" time="0.173">
    </testcase>
    <testcase classname="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname with only 1 character" name="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname with only 1 character" time="0.128">
    </testcase>
    <testcase classname="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname with more than 24 characters" name="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname with more than 24 characters" time="0.137">
    </testcase>
    <testcase classname="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname that contains special characters other than .- _ @" name="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname that contains special characters other than .- _ @" time="0.067">
    </testcase>
    <testcase classname="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname that starts with special characters" name="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname that starts with special characters" time="0.072">
    </testcase>
    <testcase classname="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname that ends with special characters" name="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname that ends with special characters" time="0.076">
    </testcase>
    <testcase classname="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname that repeats special characters" name="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname that repeats special characters" time="0.046">
    </testcase>
    <testcase classname="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname that repeats a character more than 4 times" name="&lt;NicknameForm/&gt; should show an error if the user provides an invalid nickname should show an error if the user provides a nickname that repeats a character more than 4 times" time="0.069">
    </testcase>
    <testcase classname="&lt;NicknameForm/&gt; should call onCancel on click of Cancel button" name="&lt;NicknameForm/&gt; should call onCancel on click of Cancel button" time="0.025">
    </testcase>
    <testcase classname="&lt;NicknameForm/&gt; should create the advertiser on click of Confirm button" name="&lt;NicknameForm/&gt; should create the advertiser on click of Confirm button" time="0.075">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PageReturn/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:58" time="0.564" tests="1">
    <testcase classname="&lt;PageReturn/&gt; renders component with passed props" name="&lt;PageReturn/&gt; renders component with passed props" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ToggleContainer/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:58" time="0.276" tests="1">
    <testcase classname="&lt;ToggleContainer/&gt; should act as a wrapper for the child component" name="&lt;ToggleContainer/&gt; should act as a wrapper for the child component" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SectionError/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:58" time="0.532" tests="1">
    <testcase classname="&lt;SectionError/&gt; should render default state of the component" name="&lt;SectionError/&gt; should render default state of the component" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AddPaymentMethodForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:57" time="1.745" tests="10">
    <testcase classname="&lt;AddPaymentMethodForm /&gt; should render AddPaymentMethodForm component" name="&lt;AddPaymentMethodForm /&gt; should render AddPaymentMethodForm component" time="0.062">
    </testcase>
    <testcase classname="&lt;AddPaymentMethodForm /&gt; should render Loading component" name="&lt;AddPaymentMethodForm /&gt; should render Loading component" time="0.003">
    </testcase>
    <testcase classname="&lt;AddPaymentMethodForm /&gt; should call setSelectedPaymentMethod when clicking on cross icon" name="&lt;AddPaymentMethodForm /&gt; should call setSelectedPaymentMethod when clicking on cross icon" time="0.033">
    </testcase>
    <testcase classname="&lt;AddPaymentMethodForm /&gt; should call showModal if input fields are not empty when clicking Cancel button" name="&lt;AddPaymentMethodForm /&gt; should call showModal if input fields are not empty when clicking Cancel button" time="0.045">
    </testcase>
    <testcase classname="&lt;AddPaymentMethodForm /&gt; should call hideAddPaymentMethodForm and hideModal if fields are empty when clicking Cancel button" name="&lt;AddPaymentMethodForm /&gt; should call hideAddPaymentMethodForm and hideModal if fields are empty when clicking Cancel button" time="0.022">
    </testcase>
    <testcase classname="&lt;AddPaymentMethodForm /&gt; should call setShouldShowAddPaymentMethodForm, setSelectedPaymentMethod if mutation_status is success" name="&lt;AddPaymentMethodForm /&gt; should call setShouldShowAddPaymentMethodForm, setSelectedPaymentMethod if mutation_status is success" time="0.007">
    </testcase>
    <testcase classname="&lt;AddPaymentMethodForm /&gt; should call hideModal if mutation_status is success and isCurrentModal is true" name="&lt;AddPaymentMethodForm /&gt; should call hideModal if mutation_status is success and isCurrentModal is true" time="0.006">
    </testcase>
    <testcase classname="&lt;AddPaymentMethodForm /&gt; should call setShouldShowAddPaymentMethod if should_show_add_payment_method is true and mutation_status is success" name="&lt;AddPaymentMethodForm /&gt; should call setShouldShowAddPaymentMethod if should_show_add_payment_method is true and mutation_status is success" time="0.006">
    </testcase>
    <testcase classname="&lt;AddPaymentMethodForm /&gt; should call setAddPaymentMethodErrorMessage and showModal if mutation_status is error" name="&lt;AddPaymentMethodForm /&gt; should call setAddPaymentMethodErrorMessage and showModal if mutation_status is error" time="0.013">
    </testcase>
    <testcase classname="&lt;AddPaymentMethodForm /&gt; should call create when clicking on Add button if the form is filled" name="&lt;AddPaymentMethodForm /&gt; should call create when clicking on Add button if the form is filled" time="0.054">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelectPaymentMethod /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:58" time="0.847" tests="4">
    <testcase classname="&lt;SelectPaymentMethod /&gt; should render the SelectPaymentMethod component" name="&lt;SelectPaymentMethod /&gt; should render the SelectPaymentMethod component" time="0.022">
    </testcase>
    <testcase classname="&lt;SelectPaymentMethod /&gt; should render the Loading component if payment_methods_list_items is empty" name="&lt;SelectPaymentMethod /&gt; should render the Loading component if payment_methods_list_items is empty" time="0.004">
    </testcase>
    <testcase classname="&lt;SelectPaymentMethod /&gt; should call setSelectedPaymentMethod when clicking on Add new link" name="&lt;SelectPaymentMethod /&gt; should call setSelectedPaymentMethod when clicking on Add new link" time="0.023">
    </testcase>
    <testcase classname="&lt;SelectPaymentMethod /&gt; should call setSelectedPaymentMethod when clicking selecting payment method" name="&lt;SelectPaymentMethod /&gt; should call setSelectedPaymentMethod when clicking selecting payment method" time="0.077">
    </testcase>
  </testsuite>
  <testsuite name="&lt;P2PEmpty/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:58" time="0.497" tests="1">
    <testcase classname="&lt;P2PEmpty/&gt; renders component with passed title and children" name="&lt;P2PEmpty/&gt; renders component with passed title and children" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AddPaymentMethod /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:58" time="0.849" tests="3">
    <testcase classname="&lt;AddPaymentMethod /&gt; should render the AddPaymentMethod component" name="&lt;AddPaymentMethod /&gt; should render the AddPaymentMethod component" time="0.067">
    </testcase>
    <testcase classname="&lt;AddPaymentMethod /&gt; should call showModal when clicking page return icon if selected_payment_method or dirty is true" name="&lt;AddPaymentMethod /&gt; should call showModal when clicking page return icon if selected_payment_method or dirty is true" time="0.018">
    </testcase>
    <testcase classname="&lt;AddPaymentMethod /&gt; should call hideModal, hideAddPaymentMethodForm when clicking page return icon if selected_payment_method and dirty is false" name="&lt;AddPaymentMethod /&gt; should call hideModal, hideAddPaymentMethodForm when clicking page return icon if selected_payment_method and dirty is false" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="convertToMB" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.297" tests="10">
    <testcase classname="convertToMB should convert bytes to MB" name="convertToMB should convert bytes to MB" time="0.001">
    </testcase>
    <testcase classname="getErrorMessage should return error message if file is too large" name="getErrorMessage should return error message if file is too large" time="0.002">
    </testcase>
    <testcase classname="getErrorMessage should return error message if file is not supported" name="getErrorMessage should return error message if file is not supported" time="0">
    </testcase>
    <testcase classname="getPotSupportedFiles should return true if file is supported" name="getPotSupportedFiles should return true if file is supported" time="0.001">
    </testcase>
    <testcase classname="getPotSupportedFiles should return false if file is not supported" name="getPotSupportedFiles should return false if file is not supported" time="0">
    </testcase>
    <testcase classname="isImageType should return true if file is an image" name="isImageType should return true if file is an image" time="0.001">
    </testcase>
    <testcase classname="isImageType should return false if file is not an image" name="isImageType should return false if file is not an image" time="0">
    </testcase>
    <testcase classname="isPDFType should return true if file is a pdf" name="isPDFType should return true if file is a pdf" time="0">
    </testcase>
    <testcase classname="isPDFType should return false if file is not a pdf" name="isPDFType should return false if file is not a pdf" time="0.001">
    </testcase>
    <testcase classname="truncateFileName should truncate file name if it is too long" name="truncateFileName should truncate file name if it is too long" time="0">
    </testcase>
  </testsuite>
  <testsuite name="decimalValidator" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.293" tests="10">
    <testcase classname="decimalValidator should return true if the string is a valid decimal number" name="decimalValidator should return true if the string is a valid decimal number" time="0.001">
    </testcase>
    <testcase classname="decimalValidator should return false if the string is not a valid decimal number" name="decimalValidator should return false if the string is not a valid decimal number" time="0.002">
    </testcase>
    <testcase classname="lengthValidator should return true if the string is between 1 and 300 characters" name="lengthValidator should return true if the string is between 1 and 300 characters" time="0.002">
    </testcase>
    <testcase classname="lengthValidator should return false if the string is not between 1 and 300 characters" name="lengthValidator should return false if the string is not between 1 and 300 characters" time="0">
    </testcase>
    <testcase classname="textValidator should return true if the string contains only letters, numbers, spaces, and certain punctuation marks" name="textValidator should return true if the string contains only letters, numbers, spaces, and certain punctuation marks" time="0.001">
    </testcase>
    <testcase classname="textValidator should return false if the string contains other characters" name="textValidator should return false if the string contains other characters" time="0">
    </testcase>
    <testcase classname="rangeValidator should return true if the value is within the set range" name="rangeValidator should return true if the value is within the set range" time="0.002">
    </testcase>
    <testcase classname="rangeValidator should return false if the value is not within the set range" name="rangeValidator should return false if the value is not within the set range" time="0.008">
    </testcase>
    <testcase classname="floatingPointValidator should return true if the value is a valid floating-point integer" name="floatingPointValidator should return true if the value is a valid floating-point integer" time="0.001">
    </testcase>
    <testcase classname="floatingPointValidator should return false if the value is not a valid floating-point integer" name="floatingPointValidator should return false if the value is not a valid floating-point integer" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getFormattedDateString" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.264" tests="5">
    <testcase classname="getFormattedDateString should return the date in the format &quot;DD MMM YYYY, HH:mm&quot;" name="getFormattedDateString should return the date in the format &quot;DD MMM YYYY, HH:mm&quot;" time="0.003">
    </testcase>
    <testcase classname="getFormattedDateString should return the date in the format &quot;DD MMM YYYY, HH:mm:ss&quot;" name="getFormattedDateString should return the date in the format &quot;DD MMM YYYY, HH:mm:ss&quot;" time="0.001">
    </testcase>
    <testcase classname="convertToMillis should return the epoch time in milliseconds" name="convertToMillis should return the epoch time in milliseconds" time="0.002">
    </testcase>
    <testcase classname="getDateAfterHours should return the date string after the given number of hours" name="getDateAfterHours should return the date string after the given number of hours" time="0.003">
    </testcase>
    <testcase classname="millisecondsToTimer should return the timer string in the format &quot;HH:MM:SS&quot;" name="millisecondsToTimer should return the timer string in the format &quot;HH:MM:SS&quot;" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="generateErrorDialogBody" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:58" time="0.452" tests="20">
    <testcase classname="generateErrorDialogBody should return &quot;Please set a different minimum and/or maximum order limit&quot; when error_code is &quot;AdvertSameLimits&quot;" name="generateErrorDialogBody should return &quot;Please set a different minimum and/or maximum order limit&quot; when error_code is &quot;AdvertSameLimits&quot;" time="0.003">
    </testcase>
    <testcase classname="generateErrorDialogBody should return &quot;You already have an ad with the same exchange rate&quot; when error_code is &quot;DuplicateAdvert&quot;" name="generateErrorDialogBody should return &quot;You already have an ad with the same exchange rate&quot; when error_code is &quot;DuplicateAdvert&quot;" time="0.001">
    </testcase>
    <testcase classname="generateErrorDialogBody should return the passed error_message when error_code is not &quot;AdvertSameLimits&quot; or &quot;DuplicateAdvert&quot;" name="generateErrorDialogBody should return the passed error_message when error_code is not &quot;AdvertSameLimits&quot; or &quot;DuplicateAdvert&quot;" time="0.002">
    </testcase>
    <testcase classname="generateErrorDialogBody should return &quot;Something&apos;s not right&quot; when error_code is not &quot;AdvertSameLimits&quot; or &quot;DuplicateAdvert&quot; and no error_message is passed" name="generateErrorDialogBody should return &quot;Something&apos;s not right&quot; when error_code is not &quot;AdvertSameLimits&quot; or &quot;DuplicateAdvert&quot; and no error_message is passed" time="0.002">
    </testcase>
    <testcase classname="generateErrorDialogTitle should return &quot;You already have an ad with this range&quot; when error_code is &quot;AdvertSameLimits&quot;" name="generateErrorDialogTitle should return &quot;You already have an ad with this range&quot; when error_code is &quot;AdvertSameLimits&quot;" time="0.002">
    </testcase>
    <testcase classname="generateErrorDialogTitle should return &quot;You already have an ad with this rate&quot; when error_code is &quot;DuplicateAdvert&quot;" name="generateErrorDialogTitle should return &quot;You already have an ad with this rate&quot; when error_code is &quot;DuplicateAdvert&quot;" time="0.002">
    </testcase>
    <testcase classname="generateErrorDialogTitle should return &quot;Something&apos;s not right&quot; when error_code is not &quot;AdvertSameLimits&quot; or &quot;DuplicateAdvert&quot;" name="generateErrorDialogTitle should return &quot;Something&apos;s not right&quot; when error_code is not &quot;AdvertSameLimits&quot; or &quot;DuplicateAdvert&quot;" time="0.001">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Online&quot; when last_online_time is not passed and user is online" name="getLastOnlineLabel should return &quot;Online&quot; when last_online_time is not passed and user is online" time="0.002">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Seen n hours ago&quot; when last seen is in hours" name="getLastOnlineLabel should return &quot;Seen n hours ago&quot; when last seen is in hours" time="0.006">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Seen 1 hour ago&quot; when user was last seen 1 hour ago" name="getLastOnlineLabel should return &quot;Seen 1 hour ago&quot; when user was last seen 1 hour ago" time="0.004">
    </testcase>
    <testcase classname="getLastOnlineLabel should return  &quot;Seen more than 6 months ago&quot; when user was last online more than 6 months ago" name="getLastOnlineLabel should return  &quot;Seen more than 6 months ago&quot; when user was last online more than 6 months ago" time="0.002">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Seen 1 month ago&quot; when user was last online 1 month ago" name="getLastOnlineLabel should return &quot;Seen 1 month ago&quot; when user was last online 1 month ago" time="0.001">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Seen 1 minute ago&quot; when user was last online 1 minute ago" name="getLastOnlineLabel should return &quot;Seen 1 minute ago&quot; when user was last online 1 minute ago" time="0.002">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Seen n minutes ago&quot; when last seen is in minutes" name="getLastOnlineLabel should return &quot;Seen n minutes ago&quot; when last seen is in minutes" time="0.002">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Online&quot; when last seen is in seconds" name="getLastOnlineLabel should return &quot;Online&quot; when last seen is in seconds" time="0.001">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Seen n days ago&quot; when last seen is in days" name="getLastOnlineLabel should return &quot;Seen n days ago&quot; when last seen is in days" time="0.001">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Seen 1 day ago&quot; when user was last online 1 day ago" name="getLastOnlineLabel should return &quot;Seen 1 day ago&quot; when user was last online 1 day ago" time="0.002">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Seen more than 6 months ago&quot; when last seen is in years" name="getLastOnlineLabel should return &quot;Seen more than 6 months ago&quot; when last seen is in years" time="0.001">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Seen n months ago&quot; when last seen is in months" name="getLastOnlineLabel should return &quot;Seen n months ago&quot; when last seen is in months" time="0.003">
    </testcase>
    <testcase classname="getLastOnlineLabel should return &quot;Seen more than 6 months ago&quot; when user is not online and last seen is not known" name="getLastOnlineLabel should return &quot;Seen more than 6 months ago&quot; when user is not online and last seen is not known" time="0">
    </testcase>
  </testsuite>
  <testsuite name="countDecimalPlaces" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.256" tests="2">
    <testcase classname="countDecimalPlaces should return the correct number of decimal places" name="countDecimalPlaces should return the correct number of decimal places" time="0.002">
    </testcase>
    <testcase classname="getShortNickname should return the correct short nickname" name="getShortNickname should return the correct short nickname" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getErrorMessage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.313" tests="6">
    <testcase classname="getErrorMessage should return default message if is_invalid_advertiser_id is false" name="getErrorMessage should return default message if is_invalid_advertiser_id is false" time="0.003">
    </testcase>
    <testcase classname="getErrorMessage should return error message if is_invalid_advertiser_id is true" name="getErrorMessage should return error message if is_invalid_advertiser_id is true" time="0.002">
    </testcase>
    <testcase classname="getErrorModalTitle should return default title if is_invalid_advertiser_id is false" name="getErrorModalTitle should return default title if is_invalid_advertiser_id is false" time="0.001">
    </testcase>
    <testcase classname="getErrorModalTitle should return error title if is_invalid_advertiser_id is true" name="getErrorModalTitle should return error title if is_invalid_advertiser_id is true" time="0">
    </testcase>
    <testcase classname="getWidth should return 40rem if isMobile is false" name="getWidth should return 40rem if isMobile is false" time="0.009">
    </testcase>
    <testcase classname="getWidth should return 90rem if isMobile is true" name="getWidth should return 90rem if isMobile is true" time="0">
    </testcase>
  </testsuite>
  <testsuite name="server_time" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.327" tests="5">
    <testcase classname="server_time should return undefined if server_time is not set when calling get" name="server_time should return undefined if server_time is not set when calling get" time="0.002">
    </testcase>
    <testcase classname="server_time should call requestTime when calling init" name="server_time should call requestTime when calling init" time="0.001">
    </testcase>
    <testcase classname="server_time should call requestTime every 30 seconds when calling init" name="server_time should call requestTime every 30 seconds when calling init" time="0.002">
    </testcase>
    <testcase classname="server_time should return server_time when calling get" name="server_time should return server_time when calling get" time="0">
    </testcase>
    <testcase classname="server_time should return distance to server time when calling getDistanceToServerTime" name="server_time should return distance to server time when calling getDistanceToServerTime" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="roundOffDecimal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.354" tests="6">
    <testcase classname="roundOffDecimal should return the rounded off value" name="roundOffDecimal should return the rounded off value" time="0.003">
    </testcase>
    <testcase classname="setDecimalPlaces should return the number with the decimal places set" name="setDecimalPlaces should return the number with the decimal places set" time="0">
    </testcase>
    <testcase classname="percentOf should return the percent of the number" name="percentOf should return the percent of the number" time="0.001">
    </testcase>
    <testcase classname="generateEffectiveRate should return the effective rate and the display effective rate" name="generateEffectiveRate should return the effective rate and the display effective rate" time="0.003">
    </testcase>
    <testcase classname="removeTrailingZeros should return the number without trailing zeros" name="removeTrailingZeros should return the number without trailing zeros" time="0">
    </testcase>
    <testcase classname="formatInput should return the formatted input" name="formatInput should return the formatted input" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="getTextSize" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.338" tests="6">
    <testcase classname="getTextSize should return desktop size if isMobile is false" name="getTextSize should return desktop size if isMobile is false" time="0.001">
    </testcase>
    <testcase classname="getTextSize should return mobile size if isMobile is true" name="getTextSize should return mobile size if isMobile is true" time="0.001">
    </testcase>
    <testcase classname="getIconSize should return mobile size if isMobile is true" name="getIconSize should return mobile size if isMobile is true" time="0">
    </testcase>
    <testcase classname="getIconSize should return desktop size if isMobile is false" name="getIconSize should return desktop size if isMobile is false" time="0">
    </testcase>
    <testcase classname="getInlineTextSize should return mobile size if isMobile is true" name="getInlineTextSize should return mobile size if isMobile is true" time="0.001">
    </testcase>
    <testcase classname="getInlineTextSize should return desktop size if isMobile is false" name="getInlineTextSize should return desktop size if isMobile is false" time="0">
    </testcase>
  </testsuite>
  <testsuite name="createExtendedOrderDetails" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.556" tests="40">
    <testcase classname="createExtendedOrderDetails should handle getter for is_buy_order" name="createExtendedOrderDetails should handle getter for is_buy_order" time="0.013">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_sell_order" name="createExtendedOrderDetails should handle getter for is_sell_order" time="0.002">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_buyer_cancelled_order" name="createExtendedOrderDetails should handle getter for is_buyer_cancelled_order" time="0.003">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_buyer_confirmed_order" name="createExtendedOrderDetails should handle getter for is_buyer_confirmed_order" time="0.003">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_completed_order" name="createExtendedOrderDetails should handle getter for is_completed_order" time="0.004">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_disputed_order" name="createExtendedOrderDetails should handle getter for is_disputed_order" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_dispute_refunded_order" name="createExtendedOrderDetails should handle getter for is_dispute_refunded_order" time="0">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_dispute_completed_order" name="createExtendedOrderDetails should handle getter for is_dispute_completed_order" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_expired_order" name="createExtendedOrderDetails should handle getter for is_expired_order" time="0">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_incoming_order" name="createExtendedOrderDetails should handle getter for is_incoming_order" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_pending_order" name="createExtendedOrderDetails should handle getter for is_pending_order" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_refunded_order" name="createExtendedOrderDetails should handle getter for is_refunded_order" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_my_ad" name="createExtendedOrderDetails should handle getter for is_my_ad" time="0.007">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_inactive_order" name="createExtendedOrderDetails should handle getter for is_inactive_order" time="0.003">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_active_order" name="createExtendedOrderDetails should handle getter for is_active_order" time="0.002">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_finalised_order" name="createExtendedOrderDetails should handle getter for is_finalised_order" time="0.002">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle has_review_details method" name="createExtendedOrderDetails should handle has_review_details method" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_order_reviewable" name="createExtendedOrderDetails should handle getter for is_order_reviewable" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_user_recommended_previously" name="createExtendedOrderDetails should handle getter for is_user_recommended_previously" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for rating" name="createExtendedOrderDetails should handle getter for rating" time="0.002">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for is_ongoing_order" name="createExtendedOrderDetails should handle getter for is_ongoing_order" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for labels method" name="createExtendedOrderDetails should handle getter for labels method" time="0.004">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for other_user_details" name="createExtendedOrderDetails should handle getter for other_user_details" time="0.003">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for order_expiry_milliseconds" name="createExtendedOrderDetails should handle getter for order_expiry_milliseconds" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for purchase_time" name="createExtendedOrderDetails should handle getter for purchase_time" time="0">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handler getter for is_buy_order_for_user" name="createExtendedOrderDetails should handler getter for is_buy_order_for_user" time="0">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for has_timer_expired method" name="createExtendedOrderDetails should handle getter for has_timer_expired method" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for remaining_seconds method" name="createExtendedOrderDetails should handle getter for remaining_seconds method" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for should_highlight_disabled" name="createExtendedOrderDetails should handle getter for should_highlight_disabled" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for should_highlight_alert" name="createExtendedOrderDetails should handle getter for should_highlight_alert" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for should_highlight_danger" name="createExtendedOrderDetails should handle getter for should_highlight_danger" time="0.002">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter for should_highlight_success method" name="createExtendedOrderDetails should handle getter for should_highlight_success method" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle function for showing cancel and paid buttons" name="createExtendedOrderDetails should handle function for showing cancel and paid buttons" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle function for showing complain and received button" name="createExtendedOrderDetails should handle function for showing complain and received button" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle function for showing only complain button" name="createExtendedOrderDetails should handle function for showing only complain button" time="0.002">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle function for showing only received button" name="createExtendedOrderDetails should handle function for showing only received button" time="0.007">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle function for showing order footer" name="createExtendedOrderDetails should handle function for showing order footer" time="0.011">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle function for showing order timer" name="createExtendedOrderDetails should handle function for showing order timer" time="0.003">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle function for showing lost funds banner" name="createExtendedOrderDetails should handle function for showing lost funds banner" time="0.001">
    </testcase>
    <testcase classname="createExtendedOrderDetails should handle getter function for status_string" name="createExtendedOrderDetails should handle getter function for status_string" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="MyAdsStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.682" tests="3">
    <testcase classname="MyAdsStore should instantiate" name="MyAdsStore should instantiate" time="0.005">
    </testcase>
    <testcase classname="MyAdsStore should handle activate/deactivate of ads" name="MyAdsStore should handle activate/deactivate of ads" time="0.056">
    </testcase>
    <testcase classname="MyAdsStore should show error popup when api throws error on activat/deactivate of ads" name="MyAdsStore should show error popup when api throws error on activat/deactivate of ads" time="0.054">
    </testcase>
  </testsuite>
  <testsuite name="exponentialMovingAverage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.534" tests="4">
    <testcase classname="exponentialMovingAverage single value with periods of 1 equals the value" name="exponentialMovingAverage single value with periods of 1 equals the value" time="0.002">
    </testcase>
    <testcase classname="exponentialMovingAverage whole data sample" name="exponentialMovingAverage whole data sample" time="0">
    </testcase>
    <testcase classname="exponentialMovingAverage wuut2" name="exponentialMovingAverage wuut2" time="0.003">
    </testcase>
    <testcase classname="exponentialMovingAverage real world" name="exponentialMovingAverage real world" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="math" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.678" tests="5">
    <testcase classname="math mean" name="math mean" time="0.002">
    </testcase>
    <testcase classname="math stddev" name="math stddev" time="0.002">
    </testcase>
    <testcase classname="math sum" name="math sum" time="0.001">
    </testcase>
    <testcase classname="math takeLast" name="math takeLast" time="0.006">
    </testcase>
    <testcase classname="math takeField" name="math takeField" time="0">
    </testcase>
  </testsuite>
  <testsuite name="macd" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:00" time="0.434" tests="1">
    <testcase classname="macd real world" name="macd real world" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="bollingerBands" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="1.012" tests="7">
    <testcase classname="bollingerBands single value with periods of 1 equals the value" name="bollingerBands single value with periods of 1 equals the value" time="0.006">
    </testcase>
    <testcase classname="bollingerBands whole data sample" name="bollingerBands whole data sample" time="0.001">
    </testcase>
    <testcase classname="bollingerBands can extract field" name="bollingerBands can extract field" time="0.001">
    </testcase>
    <testcase classname="bollingerBands fractions" name="bollingerBands fractions" time="0">
    </testcase>
    <testcase classname="bollingerBands throws if periods is longer than data length" name="bollingerBands throws if periods is longer than data length" time="0.003">
    </testcase>
    <testcase classname="bollingerBands array" name="bollingerBands array" time="0">
    </testcase>
    <testcase classname="bollingerBands real world" name="bollingerBands real world" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="simpleMovingAverage" errors="0" failures="0" skipped="1" timestamp="2024-02-01T03:23:59" time="1.003" tests="9">
    <testcase classname="simpleMovingAverage single value with periods of 1 equals the value" name="simpleMovingAverage single value with periods of 1 equals the value" time="0.002">
    </testcase>
    <testcase classname="simpleMovingAverage whole data sample" name="simpleMovingAverage whole data sample" time="0">
    </testcase>
    <testcase classname="simpleMovingAverage fractions" name="simpleMovingAverage fractions" time="0.008">
    </testcase>
    <testcase classname="simpleMovingAverage throws if periods is longer than data length" name="simpleMovingAverage throws if periods is longer than data length" time="0.003">
    </testcase>
    <testcase classname="simpleMovingAverage part of whole" name="simpleMovingAverage part of whole" time="0">
    </testcase>
    <testcase classname="simpleMovingAverage longer stuff" name="simpleMovingAverage longer stuff" time="0">
      <skipped/>
    </testcase>
    <testcase classname="simpleMovingAverage can extract field" name="simpleMovingAverage can extract field" time="0">
    </testcase>
    <testcase classname="simpleMovingAverage complicated" name="simpleMovingAverage complicated" time="0.001">
    </testcase>
    <testcase classname="simpleMovingAverage real world" name="simpleMovingAverage real world" time="0">
    </testcase>
  </testsuite>
  <testsuite name="relativeStrengthIndex" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:23:59" time="0.776" tests="4">
    <testcase classname="relativeStrengthIndex data length equal to periods is equal to 0" name="relativeStrengthIndex data length equal to periods is equal to 0" time="0.001">
    </testcase>
    <testcase classname="relativeStrengthIndex ascending data (all wins) is equal to 0" name="relativeStrengthIndex ascending data (all wins) is equal to 0" time="0.001">
    </testcase>
    <testcase classname="relativeStrengthIndex descending data (all losses) is equal to 100" name="relativeStrengthIndex descending data (all losses) is equal to 100" time="0">
    </testcase>
    <testcase classname="relativeStrengthIndex real world" name="relativeStrengthIndex real world" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useWalletsList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:00" time="1.119" tests="1">
    <testcase classname="useWalletsList should return a list of transactions" name="useWalletsList should return a list of transactions" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="useCFDRealAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:00" time="1.019" tests="3">
    <testcase classname="useCFDRealAccounts should return empty array when user has no CFD accounts" name="useCFDRealAccounts should return empty array when user has no CFD accounts" time="0.014">
    </testcase>
    <testcase classname="useCFDRealAccounts should return empty array when user has no CFD real accounts" name="useCFDRealAccounts should return empty array when user has no CFD real accounts" time="0.003">
    </testcase>
    <testcase classname="useCFDRealAccounts should return proper data when user has CFD real accounts" name="useCFDRealAccounts should return proper data when user has CFD real accounts" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="useStatesList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:00" time="0.975" tests="2">
    <testcase classname="useStatesList should return an empty array when the store is not ready" name="useStatesList should return an empty array when the store is not ready" time="0.009">
    </testcase>
    <testcase classname="useStatesList should return data fetched along with correct status" name="useStatesList should return data fetched along with correct status" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useIsRealAccountNeededForCashier" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:00" time="1.089" tests="4">
    <testcase classname="useIsRealAccountNeededForCashier should return false if user is not in real account" name="useIsRealAccountNeededForCashier should return false if user is not in real account" time="0.011">
    </testcase>
    <testcase classname="useIsRealAccountNeededForCashier should return false if user has no real account" name="useIsRealAccountNeededForCashier should return false if user has no real account" time="0.002">
    </testcase>
    <testcase classname="useIsRealAccountNeededForCashier should return true if client is in real and has a real account" name="useIsRealAccountNeededForCashier should return true if client is in real and has a real account" time="0.002">
    </testcase>
    <testcase classname="useIsRealAccountNeededForCashier should return false if client has svg and maltainvest account" name="useIsRealAccountNeededForCashier should return false if client has svg and maltainvest account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useFiatAccountList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:00" time="1.106" tests="4">
    <testcase classname="useFiatAccountList should return an empty list if client has no account" name="useFiatAccountList should return an empty list if client has no account" time="0.032">
    </testcase>
    <testcase classname="useFiatAccountList should return an empty list if client has no fiat account" name="useFiatAccountList should return an empty list if client has no fiat account" time="0.003">
    </testcase>
    <testcase classname="useFiatAccountList should return list of fiat accounts if client any fiat account" name="useFiatAccountList should return list of fiat accounts if client any fiat account" time="0.002">
    </testcase>
    <testcase classname="useFiatAccountList should return list of fiat accounts if client has 1 CR fiat and 1 MF fiat account" name="useFiatAccountList should return list of fiat accounts if client has 1 CR fiat and 1 MF fiat account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useCFDDemoAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:01" time="0.488" tests="3">
    <testcase classname="useCFDDemoAccounts should return empty array when user has no CFD accounts" name="useCFDDemoAccounts should return empty array when user has no CFD accounts" time="0.013">
    </testcase>
    <testcase classname="useCFDDemoAccounts should return empty array when user has no CFD demo accounts" name="useCFDDemoAccounts should return empty array when user has no CFD demo accounts" time="0.003">
    </testcase>
    <testcase classname="useCFDDemoAccounts should return proper data when user has CFD demo accounts" name="useCFDDemoAccounts should return proper data when user has CFD demo accounts" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="useActiveWallet" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:00" time="1.171" tests="1">
    <testcase classname="useActiveWallet should return active wallet" name="useActiveWallet should return active wallet" time="0.053">
    </testcase>
  </testsuite>
  <testsuite name="useHasFiatCurrency" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:01" time="0.485" tests="4">
    <testcase classname="useHasFiatCurrency should return false if client has no account" name="useHasFiatCurrency should return false if client has no account" time="0.011">
    </testcase>
    <testcase classname="useHasFiatCurrency should return false if client has only BTC account" name="useHasFiatCurrency should return false if client has only BTC account" time="0.008">
    </testcase>
    <testcase classname="useHasFiatCurrency should return false if client has only BTC account" name="useHasFiatCurrency should return false if client has only BTC account" time="0.002">
    </testcase>
    <testcase classname="useHasFiatCurrency should return true if client has fiat account" name="useHasFiatCurrency should return true if client has fiat account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useHasActiveRealAccount" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:01" time="0.589" tests="3">
    <testcase classname="useHasActiveRealAccount should return false if client has no account" name="useHasActiveRealAccount should return false if client has no account" time="0.011">
    </testcase>
    <testcase classname="useHasActiveRealAccount should return false if client has only virtual account" name="useHasActiveRealAccount should return false if client has only virtual account" time="0.008">
    </testcase>
    <testcase classname="useHasActiveRealAccount should return true if client has real account" name="useHasActiveRealAccount should return true if client has real account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useP2PCompletedOrdersNotification" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:01" time="0.479" tests="5">
    <testcase classname="useP2PCompletedOrdersNotification should not subscribe to p2p_order_list if user is not logged in" name="useP2PCompletedOrdersNotification should not subscribe to p2p_order_list if user is not logged in" time="0.01">
    </testcase>
    <testcase classname="useP2PCompletedOrdersNotification should not subscribe to p2p_order_list if user p2p is disabled" name="useP2PCompletedOrdersNotification should not subscribe to p2p_order_list if user p2p is disabled" time="0.003">
    </testcase>
    <testcase classname="useP2PCompletedOrdersNotification should not call unsubscribe from p2p_order_list if user is logged in and p2p is enabled but list is not subscribed" name="useP2PCompletedOrdersNotification should not call unsubscribe from p2p_order_list if user is logged in and p2p is enabled but list is not subscribed" time="0.007">
    </testcase>
    <testcase classname="useP2PCompletedOrdersNotification should unsubscribe from p2p_order_list if user is logged in and p2p is enabled and list is subscribed" name="useP2PCompletedOrdersNotification should unsubscribe from p2p_order_list if user is logged in and p2p is enabled and list is subscribed" time="0.004">
    </testcase>
    <testcase classname="useP2PCompletedOrdersNotification should subscribe to completed p2p_order_list" name="useP2PCompletedOrdersNotification should subscribe to completed p2p_order_list" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useP2PPaymentMethods" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:01" time="0.458" tests="4">
    <testcase classname="useP2PPaymentMethods should return undefined when p2p_payment_methods is not available" name="useP2PPaymentMethods should return undefined when p2p_payment_methods is not available" time="0.013">
    </testcase>
    <testcase classname="useP2PPaymentMethods should return bank_transfer p2p payment methods with expected data" name="useP2PPaymentMethods should return bank_transfer p2p payment methods with expected data" time="0.008">
    </testcase>
    <testcase classname="useP2PPaymentMethods should return alipay (ewallet) p2p payment methods with expected data" name="useP2PPaymentMethods should return alipay (ewallet) p2p payment methods with expected data" time="0.017">
    </testcase>
    <testcase classname="useP2PPaymentMethods should return other p2p payment methods with expected data" name="useP2PPaymentMethods should return other p2p payment methods with expected data" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="useLocalStorageData" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.276" tests="4">
    <testcase classname="useLocalStorageData should get the current value from localStorage when it exists" name="useLocalStorageData should get the current value from localStorage when it exists" time="0.006">
    </testcase>
    <testcase classname="useLocalStorageData should use the fallback value when localStorage key does not exist" name="useLocalStorageData should use the fallback value when localStorage key does not exist" time="0.002">
    </testcase>
    <testcase classname="useLocalStorageData should get null when localStorage key does not exist" name="useLocalStorageData should get null when localStorage key does not exist" time="0.001">
    </testcase>
    <testcase classname="useLocalStorageData should clear the localStorage key and reset to fallback value" name="useLocalStorageData should clear the localStorage key and reset to fallback value" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useP2PAdvertList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:01" time="0.429" tests="2">
    <testcase classname="useP2PAdvertList should return undefined if there is no response" name="useP2PAdvertList should return undefined if there is no response" time="0.01">
    </testcase>
    <testcase classname="useP2PAdvertList should return the p2p_advert_list object from response" name="useP2PAdvertList should return the p2p_advert_list object from response" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="useAccountTransferVisible" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:01" time="0.447" tests="6">
    <testcase classname="useAccountTransferVisible should return false if residence is im" name="useAccountTransferVisible should return false if residence is im" time="0.011">
    </testcase>
    <testcase classname="useAccountTransferVisible should return false if landing_company_shortcode is malta" name="useAccountTransferVisible should return false if landing_company_shortcode is malta" time="0.002">
    </testcase>
    <testcase classname="useAccountTransferVisible should return false if doesn&apos;t have malta invest account" name="useAccountTransferVisible should return false if doesn&apos;t have malta invest account" time="0.009">
    </testcase>
    <testcase classname="useAccountTransferVisible should return true if residence is not im and landing_company_shortcode is not malta" name="useAccountTransferVisible should return true if residence is not im and landing_company_shortcode is not malta" time="0.002">
    </testcase>
    <testcase classname="useAccountTransferVisible should return true if residence is not im and landing_company_shortcode is not malta" name="useAccountTransferVisible should return true if residence is not im and landing_company_shortcode is not malta" time="0.001">
    </testcase>
    <testcase classname="useAccountTransferVisible should return true if residence is not im and has malta invest account" name="useAccountTransferVisible should return true if residence is not im and has malta invest account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useNotificationEvent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.41" tests="1">
    <testcase classname="useNotificationEvent should return the notification event" name="useNotificationEvent should return the notification event" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="useIsSystemMaintenance" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.397" tests="3">
    <testcase classname="useIsSystemMaintenance should be false if there is no system_maintenance status" name="useIsSystemMaintenance should be false if there is no system_maintenance status" time="0.015">
    </testcase>
    <testcase classname="useIsSystemMaintenance should be true if account_status is undefined" name="useIsSystemMaintenance should be true if account_status is undefined" time="0.007">
    </testcase>
    <testcase classname="useIsSystemMaintenance should be true if there is system_maintenance status" name="useIsSystemMaintenance should be true if there is system_maintenance status" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="useCFDCanGetMoreMT5Accounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.394" tests="5">
    <testcase classname="useCFDCanGetMoreMT5Accounts should return false if not real user" name="useCFDCanGetMoreMT5Accounts should return false if not real user" time="0.009">
    </testcase>
    <testcase classname="useCFDCanGetMoreMT5Accounts should return false if is EU user" name="useCFDCanGetMoreMT5Accounts should return false if is EU user" time="0.002">
    </testcase>
    <testcase classname="useCFDCanGetMoreMT5Accounts should return false if no eligible account types" name="useCFDCanGetMoreMT5Accounts should return false if no eligible account types" time="0.006">
    </testcase>
    <testcase classname="useCFDCanGetMoreMT5Accounts should return false if high risk client for MT5" name="useCFDCanGetMoreMT5Accounts should return false if high risk client for MT5" time="0.003">
    </testcase>
    <testcase classname="useCFDCanGetMoreMT5Accounts should return true if eligible conditions are met" name="useCFDCanGetMoreMT5Accounts should return true if eligible conditions are met" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useStoreWalletAccountsList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.408" tests="3">
    <testcase classname="useStoreWalletAccountsList should return wallets list for the current loginid" name="useStoreWalletAccountsList should return wallets list for the current loginid" time="0.01">
    </testcase>
    <testcase classname="useStoreWalletAccountsList should return has_wallet equals to true if the client has at least one wallet" name="useStoreWalletAccountsList should return has_wallet equals to true if the client has at least one wallet" time="0.001">
    </testcase>
    <testcase classname="useStoreWalletAccountsList should return has_wallet equals to false if the client doesn&apos;t have any wallet" name="useStoreWalletAccountsList should return has_wallet equals to false if the client doesn&apos;t have any wallet" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="usePaymentAgentTransferVisible" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.395" tests="2">
    <testcase classname="usePaymentAgentTransferVisible should return false if is_authenticated_payment_agent is 0" name="usePaymentAgentTransferVisible should return false if is_authenticated_payment_agent is 0" time="0.01">
    </testcase>
    <testcase classname="usePaymentAgentTransferVisible should return true if is_authenticated_payment_agent is 1" name="usePaymentAgentTransferVisible should return true if is_authenticated_payment_agent is 1" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useHasCryptoCurrency" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.392" tests="4">
    <testcase classname="useHasCryptoCurrency should return false if client has no account" name="useHasCryptoCurrency should return false if client has no account" time="0.011">
    </testcase>
    <testcase classname="useHasCryptoCurrency should return false if client has no crypto account" name="useHasCryptoCurrency should return false if client has no crypto account" time="0.003">
    </testcase>
    <testcase classname="useHasCryptoCurrency should return true if client has crypto account" name="useHasCryptoCurrency should return true if client has crypto account" time="0.002">
    </testcase>
    <testcase classname="useHasCryptoCurrency should return true if client has at least one crypto account" name="useHasCryptoCurrency should return true if client has at least one crypto account" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="usePlatformRealAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.396" tests="3">
    <testcase classname="usePlatformRealAccounts should return null when user has no platform real accounts" name="usePlatformRealAccounts should return null when user has no platform real accounts" time="0.01">
    </testcase>
    <testcase classname="usePlatformRealAccounts should return svg accounts when user has real account and switch to non-eu accounts" name="usePlatformRealAccounts should return svg accounts when user has real account and switch to non-eu accounts" time="0.002">
    </testcase>
    <testcase classname="usePlatformRealAccounts should return maltainvest accounts when user has real account and switch to eu accounts" name="usePlatformRealAccounts should return maltainvest accounts when user has real account and switch to eu accounts" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useWalletMigration" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.401" tests="3">
    <testcase classname="useWalletMigration should return wallet migration state" name="useWalletMigration should return wallet migration state" time="0.01">
    </testcase>
    <testcase classname="useWalletMigration should send start wallet migration request" name="useWalletMigration should send start wallet migration request" time="0.007">
    </testcase>
    <testcase classname="useWalletMigration should send reset wallet migration request" name="useWalletMigration should send reset wallet migration request" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useOnrampVisible" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.395" tests="3">
    <testcase classname="useOnrampVisible should return false if client&apos;s currency is not crypto" name="useOnrampVisible should return false if client&apos;s currency is not crypto" time="0.009">
    </testcase>
    <testcase classname="useOnrampVisible should return false if client&apos;s currency is crypto but client is virtual" name="useOnrampVisible should return false if client&apos;s currency is crypto but client is virtual" time="0.002">
    </testcase>
    <testcase classname="useOnrampVisible should return true if client&apos;s currency is crypto and client is not virtual" name="useOnrampVisible should return true if client&apos;s currency is crypto and client is not virtual" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useTransferBetweenAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.495" tests="3">
    <testcase classname="useTransferBetweenAccounts should be correct amount of transfer accounts" name="useTransferBetweenAccounts should be correct amount of transfer accounts" time="0.012">
    </testcase>
    <testcase classname="useTransferBetweenAccounts all transfer accounts should have extended properties" name="useTransferBetweenAccounts all transfer accounts should have extended properties" time="0.014">
    </testcase>
    <testcase classname="useTransferBetweenAccounts should return proper active account with extended properties" name="useTransferBetweenAccounts should return proper active account with extended properties" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useExchangeRate" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="0.394" tests="2">
    <testcase classname="useExchangeRate should return undefined if currency is not found" name="useExchangeRate should return undefined if currency is not found" time="0.012">
    </testcase>
    <testcase classname="useExchangeRate should return correct rate for the given currency other than USD" name="useExchangeRate should return correct rate for the given currency other than USD" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="useFileUploader" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.247" tests="3">
    <testcase classname="useFileUploader should initialize without error" name="useFileUploader should initialize without error" time="0.007">
    </testcase>
    <testcase classname="useFileUploader should upload files successfully" name="useFileUploader should upload files successfully" time="0.003">
    </testcase>
    <testcase classname="useFileUploader should handle file upload errors" name="useFileUploader should handle file upload errors" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="useVerifyEmail" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.376" tests="3">
    <testcase classname="useVerifyEmail should not send the request if client does&apos;t have email" name="useVerifyEmail should not send the request if client does&apos;t have email" time="0.01">
    </testcase>
    <testcase classname="useVerifyEmail should send the request if client have email" name="useVerifyEmail should send the request if client have email" time="0.004">
    </testcase>
    <testcase classname="useVerifyEmail should not send the request if the counter is still running" name="useVerifyEmail should not send the request if the counter is still running" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useCryptoTransactions" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.399" tests="2">
    <testcase classname="useCryptoTransactions should return an empty list if the user doesn&apos;t have any crypto transactions" name="useCryptoTransactions should return an empty list if the user doesn&apos;t have any crypto transactions" time="0.013">
    </testcase>
    <testcase classname="useCryptoTransactions should return the list of crypto transactions" name="useCryptoTransactions should return the list of crypto transactions" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="useWalletTransfer" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.428" tests="1">
    <testcase classname="useWalletTransfer from_account should be undefined by default" name="useWalletTransfer from_account should be undefined by default" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="useNeedAuthentication" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.516" tests="4">
    <testcase classname="useNeedAuthentication should be false if is_authentication_needed and is_low_risk_cr_eu_real both are false" name="useNeedAuthentication should be false if is_authentication_needed and is_low_risk_cr_eu_real both are false" time="0.011">
    </testcase>
    <testcase classname="useNeedAuthentication should be false if is_authentication_needed is false and is_low_risk_cr_eu_real is true" name="useNeedAuthentication should be false if is_authentication_needed is false and is_low_risk_cr_eu_real is true" time="0.002">
    </testcase>
    <testcase classname="useNeedAuthentication should be false if is_authentication_needed is true and is_low_risk_cr_eu_real is false" name="useNeedAuthentication should be false if is_authentication_needed is true and is_low_risk_cr_eu_real is false" time="0.009">
    </testcase>
    <testcase classname="useNeedAuthentication should be true if is_authentication_needed and is_low_risk_cr_eu_real both are true" name="useNeedAuthentication should be true if is_authentication_needed and is_low_risk_cr_eu_real both are true" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useHasUSDCurrency" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.442" tests="4">
    <testcase classname="useHasUSDCurrency should return false if client has no account" name="useHasUSDCurrency should return false if client has no account" time="0.009">
    </testcase>
    <testcase classname="useHasUSDCurrency should return false if client has no USD account" name="useHasUSDCurrency should return false if client has no USD account" time="0.003">
    </testcase>
    <testcase classname="useHasUSDCurrency should return true if client has USD account" name="useHasUSDCurrency should return true if client has USD account" time="0.003">
    </testcase>
    <testcase classname="useHasUSDCurrency should return true if client has at least one USD account" name="useHasUSDCurrency should return true if client has at least one USD account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useRealTotalAssetCurrency" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.451" tests="9">
    <testcase classname="useRealTotalAssetCurrency should return default currency when user has no account" name="useRealTotalAssetCurrency should return default currency when user has no account" time="0.014">
    </testcase>
    <testcase classname="useRealTotalAssetCurrency should return default currency when user has no real account" name="useRealTotalAssetCurrency should return default currency when user has no real account" time="0.003">
    </testcase>
    <testcase classname="useRealTotalAssetCurrency should return proper currency when user has non_crypto account" name="useRealTotalAssetCurrency should return proper currency when user has non_crypto account" time="0.002">
    </testcase>
    <testcase classname="useRealTotalAssetCurrency should return empty string when user has non_crypto account with no currency set" name="useRealTotalAssetCurrency should return empty string when user has non_crypto account with no currency set" time="0.002">
    </testcase>
    <testcase classname="useRealTotalAssetCurrency should return the first account&apos;s currency when user only has crypto account" name="useRealTotalAssetCurrency should return the first account&apos;s currency when user only has crypto account" time="0.002">
    </testcase>
    <testcase classname="useRealTotalAssetCurrency should return the current selected currency when user only has crypto account and is_crypto() is false" name="useRealTotalAssetCurrency should return the current selected currency when user only has crypto account and is_crypto() is false" time="0.001">
    </testcase>
    <testcase classname="useRealTotalAssetCurrency should return undefined when user only has crypto account with no currency set" name="useRealTotalAssetCurrency should return undefined when user only has crypto account with no currency set" time="0.002">
    </testcase>
    <testcase classname="useRealTotalAssetCurrency should return MF account&apos;s currency when user switch to eu account type" name="useRealTotalAssetCurrency should return MF account&apos;s currency when user switch to eu account type" time="0.002">
    </testcase>
    <testcase classname="useRealTotalAssetCurrency should return default currency when user switch to eu account type but MF account&apos;s currency is not set" name="useRealTotalAssetCurrency should return default currency when user switch to eu account type but MF account&apos;s currency is not set" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="useP2PConfig" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.397" tests="2">
    <testcase classname="useP2PConfig should return undefined if there is no response" name="useP2PConfig should return undefined if there is no response" time="0.011">
    </testcase>
    <testcase classname="useP2PConfig should return the p2p_config object from response" name="useP2PConfig should return the p2p_config object from response" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="useAuthorize" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.362" tests="1">
    <testcase classname="useAuthorize should return correct data for the given token" name="useAuthorize should return correct data for the given token" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="useServiceToken" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.362" tests="2">
    <testcase classname="useServiceToken should return the service token" name="useServiceToken should return the service token" time="0.015">
    </testcase>
    <testcase classname="useServiceToken should return the error message" name="useServiceToken should return the error message" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useHasSwapFreeAccount" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.376" tests="3">
    <testcase classname="useHasSwapFreeAccount should be true if it has a market type of all" name="useHasSwapFreeAccount should be true if it has a market type of all" time="0.011">
    </testcase>
    <testcase classname="useHasSwapFreeAccount should be false if it has a market type of financial" name="useHasSwapFreeAccount should be false if it has a market type of financial" time="0.002">
    </testcase>
    <testcase classname="useHasSwapFreeAccount should be false if has a market type of gaming " name="useHasSwapFreeAccount should be false if has a market type of gaming " time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="useNeedTNC" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.381" tests="6">
    <testcase classname="useNeedTNC should be false if is_tnc_needed and is_eu are false and does not have an real STP account" name="useNeedTNC should be false if is_tnc_needed and is_eu are false and does not have an real STP account" time="0.009">
    </testcase>
    <testcase classname="useNeedTNC should be false if is_tnc_needed is false but is_eu is true and does not have an real STP account" name="useNeedTNC should be false if is_tnc_needed is false but is_eu is true and does not have an real STP account" time="0.002">
    </testcase>
    <testcase classname="useNeedTNC should be false if is_tnc_needed and is_eu are false but has an real STP account" name="useNeedTNC should be false if is_tnc_needed and is_eu are false but has an real STP account" time="0.002">
    </testcase>
    <testcase classname="useNeedTNC should be true if is_tnc_needed is true and is_eu is false but has an real STP account" name="useNeedTNC should be true if is_tnc_needed is true and is_eu is false but has an real STP account" time="0.003">
    </testcase>
    <testcase classname="useNeedTNC should be true if is_tnc_needed and is_eu are true and does not have an real STP account" name="useNeedTNC should be true if is_tnc_needed and is_eu are true and does not have an real STP account" time="0.002">
    </testcase>
    <testcase classname="useNeedTNC should be true if is_tnc_needed and is_eu are true and has an real STP account" name="useNeedTNC should be true if is_tnc_needed and is_eu are true and has an real STP account" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="usePaymentAgentList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.367" tests="3">
    <testcase classname="usePaymentAgentList should return undefined if there is no response" name="usePaymentAgentList should return undefined if there is no response" time="0.01">
    </testcase>
    <testcase classname="usePaymentAgentList should return an empty list if there is no data in the response" name="usePaymentAgentList should return an empty list if there is no data in the response" time="0.002">
    </testcase>
    <testcase classname="usePaymentAgentList should return the list of payment agents from response" name="usePaymentAgentList should return the list of payment agents from response" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="useStoreLinkedWalletsAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:03" time="0.468" tests="1">
    <testcase classname="useStoreLinkedWalletsAccounts should return object with linked accounts for all wallets" name="useStoreLinkedWalletsAccounts should return object with linked accounts for all wallets" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="useHasMaltaInvestAccount" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.398" tests="3">
    <testcase classname="useHasMaltaInvestAccount should return false if client has no account" name="useHasMaltaInvestAccount should return false if client has no account" time="0.015">
    </testcase>
    <testcase classname="useHasMaltaInvestAccount should return false if client has no malta invest account" name="useHasMaltaInvestAccount should return false if client has no malta invest account" time="0.002">
    </testcase>
    <testcase classname="useHasMaltaInvestAccount should return true if client has at least one malta invest account" name="useHasMaltaInvestAccount should return true if client has at least one malta invest account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useGetMFAccountStatus" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.374" tests="3">
    <testcase classname="useGetMFAccountStatus should return needs verification status if all the statuses are none" name="useGetMFAccountStatus should return needs verification status if all the statuses are none" time="0.018">
    </testcase>
    <testcase classname="useGetMFAccountStatus should return failed if either of none, pending or verified statuses are not present" name="useGetMFAccountStatus should return failed if either of none, pending or verified statuses are not present" time="0.002">
    </testcase>
    <testcase classname="useGetMFAccountStatus should return pending if poa status is pending or verified status is not present in onfido or manual status" name="useGetMFAccountStatus should return pending if poa status is pending or verified status is not present in onfido or manual status" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useP2PAdvertiserPaymentMethods" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.386" tests="5">
    <testcase classname="useP2PAdvertiserPaymentMethods should return undefined when p2p_advertiser_payment_methods is not available" name="useP2PAdvertiserPaymentMethods should return undefined when p2p_advertiser_payment_methods is not available" time="0.015">
    </testcase>
    <testcase classname="useP2PAdvertiserPaymentMethods should return the expected data when p2p_advertiser_payment_methods is available" name="useP2PAdvertiserPaymentMethods should return the expected data when p2p_advertiser_payment_methods is available" time="0.005">
    </testcase>
    <testcase classname="useP2PAdvertiserPaymentMethods should create a new p2p_advertiser_payment_methods" name="useP2PAdvertiserPaymentMethods should create a new p2p_advertiser_payment_methods" time="0.003">
    </testcase>
    <testcase classname="useP2PAdvertiserPaymentMethods should update a p2p_advertiser_payment_methods" name="useP2PAdvertiserPaymentMethods should update a p2p_advertiser_payment_methods" time="0.003">
    </testcase>
    <testcase classname="useP2PAdvertiserPaymentMethods should delete a p2p_advertiser_payment_methods" name="useP2PAdvertiserPaymentMethods should delete a p2p_advertiser_payment_methods" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useInputATMFormatter" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.286" tests="9">
    <testcase classname="useInputATMFormatter should format the initial value correctly when initial value is undefined" name="useInputATMFormatter should format the initial value correctly when initial value is undefined" time="0.008">
    </testcase>
    <testcase classname="useInputATMFormatter should format the initial value correctly when initial value is provided" name="useInputATMFormatter should format the initial value correctly when initial value is provided" time="0.002">
    </testcase>
    <testcase classname="useInputATMFormatter should format the initial value correctly when locale is es-ES" name="useInputATMFormatter should format the initial value correctly when locale is es-ES" time="0.003">
    </testcase>
    <testcase classname="useInputATMFormatter should shift the numbers to left while user is typing" name="useInputATMFormatter should shift the numbers to left while user is typing" time="0.002">
    </testcase>
    <testcase classname="useInputATMFormatter should shift the numbers to left while user is typing with 3 fraction digits" name="useInputATMFormatter should shift the numbers to left while user is typing with 3 fraction digits" time="0.002">
    </testcase>
    <testcase classname="useInputATMFormatter should shift the numbers correctly when user removes something while typing" name="useInputATMFormatter should shift the numbers correctly when user removes something while typing" time="0.002">
    </testcase>
    <testcase classname="useInputATMFormatter should shift the numbers correctly when user changes something in the middle of the input" name="useInputATMFormatter should shift the numbers correctly when user changes something in the middle of the input" time="0.002">
    </testcase>
    <testcase classname="useInputATMFormatter should shift the numbers correctly when user types zeros" name="useInputATMFormatter should shift the numbers correctly when user types zeros" time="0.001">
    </testcase>
    <testcase classname="useInputATMFormatter should format correctly on paste when decimal points are more than accepted" name="useInputATMFormatter should format correctly on paste when decimal points are more than accepted" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useDepositFiatAddress" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.454" tests="3">
    <testcase classname="useDepositFiatAddress should get the iframe url when cashier API is called" name="useDepositFiatAddress should get the iframe url when cashier API is called" time="0.01">
    </testcase>
    <testcase classname="useDepositFiatAddress should get the iframe url for dark mode" name="useDepositFiatAddress should get the iframe url for dark mode" time="0.003">
    </testcase>
    <testcase classname="useDepositFiatAddress should get the iframe url for light mode" name="useDepositFiatAddress should get the iframe url for light mode" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useHasP2PSupportedCurrencies" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.384" tests="3">
    <testcase classname="useHasP2PSupportedCurrencies should return false if supported currencies is not in the account info" name="useHasP2PSupportedCurrencies should return false if supported currencies is not in the account info" time="0.01">
    </testcase>
    <testcase classname="useHasP2PSupportedCurrencies should return true if supported currencies is in the account info" name="useHasP2PSupportedCurrencies should return true if supported currencies is in the account info" time="0.002">
    </testcase>
    <testcase classname="useHasP2PSupportedCurrencies should return false if there is no real account" name="useHasP2PSupportedCurrencies should return false if there is no real account" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useRealSTPAccount" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.383" tests="2">
    <testcase classname="useRealSTPAccount should be false if does not have an account type of real with sub account type of financial_stp" name="useRealSTPAccount should be false if does not have an account type of real with sub account type of financial_stp" time="0.012">
    </testcase>
    <testcase classname="useRealSTPAccount should be true if has an account type of real with sub account type of financial_stp" name="useRealSTPAccount should be true if has an account type of real with sub account type of financial_stp" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useMT5SVGEligibleToMigrate" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.42" tests="7">
    <testcase classname="useMT5SVGEligibleToMigrate should return all values of svg to bvi financial accounts in the hook" name="useMT5SVGEligibleToMigrate should return all values of svg to bvi financial accounts in the hook" time="0.022">
    </testcase>
    <testcase classname="useMT5SVGEligibleToMigrate should return false for has_svg_accounts_to_migrate if show_eu_related_content is true" name="useMT5SVGEligibleToMigrate should return false for has_svg_accounts_to_migrate if show_eu_related_content is true" time="0.004">
    </testcase>
    <testcase classname="useMT5SVGEligibleToMigrate should return all values of svg to bvi derived accounts in the hook" name="useMT5SVGEligibleToMigrate should return all values of svg to bvi derived accounts in the hook" time="0.002">
    </testcase>
    <testcase classname="useMT5SVGEligibleToMigrate should return all values of svg to vanuatu financial accounts in the hook" name="useMT5SVGEligibleToMigrate should return all values of svg to vanuatu financial accounts in the hook" time="0.004">
    </testcase>
    <testcase classname="useMT5SVGEligibleToMigrate should return all values of svg to vanuatu derived accounts in the hook" name="useMT5SVGEligibleToMigrate should return all values of svg to vanuatu derived accounts in the hook" time="0.003">
    </testcase>
    <testcase classname="useMT5SVGEligibleToMigrate should return all values of both svg to vanuatu derived accounts and svg to vanuatu financial accounts in the hook" name="useMT5SVGEligibleToMigrate should return all values of both svg to vanuatu derived accounts and svg to vanuatu financial accounts in the hook" time="0.003">
    </testcase>
    <testcase classname="useMT5SVGEligibleToMigrate should return all values of both svg to vanuatu derived accounts and svg to vanuatu financial accounts in the hook" name="useMT5SVGEligibleToMigrate should return all values of both svg to vanuatu derived accounts and svg to vanuatu financial accounts in the hook" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="useHasMFAccountDeposited" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.378" tests="3">
    <testcase classname="useHasMFAccountDeposited should return false if expected status is not in account_status" name="useHasMFAccountDeposited should return false if expected status is not in account_status" time="0.011">
    </testcase>
    <testcase classname="useHasMFAccountDeposited should return true if withdrawal_locked status is in account_status" name="useHasMFAccountDeposited should return true if withdrawal_locked status is in account_status" time="0.002">
    </testcase>
    <testcase classname="useHasMFAccountDeposited should return true if cashier_locked status is in account_status" name="useHasMFAccountDeposited should return true if cashier_locked status is in account_status" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="useCashierLocked" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.379" tests="2">
    <testcase classname="useCashierLocked should be false if there is no cashier_locked status" name="useCashierLocked should be false if there is no cashier_locked status" time="0.009">
    </testcase>
    <testcase classname="useCashierLocked should be true if there is cashier_locked status" name="useCashierLocked should be true if there is cashier_locked status" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useInputDecimalFormatter" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.266" tests="12">
    <testcase classname="useInputDecimalFormatter should format the initial value correctly" name="useInputDecimalFormatter should format the initial value correctly" time="0.012">
    </testcase>
    <testcase classname="useInputDecimalFormatter should only accept numbers" name="useInputDecimalFormatter should only accept numbers" time="0.002">
    </testcase>
    <testcase classname="useInputDecimalFormatter should only accept dot after zero if it starts with zero" name="useInputDecimalFormatter should only accept dot after zero if it starts with zero" time="0.002">
    </testcase>
    <testcase classname="useInputDecimalFormatter should only accept three fractional digits after dot" name="useInputDecimalFormatter should only accept three fractional digits after dot" time="0.002">
    </testcase>
    <testcase classname="useInputDecimalFormatter should only accept one dot" name="useInputDecimalFormatter should only accept one dot" time="0.001">
    </testcase>
    <testcase classname="useInputDecimalFormatter should only accept dot after zero if it starts with signed zero" name="useInputDecimalFormatter should only accept dot after zero if it starts with signed zero" time="0.005">
    </testcase>
    <testcase classname="useInputDecimalFormatter should accept negative sign" name="useInputDecimalFormatter should accept negative sign" time="0.003">
    </testcase>
    <testcase classname="useInputDecimalFormatter should accept positive sign" name="useInputDecimalFormatter should accept positive sign" time="0.002">
    </testcase>
    <testcase classname="useInputDecimalFormatter should only accept negative sign as starting character" name="useInputDecimalFormatter should only accept negative sign as starting character" time="0.008">
    </testcase>
    <testcase classname="useInputDecimalFormatter should only accept positive sign as starting character" name="useInputDecimalFormatter should only accept positive sign as starting character" time="0.002">
    </testcase>
    <testcase classname="useInputDecimalFormatter should work with random inputs" name="useInputDecimalFormatter should work with random inputs" time="0.001">
    </testcase>
    <testcase classname="useInputDecimalFormatter should not accept + or - signs after dot" name="useInputDecimalFormatter should not accept + or - signs after dot" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useLandingCompanyDetails" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.391" tests="2">
    <testcase classname="useLandingCompanyDetails should return landing company details" name="useLandingCompanyDetails should return landing company details" time="0.01">
    </testcase>
    <testcase classname="useLandingCompanyDetails should correctly handle the tin_not_mandatory property" name="useLandingCompanyDetails should correctly handle the tin_not_mandatory property" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="useDepositCryptoAddress" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:04" time="0.435" tests="2">
    <testcase classname="useDepositCryptoAddress should return undefined if the response is not ready yet" name="useDepositCryptoAddress should return undefined if the response is not ready yet" time="0.014">
    </testcase>
    <testcase classname="useDepositCryptoAddress should return the crypto deposit address" name="useDepositCryptoAddress should return the crypto deposit address" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useCurrentCurrencyConfig" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.394" tests="2">
    <testcase classname="useCurrentCurrencyConfig should return undefined if the user&apos;s currency doesn&apos;t exist in currencies_config" name="useCurrentCurrencyConfig should return undefined if the user&apos;s currency doesn&apos;t exist in currencies_config" time="0.01">
    </testcase>
    <testcase classname="useCurrentCurrencyConfig should return currency config object for the user&apos;s currency" name="useCurrentCurrencyConfig should return currency config object for the user&apos;s currency" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="useNeedPOI" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.399" tests="2">
    <testcase classname="useNeedPOI should be true if authentication?.needs_verification includes identity" name="useNeedPOI should be true if authentication?.needs_verification includes identity" time="0.011">
    </testcase>
    <testcase classname="useNeedPOI should be false if authentication?.needs_verification doesn&apos;t include identity" name="useNeedPOI should be false if authentication?.needs_verification doesn&apos;t include identity" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useFeatureFlags" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.378" tests="2">
    <testcase classname="useFeatureFlags should return false for the test flag" name="useFeatureFlags should return false for the test flag" time="0.011">
    </testcase>
    <testcase classname="useFeatureFlags should return true for the test flag" name="useFeatureFlags should return true for the test flag" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="useIsAccountStatusPresent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.365" tests="2">
    <testcase classname="useIsAccountStatusPresent should return false when the status is not present" name="useIsAccountStatusPresent should return false when the status is not present" time="0.014">
    </testcase>
    <testcase classname="useIsAccountStatusPresent should return true when the status is present" name="useIsAccountStatusPresent should return true when the status is present" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useCFDAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.401" tests="4">
    <testcase classname="useCFDAccounts should return empty array when client has no CFD accounts" name="useCFDAccounts should return empty array when client has no CFD accounts" time="0.019">
    </testcase>
    <testcase classname="useCFDAccounts should return proper data when client only has CFD demo accounts" name="useCFDAccounts should return proper data when client only has CFD demo accounts" time="0.002">
    </testcase>
    <testcase classname="useCFDAccounts should return proper data when client only has CFD real accounts" name="useCFDAccounts should return proper data when client only has CFD real accounts" time="0.002">
    </testcase>
    <testcase classname="useCFDAccounts should return proper data when client only has both CFD real and demo accounts" name="useCFDAccounts should return proper data when client only has both CFD real and demo accounts" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useDepositLocked" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.406" tests="7">
    <testcase classname="useDepositLocked should be false if none of the conditions are met" name="useDepositLocked should be false if none of the conditions are met" time="0.01">
    </testcase>
    <testcase classname="useDepositLocked should be true if is_deposit_lock is true" name="useDepositLocked should be true if is_deposit_lock is true" time="0.002">
    </testcase>
    <testcase classname="useDepositLocked should be true if is_need_tnc is true" name="useDepositLocked should be true if is_need_tnc is true" time="0.002">
    </testcase>
    <testcase classname="useDepositLocked should be true if is_need_financial_assessment is true" name="useDepositLocked should be true if is_need_financial_assessment is true" time="0.002">
    </testcase>
    <testcase classname="useDepositLocked should be true if is_need_authentication is true" name="useDepositLocked should be true if is_need_authentication is true" time="0.002">
    </testcase>
    <testcase classname="useDepositLocked should be true if is_need_financial_assessment is true and landing_company_shortcode as svg" name="useDepositLocked should be true if is_need_financial_assessment is true and landing_company_shortcode as svg" time="0.001">
    </testcase>
    <testcase classname="useDepositLocked should be true if is_trading_experience_incomplete is true and landing_company_shortcode as maltainvest" name="useDepositLocked should be true if is_trading_experience_incomplete is true and landing_company_shortcode as maltainvest" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useP2PNotificationCount" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.365" tests="3">
    <testcase classname="useP2PNotificationCount should return zero if there is no loginid" name="useP2PNotificationCount should return zero if there is no loginid" time="0.01">
    </testcase>
    <testcase classname="useP2PNotificationCount should return the correct number of notifications for the current loginid" name="useP2PNotificationCount should return the correct number of notifications for the current loginid" time="0.003">
    </testcase>
    <testcase classname="useP2PNotificationCount should ignore the seen notifications" name="useP2PNotificationCount should ignore the seen notifications" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useP2PAdvertInfo" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.402" tests="2">
    <testcase classname="useP2PAdvertInfo should return undefined if there is no response" name="useP2PAdvertInfo should return undefined if there is no response" time="0.017">
    </testcase>
    <testcase classname="useP2PAdvertInfo should return advert info if id and enabled option has been passed" name="useP2PAdvertInfo should return advert info if id and enabled option has been passed" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="useIsP2PEnabled" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.403" tests="4">
    <testcase classname="useIsP2PEnabled should return false if users currency is not supported in p2p" name="useIsP2PEnabled should return false if users currency is not supported in p2p" time="0.018">
    </testcase>
    <testcase classname="useIsP2PEnabled should return false if users currency is supported in p2p but is virtual" name="useIsP2PEnabled should return false if users currency is supported in p2p but is virtual" time="0.002">
    </testcase>
    <testcase classname="useIsP2PEnabled should return true if users currency is supported in p2p and is_low_risk_cr_eu_real is false" name="useIsP2PEnabled should return true if users currency is supported in p2p and is_low_risk_cr_eu_real is false" time="0.002">
    </testcase>
    <testcase classname="useIsP2PEnabled should return false if users currency is supported in p2p but is_low_risk_cr_eu_real is true" name="useIsP2PEnabled should return false if users currency is supported in p2p but is_low_risk_cr_eu_real is true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useHasSetCurrency" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.393" tests="3">
    <testcase classname="useHasSetCurrency should return true if user has no active real account" name="useHasSetCurrency should return true if user has no active real account" time="0.009">
    </testcase>
    <testcase classname="useHasSetCurrency should return true if is_virtual is true" name="useHasSetCurrency should return true if is_virtual is true" time="0.007">
    </testcase>
    <testcase classname="useHasSetCurrency should return true account title is not Real " name="useHasSetCurrency should return true account title is not Real " time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useCurrencyConfig" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:05" time="0.552" tests="2">
    <testcase classname="useCurrencyConfig should return undefined if the currency doesn&apos;t exist in currencies_config" name="useCurrencyConfig should return undefined if the currency doesn&apos;t exist in currencies_config" time="0.008">
    </testcase>
    <testcase classname="useCurrencyConfig should return currency config object for the given currency" name="useCurrencyConfig should return currency config object for the given currency" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="useMFAccountStatus" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:06" time="0.511" tests="2">
    <testcase classname="useMFAccountStatus should return mf_status if conditions are met" name="useMFAccountStatus should return mf_status if conditions are met" time="0.008">
    </testcase>
    <testcase classname="useMFAccountStatus should return null if conditions are not met" name="useMFAccountStatus should return null if conditions are not met" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useNeedFinancialAssessment" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:06" time="0.428" tests="8">
    <testcase classname="useNeedFinancialAssessment should be false if is_financial_account, is_financial_information_incomplete and is_trading_experience_incomplete all are false" name="useNeedFinancialAssessment should be false if is_financial_account, is_financial_information_incomplete and is_trading_experience_incomplete all are false" time="0.013">
    </testcase>
    <testcase classname="useNeedFinancialAssessment should be false if is_financial_account and is_trading_experience_incomplete are false and is_financial_information_incomplete is true" name="useNeedFinancialAssessment should be false if is_financial_account and is_trading_experience_incomplete are false and is_financial_information_incomplete is true" time="0.003">
    </testcase>
    <testcase classname="useNeedFinancialAssessment should be false if is_financial_account and is_financial_information_incomplete are false and is_trading_experience_incomplete is true" name="useNeedFinancialAssessment should be false if is_financial_account and is_financial_information_incomplete are false and is_trading_experience_incomplete is true" time="0.001">
    </testcase>
    <testcase classname="useNeedFinancialAssessment should be false if is_financial_account is false but is_financial_information_incomplete and is_trading_experience_incomplete both are true" name="useNeedFinancialAssessment should be false if is_financial_account is false but is_financial_information_incomplete and is_trading_experience_incomplete both are true" time="0.006">
    </testcase>
    <testcase classname="useNeedFinancialAssessment should be false if is_financial_account is true but is_financial_information_incomplete and is_trading_experience_incomplete both are false" name="useNeedFinancialAssessment should be false if is_financial_account is true but is_financial_information_incomplete and is_trading_experience_incomplete both are false" time="0.011">
    </testcase>
    <testcase classname="useNeedFinancialAssessment should be true if is_financial_account and is_financial_information_incomplete are true and is_trading_experience_incomplete is false" name="useNeedFinancialAssessment should be true if is_financial_account and is_financial_information_incomplete are true and is_trading_experience_incomplete is false" time="0.002">
    </testcase>
    <testcase classname="useNeedFinancialAssessment should be true if is_financial_account and is_trading_experience_incomplete are true and is_financial_information_incomplete is false" name="useNeedFinancialAssessment should be true if is_financial_account and is_trading_experience_incomplete are true and is_financial_information_incomplete is false" time="0.002">
    </testcase>
    <testcase classname="useNeedFinancialAssessment should be true if is_financial_account, is_financial_information_incomplete and is_trading_experience_incomplete all are true" name="useNeedFinancialAssessment should be true if is_financial_account, is_financial_information_incomplete and is_trading_experience_incomplete all are true" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useWalletsList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:06" time="0.514" tests="4">
    <testcase classname="useWalletsList should return wallets list for the current loginid" name="useWalletsList should return wallets list for the current loginid" time="0.049">
    </testcase>
    <testcase classname="useWalletsList should return sorted wallet list where virtual is the last and crypto is after fiat currency" name="useWalletsList should return sorted wallet list where virtual is the last and crypto is after fiat currency" time="0.005">
    </testcase>
    <testcase classname="useWalletsList should return has_wallet equals to true if the client has at least one wallet" name="useWalletsList should return has_wallet equals to true if the client has at least one wallet" time="0.008">
    </testcase>
    <testcase classname="useWalletsList should return has_wallet equals to false if the client doesn&apos;t have any wallet" name="useWalletsList should return has_wallet equals to false if the client doesn&apos;t have any wallet" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useIsClientHighRiskForMT5" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:06" time="0.409" tests="4">
    <testcase classname="useIsClientHighRiskForMT5 should return false if there are no financial accounts or synthetic accounts" name="useIsClientHighRiskForMT5 should return false if there are no financial accounts or synthetic accounts" time="0.018">
    </testcase>
    <testcase classname="useIsClientHighRiskForMT5 should return false if there are financial accounts but not of type svg" name="useIsClientHighRiskForMT5 should return false if there are financial accounts but not of type svg" time="0.002">
    </testcase>
    <testcase classname="useIsClientHighRiskForMT5 should return false if there are synthetic accounts but not of type svg" name="useIsClientHighRiskForMT5 should return false if there are synthetic accounts but not of type svg" time="0.002">
    </testcase>
    <testcase classname="useIsClientHighRiskForMT5 should return true if there is one financial svg account and one synthetic svg account" name="useIsClientHighRiskForMT5 should return true if there is one financial svg account and one synthetic svg account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useP2PExchangeRate hook" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:06" time="0.557" tests="2">
    <testcase classname="useP2PExchangeRate hook Should return the exchange rate for the specified local currency" name="useP2PExchangeRate hook Should return the exchange rate for the specified local currency" time="0.008">
    </testcase>
    <testcase classname="useP2PExchangeRate hook Should subscribe to the exchange rate when the local currency changes" name="useP2PExchangeRate hook Should subscribe to the exchange rate when the local currency changes" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="useCFDAllAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:06" time="0.491" tests="5">
    <testcase classname="useCFDAllAccounts should return empty array when client has no CFD accounts" name="useCFDAllAccounts should return empty array when client has no CFD accounts" time="0.009">
    </testcase>
    <testcase classname="useCFDAllAccounts should return proper data when client has MT5 accounts" name="useCFDAllAccounts should return proper data when client has MT5 accounts" time="0.003">
    </testcase>
    <testcase classname="useCFDAllAccounts should return proper data when client has dxtrade accounts" name="useCFDAllAccounts should return proper data when client has dxtrade accounts" time="0.002">
    </testcase>
    <testcase classname="useCFDAllAccounts should return proper data when client has ctrader accounts" name="useCFDAllAccounts should return proper data when client has ctrader accounts" time="0.002">
    </testcase>
    <testcase classname="useCFDAllAccounts should return proper data when client has MT5, ctrader and dxtrade accounts" name="useCFDAllAccounts should return proper data when client has MT5, ctrader and dxtrade accounts" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="useP2POrderList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:06" time="0.468" tests="2">
    <testcase classname="useP2POrderList should return undefined if there is no order" name="useP2POrderList should return undefined if there is no order" time="0.013">
    </testcase>
    <testcase classname="useP2POrderList should return p2p order list" name="useP2POrderList should return p2p order list" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="usePlatformAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:06" time="0.465" tests="4">
    <testcase classname="usePlatformAccounts should return proper data when user has no platform demo and real accounts" name="usePlatformAccounts should return proper data when user has no platform demo and real accounts" time="0.01">
    </testcase>
    <testcase classname="usePlatformAccounts should return proper data when user only has platform demo account" name="usePlatformAccounts should return proper data when user only has platform demo account" time="0.003">
    </testcase>
    <testcase classname="usePlatformAccounts should return proper data when user only has platform real account" name="usePlatformAccounts should return proper data when user only has platform real account" time="0.002">
    </testcase>
    <testcase classname="usePlatformAccounts should return proper data when user has both real and demo accounts" name="usePlatformAccounts should return proper data when user has both real and demo accounts" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="usePlatformDemoAccount" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:06" time="0.411" tests="2">
    <testcase classname="usePlatformDemoAccount should return undefined when user has no platform demo accounts" name="usePlatformDemoAccount should return undefined when user has no platform demo accounts" time="0.011">
    </testcase>
    <testcase classname="usePlatformDemoAccount should return proper data when user has platform demo account" name="usePlatformDemoAccount should return proper data when user has platform demo account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useTotalAccountBalance" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:06" time="0.537" tests="3">
    <testcase classname="useTotalAccountBalance should return zero when user has no account" name="useTotalAccountBalance should return zero when user has no account" time="0.011">
    </testcase>
    <testcase classname="useTotalAccountBalance should return total balance correctly when user has one account" name="useTotalAccountBalance should return total balance correctly when user has one account" time="0.004">
    </testcase>
    <testcase classname="useTotalAccountBalance should return total balance correctly when user has multiple accounts in same currency" name="useTotalAccountBalance should return total balance correctly when user has multiple accounts in same currency" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useHasSvgAccount" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:07" time="0.394" tests="2">
    <testcase classname="useHasSvgAccount should return true if client has SVG account" name="useHasSvgAccount should return true if client has SVG account" time="0.012">
    </testcase>
    <testcase classname="useHasSvgAccount should return false if client has Maltainvest account" name="useHasSvgAccount should return false if client has Maltainvest account" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useContentFlag" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:07" time="0.425" tests="6">
    <testcase classname="useContentFlag should return true for cr_demo when content flag is cr_demo" name="useContentFlag should return true for cr_demo when content flag is cr_demo" time="0.019">
    </testcase>
    <testcase classname="useContentFlag should return true for eu_demo when content flag is eu_demo" name="useContentFlag should return true for eu_demo when content flag is eu_demo" time="0.006">
    </testcase>
    <testcase classname="useContentFlag should return true for eu_real when content flag is eu_real" name="useContentFlag should return true for eu_real when content flag is eu_real" time="0.004">
    </testcase>
    <testcase classname="useContentFlag should return true for high_risk_cr when content flag is high_risk_cr" name="useContentFlag should return true for high_risk_cr when content flag is high_risk_cr" time="0.006">
    </testcase>
    <testcase classname="useContentFlag should return true for low_risk_cr_eu when content flag is low_risk_cr_eu" name="useContentFlag should return true for low_risk_cr_eu when content flag is low_risk_cr_eu" time="0.003">
    </testcase>
    <testcase classname="useContentFlag should return true for low_risk_cr_non_eu when content flag is low_risk_cr_non_eu" name="useContentFlag should return true for low_risk_cr_non_eu when content flag is low_risk_cr_non_eu" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="useExistingCFDAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:07" time="0.393" tests="1">
    <testcase classname="useExistingCFDAccounts should return the existing cfd accounts" name="useExistingCFDAccounts should return the existing cfd accounts" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="useAvailableWallets" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:07" time="0.384" tests="2">
    <testcase classname="useAvailableWallets should return available wallets" name="useAvailableWallets should return available wallets" time="0.011">
    </testcase>
    <testcase classname="useAvailableWallets should not return unavailable wallets" name="useAvailableWallets should not return unavailable wallets" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useCurrentAccountDetails" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:07" time="0.404" tests="1">
    <testcase classname="useCurrentAccountDetails should return the account info of the current loginid" name="useCurrentAccountDetails should return the account info of the current loginid" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="useLongPress" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:07" time="0.513" tests="6">
    <testcase classname="useLongPress should return event handlers" name="useLongPress should return event handlers" time="0.012">
    </testcase>
    <testcase classname="useLongPress should call preventDefault() and stopPropagation() when onMouseDown is triggered" name="useLongPress should call preventDefault() and stopPropagation() when onMouseDown is triggered" time="0.002">
    </testcase>
    <testcase classname="useLongPress should not call preventDefault() or stopPropagation() when onMouseUp is triggered" name="useLongPress should not call preventDefault() or stopPropagation() when onMouseUp is triggered" time="0.003">
    </testcase>
    <testcase classname="useLongPress should not call preventDefault() or stopPropagation() when onMouseLeave is triggered" name="useLongPress should not call preventDefault() or stopPropagation() when onMouseLeave is triggered" time="0.003">
    </testcase>
    <testcase classname="useLongPress should not call preventDefault() or stopPropagation() when onTouchStart is triggered" name="useLongPress should not call preventDefault() or stopPropagation() when onTouchStart is triggered" time="0.006">
    </testcase>
    <testcase classname="useLongPress should not call preventDefault() or stopPropagation() when onTouchEnd is triggered" name="useLongPress should not call preventDefault() or stopPropagation() when onTouchEnd is triggered" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ArrowIndicator" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:07" time="0.549" tests="4">
    <testcase classname="ArrowIndicator should render without an icon if value is undefined" name="ArrowIndicator should render without an icon if value is undefined" time="0.011">
    </testcase>
    <testcase classname="ArrowIndicator should render IcProfit if value has increased" name="ArrowIndicator should render IcProfit if value has increased" time="0.004">
    </testcase>
    <testcase classname="ArrowIndicator should render IcLoss if value has decreased" name="ArrowIndicator should render IcLoss if value has decreased" time="0.005">
    </testcase>
    <testcase classname="ArrowIndicator should appear when the value changes, disappear after 3 seconds &amp; reappear if value changes again" name="ArrowIndicator should appear when the value changes, disappear after 3 seconds &amp; reappear if value changes again" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="useDevice" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:07" time="0.786" tests="3">
    <testcase classname="useDevice should return correct is_mobile value" name="useDevice should return correct is_mobile value" time="0.02">
    </testcase>
    <testcase classname="useDevice should return correct is_tablet value" name="useDevice should return correct is_tablet value" time="0.014">
    </testcase>
    <testcase classname="useDevice should return correct is_desktop value" name="useDevice should return correct is_desktop value" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Badge component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:07" time="0.752" tests="13">
    <testcase classname="Badge component Should render properly with default values and label" name="Badge component Should render properly with default values and label" time="0.015">
    </testcase>
    <testcase classname="Badge component Should render proper medium badge in mobile view" name="Badge component Should render proper medium badge in mobile view" time="0.023">
    </testcase>
    <testcase classname="Badge component Should render proper medium badge in desktop view" name="Badge component Should render proper medium badge in desktop view" time="0.003">
    </testcase>
    <testcase classname="Badge component Should render proper large badge in mobile view" name="Badge component Should render proper large badge in mobile view" time="0.003">
    </testcase>
    <testcase classname="Badge component Should render proper large badge in desktop view" name="Badge component Should render proper large badge in desktop view" time="0.006">
    </testcase>
    <testcase classname="Badge component Should render badge with normal font weight" name="Badge component Should render badge with normal font weight" time="0.002">
    </testcase>
    <testcase classname="Badge component Should render badge with normal font weight" name="Badge component Should render badge with normal font weight" time="0.004">
    </testcase>
    <testcase classname="Badge component Should render badge with proper font-size in mobile view" name="Badge component Should render badge with proper font-size in mobile view" time="0.002">
    </testcase>
    <testcase classname="Badge component Should render badge with proper font-size in desktop view" name="Badge component Should render badge with proper font-size in desktop view" time="0.002">
    </testcase>
    <testcase classname="Badge component Should render badge with proper amount of rounded corners" name="Badge component Should render badge with proper amount of rounded corners" time="0.002">
    </testcase>
    <testcase classname="Badge component Should render badge with bordered type" name="Badge component Should render badge with bordered type" time="0.007">
    </testcase>
    <testcase classname="Badge component Should render badge with contained type" name="Badge component Should render badge with contained type" time="0.002">
    </testcase>
    <testcase classname="Badge component Should render badge with contained type and red background" name="Badge component Should render badge with contained type and red background" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FormSubmitErrorMessage/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:08" time="0.485" tests="1">
    <testcase classname="&lt;FormSubmitErrorMessage/&gt; should render the message passed along with the icon" name="&lt;FormSubmitErrorMessage/&gt; should render the message passed along with the icon" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Modal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:07" time="0.762" tests="2">
    <testcase classname="&lt;Modal /&gt; shows the children" name="&lt;Modal /&gt; shows the children" time="0.013">
    </testcase>
    <testcase classname="&lt;Modal /&gt; calls toggleModal on close" name="&lt;Modal /&gt; calls toggleModal on close" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="MessageList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:08" time="0.666" tests="1">
    <testcase classname="MessageList Should render the list of messages" name="MessageList Should render the list of messages" time="0.052">
    </testcase>
  </testsuite>
  <testsuite name="AlertMessage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:08" time="0.602" tests="4">
    <testcase classname="AlertMessage Should render proper icon type" name="AlertMessage Should render proper icon type" time="0.031">
    </testcase>
    <testcase classname="AlertMessage Should render proper message" name="AlertMessage Should render proper message" time="0.004">
    </testcase>
    <testcase classname="AlertMessage Should render proper button" name="AlertMessage Should render proper button" time="0.024">
    </testcase>
    <testcase classname="AlertMessage Should trigger onClick handler when the user is clicking on the button" name="AlertMessage Should trigger onClick handler when the user is clicking on the button" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ErrorModalContent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:08" time="0.485" tests="4">
    <testcase classname="&lt;ErrorModalContent /&gt; should renders the error message" name="&lt;ErrorModalContent /&gt; should renders the error message" time="0.014">
    </testcase>
    <testcase classname="&lt;ErrorModalContent /&gt; renders the error message" name="&lt;ErrorModalContent /&gt; renders the error message" time="0.004">
    </testcase>
    <testcase classname="&lt;ErrorModalContent /&gt; should renders the refresh button" name="&lt;ErrorModalContent /&gt; should renders the refresh button" time="0.004">
    </testcase>
    <testcase classname="&lt;ErrorModalContent /&gt; should reload the page when the Refresh button is clicked" name="&lt;ErrorModalContent /&gt; should reload the page when the Refresh button is clicked" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;UnhandledErrorModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:08" time="0.646" tests="2">
    <testcase classname="&lt;UnhandledErrorModal /&gt; renders the component with proper messages" name="&lt;UnhandledErrorModal /&gt; renders the component with proper messages" time="0.026">
    </testcase>
    <testcase classname="&lt;UnhandledErrorModal /&gt; should call reload function when refresh button is clicked" name="&lt;UnhandledErrorModal /&gt; should call reload function when refresh button is clicked" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ErrorModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:08" time="0.53" tests="3">
    <testcase classname="&lt;ErrorModal /&gt; should render the error modal with modal content" name="&lt;ErrorModal /&gt; should render the error modal with modal content" time="0.034">
    </testcase>
    <testcase classname="&lt;ErrorModal /&gt; should check if the parent container is present" name="&lt;ErrorModal /&gt; should check if the parent container is present" time="0.004">
    </testcase>
    <testcase classname="&lt;ErrorModal /&gt; should closes the error modal when the Refresh button is clicked" name="&lt;ErrorModal /&gt; should closes the error modal when the Refresh button is clicked" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="Money" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:08" time="0.411" tests="8">
    <testcase classname="Money should have the &quot;className&quot; when passed in" name="Money should have the &quot;className&quot; when passed in" time="0.013">
    </testcase>
    <testcase classname="Money should return correct text based on the props when &quot;amount&quot; is &gt; 0 and &quot;has_sign&quot; is &quot;true&quot;" name="Money should return correct text based on the props when &quot;amount&quot; is &gt; 0 and &quot;has_sign&quot; is &quot;true&quot;" time="0.002">
    </testcase>
    <testcase classname="Money should return correct text based on the props when &quot;amount&quot; is &lt; 0 and &quot;has_sign&quot; is &quot;true&quot;" name="Money should return correct text based on the props when &quot;amount&quot; is &lt; 0 and &quot;has_sign&quot; is &quot;true&quot;" time="0.002">
    </testcase>
    <testcase classname="Money should return correct text based on the props when &quot;amount&quot; is 0 and &quot;has_sign&quot; is &quot;true&quot;" name="Money should return correct text based on the props when &quot;amount&quot; is 0 and &quot;has_sign&quot; is &quot;true&quot;" time="0.009">
    </testcase>
    <testcase classname="Money should return correct text based on the props when &quot;amount&quot; is &gt; 0 and &quot;has_sign&quot; is &quot;true&quot; and &quot;should_format&quot; is &quot;false&quot;)" name="Money should return correct text based on the props when &quot;amount&quot; is &gt; 0 and &quot;has_sign&quot; is &quot;true&quot; and &quot;should_format&quot; is &quot;false&quot;)" time="0.002">
    </testcase>
    <testcase classname="Money should return correct text based on the props when &quot;amount&quot; is &lt; 0 and &quot;has_sign&quot; is &quot;true&quot; and &quot;should_format&quot; is &quot;false&quot;" name="Money should return correct text based on the props when &quot;amount&quot; is &lt; 0 and &quot;has_sign&quot; is &quot;true&quot; and &quot;should_format&quot; is &quot;false&quot;" time="0.002">
    </testcase>
    <testcase classname="Money should return correct text based on the props when &quot;amount&quot; is 0 and &quot;has_sign&quot; is &quot;true&quot; and &quot;should_format&quot; is &quot;false&quot;" name="Money should return correct text based on the props when &quot;amount&quot; is 0 and &quot;has_sign&quot; is &quot;true&quot; and &quot;should_format&quot; is &quot;false&quot;" time="0.001">
    </testcase>
    <testcase classname="Money should show the currency when &quot;show_currency&quot; passed" name="Money should show the currency when &quot;show_currency&quot; passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ButtonToggle component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:08" time="0.472" tests="5">
    <testcase classname="ButtonToggle component should render Buy and Sell buttons with 1 Counter inside Buy button" name="ButtonToggle component should render Buy and Sell buttons with 1 Counter inside Buy button" time="0.018">
    </testcase>
    <testcase classname="ButtonToggle component should call onChange function when clicking on the button" name="ButtonToggle component should call onChange function when clicking on the button" time="0.021">
    </testcase>
    <testcase classname="ButtonToggle component should render the button with active class when the value is equal to the button value" name="ButtonToggle component should render the button with active class when the value is equal to the button value" time="0.021">
    </testcase>
    <testcase classname="ButtonToggle component should render a button toggle for traders_hub" name="ButtonToggle component should render a button toggle for traders_hub" time="0.011">
    </testcase>
    <testcase classname="ButtonToggle component should render an animated highlighted button toggle with rounded button calling onChange when clicked" name="ButtonToggle component should render an animated highlighted button toggle with rounded button calling onChange when clicked" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PageError/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:09" time="0.552" tests="10">
    <testcase classname="&lt;PageError/&gt; Should render the error message correctly" name="&lt;PageError/&gt; Should render the error message correctly" time="0.012">
    </testcase>
    <testcase classname="&lt;PageError/&gt; Should call buttonOnClick() upon button click when should_redirect and should_clear_error_on_click equals to false" name="&lt;PageError/&gt; Should call buttonOnClick() upon button click when should_redirect and should_clear_error_on_click equals to false" time="0.038">
    </testcase>
    <testcase classname="&lt;PageError/&gt; Should render the redirect button correctly" name="&lt;PageError/&gt; Should render the redirect button correctly" time="0.005">
    </testcase>
    <testcase classname="&lt;PageError/&gt; Should call setError() when redirect button gets clicked" name="&lt;PageError/&gt; Should call setError() when redirect button gets clicked" time="0.018">
    </testcase>
    <testcase classname="&lt;PageError/&gt; Should call setError() when redirect button gets clicked and should_redirect did not pass" name="&lt;PageError/&gt; Should call setError() when redirect button gets clicked and should_redirect did not pass" time="0.014">
    </testcase>
    <testcase classname="&lt;PageError/&gt; Should call setError when button is clicked and should_clear_error_on_click is true" name="&lt;PageError/&gt; Should call setError when button is clicked and should_clear_error_on_click is true" time="0.008">
    </testcase>
    <testcase classname="&lt;PageError/&gt; Should not show the button when redirect equals to false and redirect_labels has nothing to display" name="&lt;PageError/&gt; Should not show the button when redirect equals to false and redirect_labels has nothing to display" time="0.003">
    </testcase>
    <testcase classname="&lt;PageError/&gt; Should show on mobile version text size of the error equals to &quot;xs&quot; and not show the button when redirect equals to false and redirect_labels has one element in the array" name="&lt;PageError/&gt; Should show on mobile version text size of the error equals to &quot;xs&quot; and not show the button when redirect equals to false and redirect_labels has one element in the array" time="0.009">
    </testcase>
    <testcase classname="&lt;PageError/&gt; If image_url is passed we should render the image" name="&lt;PageError/&gt; If image_url is passed we should render the image" time="0.006">
    </testcase>
    <testcase classname="&lt;PageError/&gt; Should show on mobile version text size of the error heading equals to &quot;s&quot; when image_url is passed " name="&lt;PageError/&gt; Should show on mobile version text size of the error heading equals to &quot;s&quot; when image_url is passed " time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="VanillaOptionsCardBody" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:09" time="0.52" tests="4">
    <testcase classname="VanillaOptionsCardBody should render the correct content for a sold contract" name="VanillaOptionsCardBody should render the correct content for a sold contract" time="0.059">
    </testcase>
    <testcase classname="VanillaOptionsCardBody should render the correct content for an unsold contract" name="VanillaOptionsCardBody should render the correct content for an unsold contract" time="0.024">
    </testcase>
    <testcase classname="VanillaOptionsCardBody should render arrow indicator if the contract is not sold (is_sold === false)" name="VanillaOptionsCardBody should render arrow indicator if the contract is not sold (is_sold === false)" time="0.011">
    </testcase>
    <testcase classname="VanillaOptionsCardBody should not render arrow indicator if the contract was sold (is_sold === true)" name="VanillaOptionsCardBody should not render arrow indicator if the contract was sold (is_sold === true)" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Popover/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:09" time="0.63" tests="11">
    <testcase classname="&lt;Popover/&gt; should render an info icon, display tooltip on hover/click, hide only after unfocusing in desktop" name="&lt;Popover/&gt; should render an info icon, display tooltip on hover/click, hide only after unfocusing in desktop" time="0.055">
    </testcase>
    <testcase classname="&lt;Popover/&gt; should render a question icon, display tooltip upon tap &amp; hide it upon the second tap on mobile" name="&lt;Popover/&gt; should render a question icon, display tooltip upon tap &amp; hide it upon the second tap on mobile" time="0.019">
    </testcase>
    <testcase classname="&lt;Popover/&gt; should render controlled popover with open tooltip when is_open === true &amp; should call onClick when target is clicked" name="&lt;Popover/&gt; should render controlled popover with open tooltip when is_open === true &amp; should call onClick when target is clicked" time="0.018">
    </testcase>
    <testcase classname="&lt;Popover/&gt; should render a counter instead of an icon when counter is provided &amp; icon === counter" name="&lt;Popover/&gt; should render a counter instead of an icon when counter is provided &amp; icon === counter" time="0.005">
    </testcase>
    <testcase classname="&lt;Popover/&gt; should hide the target icon when disable_target_icon === true" name="&lt;Popover/&gt; should hide the target icon when disable_target_icon === true" time="0.002">
    </testcase>
    <testcase classname="&lt;Popover/&gt; should hide a blue info icon inside the tooltip when disable_message_icon === true" name="&lt;Popover/&gt; should hide a blue info icon inside the tooltip when disable_message_icon === true" time="0.005">
    </testcase>
    <testcase classname="&lt;Popover/&gt; should not open tooltip when message is undefined" name="&lt;Popover/&gt; should not open tooltip when message is undefined" time="0.007">
    </testcase>
    <testcase classname="&lt;Popover/&gt; should call onBubbleOpen when bubble is hovered &amp; onBubbleClose when bubble is unhovered in controlled popover" name="&lt;Popover/&gt; should call onBubbleOpen when bubble is hovered &amp; onBubbleClose when bubble is unhovered in controlled popover" time="0.013">
    </testcase>
    <testcase classname="&lt;Popover/&gt; should call onBubbleOpen when bubble is focused &amp; onBubbleClose when bubble is unfocused in uncontrolled popover in mobile" name="&lt;Popover/&gt; should call onBubbleOpen when bubble is focused &amp; onBubbleClose when bubble is unfocused in uncontrolled popover in mobile" time="0.019">
    </testcase>
    <testcase classname="&lt;Popover/&gt; should render relative container when relative_render === true" name="&lt;Popover/&gt; should render relative container when relative_render === true" time="0.004">
    </testcase>
    <testcase classname="&lt;Popover/&gt; should render relative container with an error message" name="&lt;Popover/&gt; should render relative container with an error message" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="TickCounterBar" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:09" time="0.408" tests="1">
    <testcase classname="TickCounterBar should render properly" name="TickCounterBar should render properly" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccumulatorCardBody /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:09" time="0.701" tests="4">
    <testcase classname="&lt;AccumulatorCardBody /&gt; should display all contract card items, label, and values" name="&lt;AccumulatorCardBody /&gt; should display all contract card items, label, and values" time="0.019">
    </testcase>
    <testcase classname="&lt;AccumulatorCardBody /&gt; should display Take profit: label and - as value when take_profit is not available" name="&lt;AccumulatorCardBody /&gt; should display Take profit: label and - as value when take_profit is not available" time="0.004">
    </testcase>
    <testcase classname="&lt;AccumulatorCardBody /&gt; should not render arrow indicator if the contract was sold (is_sold === true)" name="&lt;AccumulatorCardBody /&gt; should not render arrow indicator if the contract was sold (is_sold === true)" time="0.002">
    </testcase>
    <testcase classname="&lt;AccumulatorCardBody /&gt; should render arrow indicator if the contract is not sold (is_sold === false)" name="&lt;AccumulatorCardBody /&gt; should render arrow indicator if the contract is not sold (is_sold === false)" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="MultiplierCardBody" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:09" time="0.519" tests="5">
    <testcase classname="MultiplierCardBody should render the correct content for a Cancelled contract with Deal cancel.fee and negative Total profit/loss" name="MultiplierCardBody should render the correct content for a Cancelled contract with Deal cancel.fee and negative Total profit/loss" time="0.028">
    </testcase>
    <testcase classname="MultiplierCardBody should render correct content for an open contract with negative Total profit/loss in mobile" name="MultiplierCardBody should render correct content for an open contract with negative Total profit/loss in mobile" time="0.019">
    </testcase>
    <testcase classname="MultiplierCardBody should render progress_slider and N/A in Deal Cancel.fee when contract is open for a crypto asset in mobile" name="MultiplierCardBody should render progress_slider and N/A in Deal Cancel.fee when contract is open for a crypto asset in mobile" time="0.006">
    </testcase>
    <testcase classname="MultiplierCardBody should not render arrow indicator if the contract was sold (is_sold === true)" name="MultiplierCardBody should not render arrow indicator if the contract was sold (is_sold === true)" time="0.003">
    </testcase>
    <testcase classname="MultiplierCardBody should render arrow indicator if the contract is not sold (is_sold === false)" name="MultiplierCardBody should render arrow indicator if the contract is not sold (is_sold === false)" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="ContractUpdateForm" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:09" time="0.863" tests="6">
    <testcase classname="ContractUpdateForm should render unchecked Take profit input with checkbox and disabled Apply button
        for Accumulators when take profit is not selected or applied" name="ContractUpdateForm should render unchecked Take profit input with checkbox and disabled Apply button
        for Accumulators when take profit is not selected or applied" time="0.17">
    </testcase>
    <testcase classname="ContractUpdateForm should render checked Take profit input with checkbox and enabled Apply button
        when take profit is already applied" name="ContractUpdateForm should render checked Take profit input with checkbox and enabled Apply button
        when take profit is already applied" time="0.056">
    </testcase>
    <testcase classname="ContractUpdateForm should render checked Take profit input with checkbox and disabled Apply button
        when take profit is selected, but not entered" name="ContractUpdateForm should render checked Take profit input with checkbox and disabled Apply button
        when take profit is selected, but not entered" time="0.041">
    </testcase>
    <testcase classname="ContractUpdateForm should render checked Take profit input with checkbox and enabled Apply button
        when take profit is selected, entered, and there are no validation errors" name="ContractUpdateForm should render checked Take profit input with checkbox and enabled Apply button
        when take profit is selected, entered, and there are no validation errors" time="0.065">
    </testcase>
    <testcase classname="ContractUpdateForm should render checked Take profit input with checkbox, disabled Apply button &amp; error message
        when take profit is selected, entered, and there are validation errors" name="ContractUpdateForm should render checked Take profit input with checkbox, disabled Apply button &amp; error message
        when take profit is selected, entered, and there are validation errors" time="0.051">
    </testcase>
    <testcase classname="ContractUpdateForm should render unchecked Take profit &amp; Stop loss inputs with checkboxes and disabled Apply button
        for Multipliers when neither take profit, nor stop loss is selected or applied" name="ContractUpdateForm should render unchecked Take profit &amp; Stop loss inputs with checkboxes and disabled Apply button
        for Multipliers when neither take profit, nor stop loss is selected or applied" time="0.073">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ResultOverlay/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:10" time="0.351" tests="2">
    <testcase classname="&lt;ResultOverlay/&gt; should render component with plus inside if payout_info is positive" name="&lt;ResultOverlay/&gt; should render component with plus inside if payout_info is positive" time="0.021">
    </testcase>
    <testcase classname="&lt;ResultOverlay/&gt; should render component with minus inside if payout_info is negative" name="&lt;ResultOverlay/&gt; should render component with minus inside if payout_info is negative" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="TurbosCardBody" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:09" time="0.766" tests="4">
    <testcase classname="TurbosCardBody renders header and values correctly" name="TurbosCardBody renders header and values correctly" time="0.036">
    </testcase>
    <testcase classname="TurbosCardBody should render Total profit/loss even if profit === 0" name="TurbosCardBody should render Total profit/loss even if profit === 0" time="0.005">
    </testcase>
    <testcase classname="TurbosCardBody should not render arrow indicator if the contract was sold (is_sold === true)" name="TurbosCardBody should not render arrow indicator if the contract was sold (is_sold === true)" time="0.004">
    </testcase>
    <testcase classname="TurbosCardBody should render arrow indicator if the contract is not sold (is_sold === false)" name="TurbosCardBody should render arrow indicator if the contract is not sold (is_sold === false)" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Drawer" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:10" time="0.318" tests="3">
    <testcase classname="Drawer should Drawer be in the document" name="Drawer should Drawer be in the document" time="0.008">
    </testcase>
    <testcase classname="Drawer should Drawer be open if is_open=&quot;true&quot; " name="Drawer should Drawer be open if is_open=&quot;true&quot; " time="0.002">
    </testcase>
    <testcase classname="Drawer should Drawer be open if is_open=&quot;false&quot; " name="Drawer should Drawer be open if is_open=&quot;false&quot; " time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Utility/Helper" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:10" time="0.214" tests="2">
    <testcase classname="Utility/Helper should return english alphabets removing special characters" name="Utility/Helper should return english alphabets removing special characters" time="0.001">
    </testcase>
    <testcase classname="Utility/Helper should return empty string if the text contains no english characters" name="Utility/Helper should return empty string if the text contains no english characters" time="0">
    </testcase>
  </testsuite>
  <testsuite name="SwipeableNotification" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:10" time="0.392" tests="7">
    <testcase classname="SwipeableNotification should render the correct content" name="SwipeableNotification should render the correct content" time="0.019">
    </testcase>
    <testcase classname="SwipeableNotification should render 15s ago timestamp" name="SwipeableNotification should render 15s ago timestamp" time="0.004">
    </testcase>
    <testcase classname="SwipeableNotification should render &quot;now&quot; timestamp" name="SwipeableNotification should render &quot;now&quot; timestamp" time="0.004">
    </testcase>
    <testcase classname="SwipeableNotification should hide notifications using a memoized function when visibility_duration_ms is passed" name="SwipeableNotification should hide notifications using a memoized function when visibility_duration_ms is passed" time="0.008">
    </testcase>
    <testcase classname="SwipeableNotification should redirect to URL passed as redirect_to" name="SwipeableNotification should redirect to URL passed as redirect_to" time="0.01">
    </testcase>
    <testcase classname="SwipeableNotification should apply correct classname in case of failure" name="SwipeableNotification should apply correct classname in case of failure" time="0.003">
    </testcase>
    <testcase classname="SwipeableNotification should apply correct classname in case of failure" name="SwipeableNotification should apply correct classname in case of failure" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AmountInput/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:10" time="0.611" tests="9">
    <testcase classname="&lt;AmountInput/&gt; should render with the initial value of &quot;0.00&quot; if {initial_value} is not specified" name="&lt;AmountInput/&gt; should render with the initial value of &quot;0.00&quot; if {initial_value} is not specified" time="0.012">
    </testcase>
    <testcase classname="&lt;AmountInput/&gt; should render with the correct initial value if {initial_value} was supplied" name="&lt;AmountInput/&gt; should render with the correct initial value if {initial_value} was supplied" time="0.003">
    </testcase>
    <testcase classname="&lt;AmountInput/&gt; should not change the value on non-numeric and non-&quot;.&quot; inputs" name="&lt;AmountInput/&gt; should not change the value on non-numeric and non-&quot;.&quot; inputs" time="0.045">
    </testcase>
    <testcase classname="&lt;AmountInput/&gt; should change the value like an ATM, i.e. from right to left, when entering digits" name="&lt;AmountInput/&gt; should change the value like an ATM, i.e. from right to left, when entering digits" time="0.033">
    </testcase>
    <testcase classname="&lt;AmountInput/&gt; should add commas for big values" name="&lt;AmountInput/&gt; should add commas for big values" time="0.023">
    </testcase>
    <testcase classname="&lt;AmountInput/&gt; should not remove &quot;0.00&quot; when backspacing" name="&lt;AmountInput/&gt; should not remove &quot;0.00&quot; when backspacing" time="0.02">
    </testcase>
    <testcase classname="&lt;AmountInput/&gt; should not accept more than {maxDigits} digits" name="&lt;AmountInput/&gt; should not accept more than {maxDigits} digits" time="0.03">
    </testcase>
    <testcase classname="&lt;AmountInput/&gt; should work correctly with explicitly set {decimal_points}" name="&lt;AmountInput/&gt; should work correctly with explicitly set {decimal_points}" time="0.024">
    </testcase>
    <testcase classname="&lt;AmountInput/&gt; should allow pasting numbers and then interpret those correctly" name="&lt;AmountInput/&gt; should allow pasting numbers and then interpret those correctly" time="0.057">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDCompareAccountsTitleIcon /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:10" time="1.422" tests="14">
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for synthetic_svg market type and shortcode" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for synthetic_svg market type and shortcode" time="0.009">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for synthetic_bvi market type and shortcode" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for synthetic_bvi market type and shortcode" time="0.002">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for synthetic_vanuatu market type and shortcode" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for synthetic_vanuatu market type and shortcode" time="0.002">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for financial_labuan market type and shortcode" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for financial_labuan market type and shortcode" time="0.011">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for financial_vanuatu market type and shortcode" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for financial_vanuatu market type and shortcode" time="0.002">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for financial_bvi market type and shortcode" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for financial_bvi market type and shortcode" time="0.002">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for Swap-Free market type and shortcode" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for Swap-Free market type and shortcode" time="0.001">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for Deriv X market type and shortcode" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for Deriv X market type and shortcode" time="0.002">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for EU Clients" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for EU Clients" time="0.002">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for gaming market type and shortcode demo account" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for gaming market type and shortcode demo account" time="0.002">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for financial market type and shortcode demo account" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for financial market type and shortcode demo account" time="0.001">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for Swap-Free with correct market type and shortcode demo account" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for Swap-Free with correct market type and shortcode demo account" time="0.001">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for Swap-Free with correct market type and shortcode demo account" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for Swap-Free with correct market type and shortcode demo account" time="0.001">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for EU clients demo accounts" name="&lt;CFDCompareAccountsTitleIcon /&gt; should render correct title for EU clients demo accounts" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InstrumentsIconWithLabel /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:10" time="1.343" tests="5">
    <testcase classname="&lt;InstrumentsIconWithLabel /&gt; should renders the component with correct props" name="&lt;InstrumentsIconWithLabel /&gt; should renders the component with correct props" time="0.015">
    </testcase>
    <testcase classname="&lt;InstrumentsIconWithLabel /&gt; should not apply opacity if &quot;highlighted&quot; prop is true" name="&lt;InstrumentsIconWithLabel /&gt; should not apply opacity if &quot;highlighted&quot; prop is true" time="0.006">
    </testcase>
    <testcase classname="&lt;InstrumentsIconWithLabel /&gt; should not apply opacity if &quot;highlighted&quot; prop is true" name="&lt;InstrumentsIconWithLabel /&gt; should not apply opacity if &quot;highlighted&quot; prop is true" time="0.006">
    </testcase>
    <testcase classname="&lt;InstrumentsIconWithLabel /&gt; should show the asterisk span when &quot;is_asterisk&quot; prop is true" name="&lt;InstrumentsIconWithLabel /&gt; should show the asterisk span when &quot;is_asterisk&quot; prop is true" time="0.002">
    </testcase>
    <testcase classname="&lt;InstrumentsIconWithLabel /&gt; should hide the asterisk span when &quot;is_asterisk&quot; prop is false" name="&lt;InstrumentsIconWithLabel /&gt; should hide the asterisk span when &quot;is_asterisk&quot; prop is false" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDCompareAccountsDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:10" time="1.551" tests="9">
    <testcase classname="&lt;CFDCompareAccountsDescription /&gt; should render CFDCompareAccountsDescription component on default props" name="&lt;CFDCompareAccountsDescription /&gt; should render CFDCompareAccountsDescription component on default props" time="0.016">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsDescription /&gt; should render content for gaming market type with market type svg" name="&lt;CFDCompareAccountsDescription /&gt; should render content for gaming market type with market type svg" time="0.011">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsDescription /&gt; should render content for gaming market type with vanuatu shortcode" name="&lt;CFDCompareAccountsDescription /&gt; should render content for gaming market type with vanuatu shortcode" time="0.011">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsDescription /&gt; should render content for all market type with svg shortcode" name="&lt;CFDCompareAccountsDescription /&gt; should render content for all market type with svg shortcode" time="0.014">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsDescription /&gt; should render content for financial market type with svg shortcode" name="&lt;CFDCompareAccountsDescription /&gt; should render content for financial market type with svg shortcode" time="0.007">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsDescription /&gt; should render content for financial market type with vanuatu shortcode" name="&lt;CFDCompareAccountsDescription /&gt; should render content for financial market type with vanuatu shortcode" time="0.01">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsDescription /&gt; should render content for financial market type with labuan shortcode" name="&lt;CFDCompareAccountsDescription /&gt; should render content for financial market type with labuan shortcode" time="0.006">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsDescription /&gt; should render content for financial market type with maltainvest shortcode " name="&lt;CFDCompareAccountsDescription /&gt; should render content for financial market type with maltainvest shortcode " time="0.011">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsDescription /&gt; should render demo content for gaming market type with market type svg" name="&lt;CFDCompareAccountsDescription /&gt; should render demo content for gaming market type with market type svg" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDCompareAccountsCard /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:10" time="1.496" tests="4">
    <testcase classname="&lt;CFDCompareAccountsCard /&gt; should render the component and not render the &quot;New!&quot; banner for MT5" name="&lt;CFDCompareAccountsCard /&gt; should render the component and not render the &quot;New!&quot; banner for MT5" time="0.036">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsCard /&gt; should render the &quot;Boom 300 and Crash 300 Index&quot; for EU user" name="&lt;CFDCompareAccountsCard /&gt; should render the &quot;Boom 300 and Crash 300 Index&quot; for EU user" time="0.007">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsCard /&gt; should renders the component and not render the &quot;New!&quot; banner for MT5 demo" name="&lt;CFDCompareAccountsCard /&gt; should renders the component and not render the &quot;New!&quot; banner for MT5 demo" time="0.015">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsCard /&gt; should not render the &quot;New!&quot; banner for Deriv X" name="&lt;CFDCompareAccountsCard /&gt; should not render the &quot;New!&quot; banner for Deriv X" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CompareCFDs /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:10" time="1.517" tests="4">
    <testcase classname="&lt;CompareCFDs /&gt; should render the component and redirect to compare account page" name="&lt;CompareCFDs /&gt; should render the component and redirect to compare account page" time="0.018">
    </testcase>
    <testcase classname="&lt;CompareCFDs /&gt; should render the carousel componet with the correct content" name="&lt;CompareCFDs /&gt; should render the carousel componet with the correct content" time="0.004">
    </testcase>
    <testcase classname="&lt;CompareCFDs /&gt; should render the component and redirect to compare demo account page" name="&lt;CompareCFDs /&gt; should render the component and redirect to compare demo account page" time="0.004">
    </testcase>
    <testcase classname="&lt;CompareCFDs /&gt; navigates to the trader&apos;s hub when the navigation element is clicked" name="&lt;CompareCFDs /&gt; navigates to the trader&apos;s hub when the navigation element is clicked" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="useMT5MigrationModalContext" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:12" time="0.263" tests="2">
    <testcase classname="useMT5MigrationModalContext should return default context values" name="useMT5MigrationModalContext should return default context values" time="0.007">
    </testcase>
    <testcase classname="useMT5MigrationModalContext should update context values" name="useMT5MigrationModalContext should update context values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDInstrumentsLabelHighlighted /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:12" time="0.441" tests="3">
    <testcase classname="&lt;CFDInstrumentsLabelHighlighted /&gt; should renders icons for market type gaming/synthetic" name="&lt;CFDInstrumentsLabelHighlighted /&gt; should renders icons for market type gaming/synthetic" time="0.017">
    </testcase>
    <testcase classname="&lt;CFDInstrumentsLabelHighlighted /&gt; should renders icons for market type all financial" name="&lt;CFDInstrumentsLabelHighlighted /&gt; should renders icons for market type all financial" time="0.004">
    </testcase>
    <testcase classname="&lt;CFDInstrumentsLabelHighlighted /&gt; should renders icons for market type all" name="&lt;CFDInstrumentsLabelHighlighted /&gt; should renders icons for market type all" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDCompareAccountsPlatformLabel /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:11" time="0.734" tests="2">
    <testcase classname="&lt;CFDCompareAccountsPlatformLabel /&gt; should renders MT5 platform label" name="&lt;CFDCompareAccountsPlatformLabel /&gt; should renders MT5 platform label" time="0.012">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsPlatformLabel /&gt; should renders Deriv X platform label" name="&lt;CFDCompareAccountsPlatformLabel /&gt; should renders Deriv X platform label" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDCompareAccountsButton /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:11" time="0.74" tests="5">
    <testcase classname="&lt;CFDCompareAccountsButton /&gt; should render the component with correct mocked_props" name="&lt;CFDCompareAccountsButton /&gt; should render the component with correct mocked_props" time="0.022">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsButton /&gt; should open the account creation modal" name="&lt;CFDCompareAccountsButton /&gt; should open the account creation modal" time="0.017">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsButton /&gt; should open account verification modal for unauthorized account" name="&lt;CFDCompareAccountsButton /&gt; should open account verification modal for unauthorized account" time="0.014">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsButton /&gt; should open account creation modal for dxtrade account" name="&lt;CFDCompareAccountsButton /&gt; should open account creation modal for dxtrade account" time="0.009">
    </testcase>
    <testcase classname="&lt;CFDCompareAccountsButton /&gt; should disable the button and display &quot;Added&quot; text when account is already added" name="&lt;CFDCompareAccountsButton /&gt; should disable the button and display &quot;Added&quot; text when account is already added" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="MT5MigrationAccountIcons" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:12" time="0.628" tests="5">
    <testcase classname="MT5MigrationAccountIcons should render MT5MigrationAccountIcons for derived bvi account" name="MT5MigrationAccountIcons should render MT5MigrationAccountIcons for derived bvi account" time="0.02">
    </testcase>
    <testcase classname="MT5MigrationAccountIcons should render MT5MigrationAccountIcons for financial bvi account" name="MT5MigrationAccountIcons should render MT5MigrationAccountIcons for financial bvi account" time="0.004">
    </testcase>
    <testcase classname="MT5MigrationAccountIcons should render MT5MigrationAccountIcons for derived vanuatu account" name="MT5MigrationAccountIcons should render MT5MigrationAccountIcons for derived vanuatu account" time="0.003">
    </testcase>
    <testcase classname="MT5MigrationAccountIcons should render MT5MigrationAccountIcons for financial vanuatu account" name="MT5MigrationAccountIcons should render MT5MigrationAccountIcons for financial vanuatu account" time="0.003">
    </testcase>
    <testcase classname="MT5MigrationAccountIcons should render MT5MigrationAccountIcons for svg to bvi derived account and svg to bvi financial account" name="MT5MigrationAccountIcons should render MT5MigrationAccountIcons for svg to bvi derived account and svg to bvi financial account" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="MT5MigrationModalContent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:12" time="0.51" tests="1">
    <testcase classname="MT5MigrationModalContent should render MT5MigrationModalContent by showing frontside of the modal" name="MT5MigrationModalContent should render MT5MigrationModalContent by showing frontside of the modal" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="MT5MigrationFrontSideContent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:12" time="0.763" tests="7">
    <testcase classname="MT5MigrationFrontSideContent should render MT5MigrationFrontSideContent" name="MT5MigrationFrontSideContent should render MT5MigrationFrontSideContent" time="0.035">
    </testcase>
    <testcase classname="MT5MigrationFrontSideContent should render svg to bvi derived Icons" name="MT5MigrationFrontSideContent should render svg to bvi derived Icons" time="0.01">
    </testcase>
    <testcase classname="MT5MigrationFrontSideContent should render svg to bvi financial Icons" name="MT5MigrationFrontSideContent should render svg to bvi financial Icons" time="0.008">
    </testcase>
    <testcase classname="MT5MigrationFrontSideContent should render svg to vanuatu derived Icons" name="MT5MigrationFrontSideContent should render svg to vanuatu derived Icons" time="0.008">
    </testcase>
    <testcase classname="MT5MigrationFrontSideContent should render svg to vanuatu financial Icons" name="MT5MigrationFrontSideContent should render svg to vanuatu financial Icons" time="0.004">
    </testcase>
    <testcase classname="MT5MigrationFrontSideContent should render both derived svg to bvi and financial svg to bvi Icons" name="MT5MigrationFrontSideContent should render both derived svg to bvi and financial svg to bvi Icons" time="0.004">
    </testcase>
    <testcase classname="MT5MigrationFrontSideContent should render both derived svg to vanuatu and financial svg to vanuatu Icons" name="MT5MigrationFrontSideContent should render both derived svg to vanuatu and financial svg to vanuatu Icons" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="MT5MigrationModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:12" time="0.661" tests="2">
    <testcase classname="MT5MigrationModal should render MT5MigrationModal" name="MT5MigrationModal should render MT5MigrationModal" time="0.026">
    </testcase>
    <testcase classname="MT5MigrationModal should render functions when close button is clicked" name="MT5MigrationModal should render functions when close button is clicked" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDServerErrorDialog /&gt; " errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:12" time="0.777" tests="5">
    <testcase classname="&lt;CFDServerErrorDialog /&gt;  should render the component properly" name="&lt;CFDServerErrorDialog /&gt;  should render the component properly" time="0.024">
    </testcase>
    <testcase classname="&lt;CFDServerErrorDialog /&gt;  should render the proper text and error message" name="&lt;CFDServerErrorDialog /&gt;  should render the proper text and error message" time="0.025">
    </testcase>
    <testcase classname="&lt;CFDServerErrorDialog /&gt;  should not render the component if has_cfd_error is false" name="&lt;CFDServerErrorDialog /&gt;  should not render the component if has_cfd_error is false" time="0.003">
    </testcase>
    <testcase classname="&lt;CFDServerErrorDialog /&gt;  should not render the component if is_cfd_success_dialog_enabled" name="&lt;CFDServerErrorDialog /&gt;  should not render the component if is_cfd_success_dialog_enabled" time="0.002">
    </testcase>
    <testcase classname="&lt;CFDServerErrorDialog /&gt;  should clear the component if OK is clicked" name="&lt;CFDServerErrorDialog /&gt;  should clear the component if OK is clicked" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="MT5MigrationBackSideContent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:12" time="1.105" tests="5">
    <testcase classname="MT5MigrationBackSideContent should render MT5MigrationBackSideContent for BVI migration account" name="MT5MigrationBackSideContent should render MT5MigrationBackSideContent for BVI migration account" time="0.093">
    </testcase>
    <testcase classname="MT5MigrationBackSideContent should render MT5MigrationBackSideContent for Vanuatu migration account" name="MT5MigrationBackSideContent should render MT5MigrationBackSideContent for Vanuatu migration account" time="0.009">
    </testcase>
    <testcase classname="MT5MigrationBackSideContent should render MT5Context Function after clicking on Back button" name="MT5MigrationBackSideContent should render MT5Context Function after clicking on Back button" time="0.024">
    </testcase>
    <testcase classname="MT5MigrationBackSideContent should enable Next Button after clicking on checkbox" name="MT5MigrationBackSideContent should enable Next Button after clicking on checkbox" time="0.03">
    </testcase>
    <testcase classname="MT5MigrationBackSideContent should trigger functions after clicking on Next button" name="MT5MigrationBackSideContent should trigger functions after clicking on Next button" time="0.038">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InvestorPasswordManager&gt; " errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:13" time="0.862" tests="7">
    <testcase classname="&lt;InvestorPasswordManager&gt;  should render the correct texts " name="&lt;InvestorPasswordManager&gt;  should render the correct texts " time="0.107">
    </testcase>
    <testcase classname="&lt;InvestorPasswordManager&gt;  should fill the password field and trigger the appropriate error message for repeated password pattern" name="&lt;InvestorPasswordManager&gt;  should fill the password field and trigger the appropriate error message for repeated password pattern" time="0.021">
    </testcase>
    <testcase classname="&lt;InvestorPasswordManager&gt;  should fill the password field and trigger the appropriate error message for repeated characters" name="&lt;InvestorPasswordManager&gt;  should fill the password field and trigger the appropriate error message for repeated characters" time="0.025">
    </testcase>
    <testcase classname="&lt;InvestorPasswordManager&gt;  should fill the password field and trigger the appropriate error message for using recent years" name="&lt;InvestorPasswordManager&gt;  should fill the password field and trigger the appropriate error message for using recent years" time="0.013">
    </testcase>
    <testcase classname="&lt;InvestorPasswordManager&gt;  should fill the password field and trigger the appropriate message for strong and valid password" name="&lt;InvestorPasswordManager&gt;  should fill the password field and trigger the appropriate message for strong and valid password" time="0.018">
    </testcase>
    <testcase classname="&lt;InvestorPasswordManager&gt;  should fill the password fields and trigger the appropriate message and enable the change password button" name="&lt;InvestorPasswordManager&gt;  should fill the password fields and trigger the appropriate message and enable the change password button" time="0.025">
    </testcase>
    <testcase classname="&lt;InvestorPasswordManager&gt;  should render success message if the user clicks on create or reset investor passwords" name="&lt;InvestorPasswordManager&gt;  should render success message if the user clicks on create or reset investor passwords" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="TradingPasswordManager" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:13" time="0.746" tests="7">
    <testcase classname="TradingPasswordManager should render the proper icon and text for Deriv MT5 for TradingPasswordManager" name="TradingPasswordManager should render the proper icon and text for Deriv MT5 for TradingPasswordManager" time="0.03">
    </testcase>
    <testcase classname="TradingPasswordManager should call ChangePasswordConfirmation component as the next step if the button is clicked " name="TradingPasswordManager should call ChangePasswordConfirmation component as the next step if the button is clicked " time="0.047">
    </testcase>
    <testcase classname="TradingPasswordManager should render the proper icon and text for Deriv X for TradingPasswordManager" name="TradingPasswordManager should render the proper icon and text for Deriv X for TradingPasswordManager" time="0.013">
    </testcase>
    <testcase classname="TradingPasswordManager should call ChangePasswordConfirmation component as the next step if the button is clicked " name="TradingPasswordManager should call ChangePasswordConfirmation component as the next step if the button is clicked " time="0.044">
    </testcase>
    <testcase classname="TradingPasswordManager should return to the previous Modal (TradingPasswordManager) if cancel button is clicked" name="TradingPasswordManager should return to the previous Modal (TradingPasswordManager) if cancel button is clicked" time="0.034">
    </testcase>
    <testcase classname="TradingPasswordManager should call SendEmailModal if the confirm button is clicked for Deriv MT5 account" name="TradingPasswordManager should call SendEmailModal if the confirm button is clicked for Deriv MT5 account" time="0.037">
    </testcase>
    <testcase classname="TradingPasswordManager should call SendEmailModal if the confirm button is clicked for Deriv X account" name="TradingPasswordManager should call SendEmailModal if the confirm button is clicked for Deriv X account" time="0.04">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DMT5TradeModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:13" time="0.783" tests="6">
    <testcase classname="&lt;DMT5TradeModal/&gt; should render correct status badge if mt5_acc_auth_status value is migrated_with_position" name="&lt;DMT5TradeModal/&gt; should render correct status badge if mt5_acc_auth_status value is migrated_with_position" time="0.075">
    </testcase>
    <testcase classname="&lt;DMT5TradeModal/&gt; should render correct status badge if mt5_acc_auth_status value is migrated_without_position" name="&lt;DMT5TradeModal/&gt; should render correct status badge if mt5_acc_auth_status value is migrated_without_position" time="0.024">
    </testcase>
    <testcase classname="&lt;DMT5TradeModal/&gt; should not render status badge if mt5_acc_auth_status value is poa_pending" name="&lt;DMT5TradeModal/&gt; should not render status badge if mt5_acc_auth_status value is poa_pending" time="0.016">
    </testcase>
    <testcase classname="&lt;DMT5TradeModal/&gt; should not render status badge if mt5_acc_auth_status value is null" name="&lt;DMT5TradeModal/&gt; should not render status badge if mt5_acc_auth_status value is null" time="0.023">
    </testcase>
    <testcase classname="&lt;DMT5TradeModal/&gt; should not render migration banner if account is not eligible to migrate" name="&lt;DMT5TradeModal/&gt; should not render migration banner if account is not eligible to migrate" time="0.013">
    </testcase>
    <testcase classname="&lt;DMT5TradeModal/&gt; should render migration banner if account is eligible to migrate" name="&lt;DMT5TradeModal/&gt; should render migration banner if account is eligible to migrate" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="ChangePasswordConfirmation" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:13" time="0.602" tests="5">
    <testcase classname="ChangePasswordConfirmation should render cfd-change-password-confirmation component" name="ChangePasswordConfirmation should render cfd-change-password-confirmation component" time="0.023">
    </testcase>
    <testcase classname="ChangePasswordConfirmation should show icon and buttons" name="ChangePasswordConfirmation should show icon and buttons" time="0.038">
    </testcase>
    <testcase classname="ChangePasswordConfirmation should cancel when cancel button is clicked" name="ChangePasswordConfirmation should cancel when cancel button is clicked" time="0.013">
    </testcase>
    <testcase classname="ChangePasswordConfirmation should close when create button is clicked" name="ChangePasswordConfirmation should close when create button is clicked" time="0.072">
    </testcase>
    <testcase classname="ChangePasswordConfirmation check whether the text is according to the platform" name="ChangePasswordConfirmation check whether the text is according to the platform" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="CFDTopUpDemoModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:14" time="0.623" tests="7">
    <testcase classname="CFDTopUpDemoModal should render the button texts correctly" name="CFDTopUpDemoModal should render the button texts correctly" time="0.046">
    </testcase>
    <testcase classname="CFDTopUpDemoModal should render the proper balance in the current balance" name="CFDTopUpDemoModal should render the proper balance in the current balance" time="0.01">
    </testcase>
    <testcase classname="CFDTopUpDemoModal should disable the top up button if the balance is higher than 1000 USD" name="CFDTopUpDemoModal should disable the top up button if the balance is higher than 1000 USD" time="0.026">
    </testcase>
    <testcase classname="CFDTopUpDemoModal should enable the top up button if the balance is lower than 1000 USD" name="CFDTopUpDemoModal should enable the top up button if the balance is lower than 1000 USD" time="0.023">
    </testcase>
    <testcase classname="CFDTopUpDemoModal should render the success dialog component if the user has less than 1000 USD and clicks on top up" name="CFDTopUpDemoModal should render the success dialog component if the user has less than 1000 USD and clicks on top up" time="0.023">
    </testcase>
    <testcase classname="CFDTopUpDemoModal should render the success component if the is_top_up_virtual_success is true" name="CFDTopUpDemoModal should render the success component if the is_top_up_virtual_success is true" time="0.003">
    </testcase>
    <testcase classname="CFDTopUpDemoModal should not render the component if conditions are false" name="CFDTopUpDemoModal should not render the component if conditions are false" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDFinancialStpRealAccountSignup /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:14" time="0.561" tests="5">
    <testcase classname="&lt;CFDFinancialStpRealAccountSignup /&gt; should render CFDFinancialStpRealAccountSignup component" name="&lt;CFDFinancialStpRealAccountSignup /&gt; should render CFDFinancialStpRealAccountSignup component" time="0.013">
    </testcase>
    <testcase classname="&lt;CFDFinancialStpRealAccountSignup /&gt; should render properly for the first step content" name="&lt;CFDFinancialStpRealAccountSignup /&gt; should render properly for the first step content" time="0.008">
    </testcase>
    <testcase classname="&lt;CFDFinancialStpRealAccountSignup /&gt; should render properly for the second step content" name="&lt;CFDFinancialStpRealAccountSignup /&gt; should render properly for the second step content" time="0.003">
    </testcase>
    <testcase classname="&lt;CFDFinancialStpRealAccountSignup /&gt; should check for POI status when Jurisdiction is Vanuatu or maltainvest" name="&lt;CFDFinancialStpRealAccountSignup /&gt; should check for POI status when Jurisdiction is Vanuatu or maltainvest" time="0.004">
    </testcase>
    <testcase classname="&lt;CFDFinancialStpRealAccountSignup /&gt; should check for POA status when Jurisdiction is Labuan and resubmit status is set to true" name="&lt;CFDFinancialStpRealAccountSignup /&gt; should check for POA status when Jurisdiction is Labuan and resubmit status is set to true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="DynamicLeverageModalContent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:14" time="0.453" tests="2">
    <testcase classname="DynamicLeverageModalContent should render DynamicLeverageModalContent header properly" name="DynamicLeverageModalContent should render DynamicLeverageModalContent header properly" time="0.017">
    </testcase>
    <testcase classname="DynamicLeverageModalContent should render DynamicLeverageModalContent cards properly" name="DynamicLeverageModalContent should render DynamicLeverageModalContent cards properly" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDPasswordModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:13" time="1.134" tests="18">
    <testcase classname="&lt;CFDPasswordModal/&gt; should render create Password modal when valid conditions are met" name="&lt;CFDPasswordModal/&gt; should render create Password modal when valid conditions are met" time="0.091">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should render password form with Try later button and forget password button" name="&lt;CFDPasswordModal/&gt; should render password form with Try later button and forget password button" time="0.054">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should close modal when Forget Password button is clicked" name="&lt;CFDPasswordModal/&gt; should close modal when Forget Password button is clicked" time="0.027">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should invoke verifyEmail when forgot password is clicked" name="&lt;CFDPasswordModal/&gt; should invoke verifyEmail when forgot password is clicked" time="0.029">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should display password field for user to enter the password and hold the entered value" name="&lt;CFDPasswordModal/&gt; should display password field for user to enter the password and hold the entered value" time="0.035">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should display error message when password does not meet requirements" name="&lt;CFDPasswordModal/&gt; should display error message when password does not meet requirements" time="0.018">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should display error message when password contain non-english characters" name="&lt;CFDPasswordModal/&gt; should display error message when password contain non-english characters" time="0.018">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should show transfer message on successful DerivX account creation" name="&lt;CFDPasswordModal/&gt; should show transfer message on successful DerivX account creation" time="0.007">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should close the dialog when you click on ok button" name="&lt;CFDPasswordModal/&gt; should close the dialog when you click on ok button" time="0.016">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should show success dialog with buttons to Transfer now or later when password has been updated successfully" name="&lt;CFDPasswordModal/&gt; should show success dialog with buttons to Transfer now or later when password has been updated successfully" time="0.025">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should display Derived icon in Success Dialog" name="&lt;CFDPasswordModal/&gt; should display Derived icon in Success Dialog" time="0.007">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should display icon in Success Dialog in tradershub" name="&lt;CFDPasswordModal/&gt; should display icon in Success Dialog in tradershub" time="0.007">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should display Financial icon in Success Dialog" name="&lt;CFDPasswordModal/&gt; should display Financial icon in Success Dialog" time="0.013">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should display IcRebrandingDerivx icon in Success Dialog" name="&lt;CFDPasswordModal/&gt; should display IcRebrandingDerivx icon in Success Dialog" time="0.006">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should display IcCfds icon in Success Dialog" name="&lt;CFDPasswordModal/&gt; should display IcCfds icon in Success Dialog" time="0.009">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should invoke verifyEmail for DerivX when Forgot password is clicked" name="&lt;CFDPasswordModal/&gt; should invoke verifyEmail for DerivX when Forgot password is clicked" time="0.028">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should create Deriv MT5 password when clicked on Create Deriv MT5 password" name="&lt;CFDPasswordModal/&gt; should create Deriv MT5 password when clicked on Create Deriv MT5 password" time="0.101">
    </testcase>
    <testcase classname="&lt;CFDPasswordModal/&gt; should create DerivX platform password when clicked on Add account" name="&lt;CFDPasswordModal/&gt; should create DerivX platform password when clicked on Add account" time="0.079">
    </testcase>
  </testsuite>
  <testsuite name="DynamicLeverageMarketCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:14" time="0.6" tests="3">
    <testcase classname="DynamicLeverageMarketCard should render DynamicLeverageMarketCard header properly" name="DynamicLeverageMarketCard should render DynamicLeverageMarketCard header properly" time="0.03">
    </testcase>
    <testcase classname="DynamicLeverageMarketCard should not render description if not present" name="DynamicLeverageMarketCard should not render description if not present" time="0.041">
    </testcase>
    <testcase classname="DynamicLeverageMarketCard should render dynamic leverages correctly" name="DynamicLeverageMarketCard should render dynamic leverages correctly" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="JurisdictionTitleIndicator" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:14" time="0.482" tests="13">
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayText" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayText" time="0.008">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons" time="0.001">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Default icon variant" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Default icon variant" time="0.003">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Pending icon variant" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Pending icon variant" time="0.003">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Failed icon variant" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Failed icon variant" time="0.002">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Verified icon variant" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Verified icon variant" time="0.002">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Pending icon variant with type_of_card to be Vanuatu" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Pending icon variant with type_of_card to be Vanuatu" time="0.002">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Pending icon variant with type_of_card to be MaltaInvest" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Pending icon variant with type_of_card to be MaltaInvest" time="0.001">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Failed icon variant with type_of_card to be Vanuatu" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Failed icon variant with type_of_card to be Vanuatu" time="0.007">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Verified icon variant with type_of_card to be Vanuatu" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Verified icon variant with type_of_card to be Vanuatu" time="0.002">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Pending icon variant when verification_document is name_and_address and type_of_card to be svg" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Pending icon variant when verification_document is name_and_address and type_of_card to be svg" time="0.002">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Failed icon variant when verification_document is name_and_address and type_of_card to be svg" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Failed icon variant when verification_document is name_and_address and type_of_card to be svg" time="0.001">
    </testcase>
    <testcase classname="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Verified icon variant when verification_document is name_and_address and type_of_card to be svg" name="JurisdictionTitleIndicator should render JurisdictionTitleIndicator with displayIcons and Verified icon variant when verification_document is name_and_address and type_of_card to be svg" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;JurisdictionCardBack /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:14" time="0.5" tests="4">
    <testcase classname="&lt;JurisdictionCardBack /&gt; should render JurisdictionCardBack without any required submission if verification_docs is empty" name="&lt;JurisdictionCardBack /&gt; should render JurisdictionCardBack without any required submission if verification_docs is empty" time="0.024">
    </testcase>
    <testcase classname="&lt;JurisdictionCardBack /&gt; should render JurisdictionCardBack display required document_number and name_and_address submission" name="&lt;JurisdictionCardBack /&gt; should render JurisdictionCardBack display required document_number and name_and_address submission" time="0.011">
    </testcase>
    <testcase classname="&lt;JurisdictionCardBack /&gt; should render JurisdictionCardBack display required selfie, identity_document and name_and_address submission" name="&lt;JurisdictionCardBack /&gt; should render JurisdictionCardBack display required selfie, identity_document and name_and_address submission" time="0.014">
    </testcase>
    <testcase classname="&lt;JurisdictionCardBack /&gt; should render JurisdictionCardBack and include selected_card classname if is_card_selected is true" name="&lt;JurisdictionCardBack /&gt; should render JurisdictionCardBack and include selected_card classname if is_card_selected is true" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="MigrationBanner" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:14" time="0.594" tests="4">
    <testcase classname="MigrationBanner should render MigrationBanner with both MT5 Derived SVG and MT5 Financial SVG text" name="MigrationBanner should render MigrationBanner with both MT5 Derived SVG and MT5 Financial SVG text" time="0.026">
    </testcase>
    <testcase classname="MigrationBanner should render MigrationBanner with MT5 Derived SVG" name="MigrationBanner should render MigrationBanner with MT5 Derived SVG" time="0.014">
    </testcase>
    <testcase classname="MigrationBanner should render MigrationBanner with MT5 Financial SVG" name="MigrationBanner should render MigrationBanner with MT5 Financial SVG" time="0.004">
    </testcase>
    <testcase classname="MigrationBanner should call upgrade button tracking event on clicking upgrade now button " name="MigrationBanner should call upgrade button tracking event on clicking upgrade now button " time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDPasswordManagerModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:13" time="1.856" tests="15">
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should render the deriv mt5 password modal" name="&lt;CFDPasswordManagerModal /&gt; should render the deriv mt5 password modal" time="0.066">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should render CFDPasswordManagerModal if change password button is clicked" name="&lt;CFDPasswordManagerModal /&gt; should render CFDPasswordManagerModal if change password button is clicked" time="0.102">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should render SentEmailModal if confirm button is clicked" name="&lt;CFDPasswordManagerModal /&gt; should render SentEmailModal if confirm button is clicked" time="0.083">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should render the CFDPasswordManagerModal for deriv x" name="&lt;CFDPasswordManagerModal /&gt; should render the CFDPasswordManagerModal for deriv x" time="0.03">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should render ChangePasswordConfirmationModal if change deriv x button is clicked" name="&lt;CFDPasswordManagerModal /&gt; should render ChangePasswordConfirmationModal if change deriv x button is clicked" time="0.084">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should render SentEmailModal if confirm button is clicked for deriv x" name="&lt;CFDPasswordManagerModal /&gt; should render SentEmailModal if confirm button is clicked for deriv x" time="0.072">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should render the resend email button if a user clicks didn&apos;t receive the email" name="&lt;CFDPasswordManagerModal /&gt; should render the resend email button if a user clicks didn&apos;t receive the email" time="0.111">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should start the countdown if the user clicks on resend email" name="&lt;CFDPasswordManagerModal /&gt; should start the countdown if the user clicks on resend email" time="0.141">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should disable the button for 60 seconds after clicking resend email" name="&lt;CFDPasswordManagerModal /&gt; should disable the button for 60 seconds after clicking resend email" time="0.191">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should enable back the resend email button after 60 seconds" name="&lt;CFDPasswordManagerModal /&gt; should enable back the resend email button after 60 seconds" time="0.177">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should render the InvestorPasswordManager when the user clicks on investor password tab" name="&lt;CFDPasswordManagerModal /&gt; should render the InvestorPasswordManager when the user clicks on investor password tab" time="0.075">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should change input of current investor password and new investor password and trigger change investor password button" name="&lt;CFDPasswordManagerModal /&gt; should change input of current investor password and new investor password and trigger change investor password button" time="0.099">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should render SentEmailModal if the user clicks create or reset investor password" name="&lt;CFDPasswordManagerModal /&gt; should render SentEmailModal if the user clicks create or reset investor password" time="0.025">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should go back to the previous investor password modal if the user clicks back in the SentEmailModal" name="&lt;CFDPasswordManagerModal /&gt; should go back to the previous investor password modal if the user clicks back in the SentEmailModal" time="0.028">
    </testcase>
    <testcase classname="&lt;CFDPasswordManagerModal /&gt; should render the correct header title for investor password modal for real account" name="&lt;CFDPasswordManagerModal /&gt; should render the correct header title for investor password modal for real account" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="JurisdictionCardFront" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:15" time="0.513" tests="2">
    <testcase classname="JurisdictionCardFront should render JurisdictionCardFront without over header" name="JurisdictionCardFront should render JurisdictionCardFront without over header" time="0.016">
    </testcase>
    <testcase classname="JurisdictionCardFront should render JurisdictionCardFront with over header" name="JurisdictionCardFront should render JurisdictionCardFront with over header" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="JurisdictionClickableDescription" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:15" time="0.493" tests="3">
    <testcase classname="JurisdictionClickableDescription should render JurisdictionClickableDescription" name="JurisdictionClickableDescription should render JurisdictionClickableDescription" time="0.013">
    </testcase>
    <testcase classname="JurisdictionClickableDescription should call toggleCardFlip when link is clicked" name="JurisdictionClickableDescription should call toggleCardFlip when link is clicked" time="0.004">
    </testcase>
    <testcase classname="JurisdictionClickableDescription should call onClick when link is clicked with an onClick function" name="JurisdictionClickableDescription should call onClick when link is clicked with an onClick function" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="JurisdictionModalTitle" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:15" time="0.545" tests="4">
    <testcase classname="JurisdictionModalTitle should render JurisdictionModalTitle" name="JurisdictionModalTitle should render JurisdictionModalTitle" time="0.009">
    </testcase>
    <testcase classname="JurisdictionModalTitle should render JurisdictionModalTitle correctly if show_eu_related_content is true" name="JurisdictionModalTitle should render JurisdictionModalTitle correctly if show_eu_related_content is true" time="0.002">
    </testcase>
    <testcase classname="JurisdictionModalTitle should render JurisdictionModalTitle correctly if show_eu_related_content is true" name="JurisdictionModalTitle should render JurisdictionModalTitle correctly if show_eu_related_content is true" time="0.002">
    </testcase>
    <testcase classname="JurisdictionModalTitle should render JurisdictionModalTitle correctly if is_dynamic_leverage_visible is true" name="JurisdictionModalTitle should render JurisdictionModalTitle correctly if is_dynamic_leverage_visible is true" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="JurisdictionModalContent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:15" time="0.991" tests="12">
    <testcase classname="JurisdictionModalContent should display cfd-jurisdiction-card--synthetic__wrapper in class name" name="JurisdictionModalContent should display cfd-jurisdiction-card--synthetic__wrapper in class name" time="0.049">
    </testcase>
    <testcase classname="JurisdictionModalContent should display 3 types of jurisdiction card for synthetics account" name="JurisdictionModalContent should display 3 types of jurisdiction card for synthetics account" time="0.046">
    </testcase>
    <testcase classname="JurisdictionModalContent should display content of 3 types of jurisdiction correctly for synthetics account" name="JurisdictionModalContent should display content of 3 types of jurisdiction correctly for synthetics account" time="0.054">
    </testcase>
    <testcase classname="JurisdictionModalContent should display cfd-jurisdiction-card--financial__wrapper in class name" name="JurisdictionModalContent should display cfd-jurisdiction-card--financial__wrapper in class name" time="0.027">
    </testcase>
    <testcase classname="JurisdictionModalContent should display 4 types of jurisdiction card for financial account" name="JurisdictionModalContent should display 4 types of jurisdiction card for financial account" time="0.04">
    </testcase>
    <testcase classname="JurisdictionModalContent should display content of 4 types of jurisdiction correctly for synthetics account" name="JurisdictionModalContent should display content of 4 types of jurisdiction correctly for synthetics account" time="0.081">
    </testcase>
    <testcase classname="JurisdictionModalContent should display only financial maltainvest for MF clients" name="JurisdictionModalContent should display only financial maltainvest for MF clients" time="0.028">
    </testcase>
    <testcase classname="JurisdictionModalContent should display only financial svg for highrisk clients" name="JurisdictionModalContent should display only financial svg for highrisk clients" time="0.02">
    </testcase>
    <testcase classname="JurisdictionModalContent should display only synthetic svg for highrisk clients" name="JurisdictionModalContent should display only synthetic svg for highrisk clients" time="0.017">
    </testcase>
    <testcase classname="JurisdictionModalContent should display cfd-jurisdiction-card--all__wrapper in class name" name="JurisdictionModalContent should display cfd-jurisdiction-card--all__wrapper in class name" time="0.013">
    </testcase>
    <testcase classname="JurisdictionModalContent should display only svg jurisdiction card for swap-free account" name="JurisdictionModalContent should display only svg jurisdiction card for swap-free account" time="0.013">
    </testcase>
    <testcase classname="JurisdictionModalContent should display content of swap-free jurisdiction correctly in card" name="JurisdictionModalContent should display content of swap-free jurisdiction correctly in card" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="JurisdictionModalFootNote" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:15" time="0.587" tests="12">
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote" name="JurisdictionModalFootNote should render JurisdictionModalFootNote" time="0.017">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote with className" name="JurisdictionModalFootNote should render JurisdictionModalFootNote with className" time="0.003">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote and show svg message" name="JurisdictionModalFootNote should render JurisdictionModalFootNote and show svg message" time="0.002">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote without bvi_restriction and show bvi message" name="JurisdictionModalFootNote should render JurisdictionModalFootNote without bvi_restriction and show bvi message" time="0.004">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote with bvi_restriction and show bvi restriction message" name="JurisdictionModalFootNote should render JurisdictionModalFootNote with bvi_restriction and show bvi restriction message" time="0.003">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote with bvi_restriction and poa is pending, then display resubmit poa message" name="JurisdictionModalFootNote should render JurisdictionModalFootNote with bvi_restriction and poa is pending, then display resubmit poa message" time="0.002">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote without vanuatu_restriction and show vanuatu message" name="JurisdictionModalFootNote should render JurisdictionModalFootNote without vanuatu_restriction and show vanuatu message" time="0.002">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote with vanuatu_restriction and show vanuatu restriction message" name="JurisdictionModalFootNote should render JurisdictionModalFootNote with vanuatu_restriction and show vanuatu restriction message" time="0.003">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote with vanuatu_restriction and poa is pending, then display resubmit poa message" name="JurisdictionModalFootNote should render JurisdictionModalFootNote with vanuatu_restriction and poa is pending, then display resubmit poa message" time="0.003">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote show labuan message" name="JurisdictionModalFootNote should render JurisdictionModalFootNote show labuan message" time="0.002">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should render JurisdictionModalFootNote show maltainvest message" name="JurisdictionModalFootNote should render JurisdictionModalFootNote show maltainvest message" time="0.002">
    </testcase>
    <testcase classname="JurisdictionModalFootNote should not render JurisdictionModalFootNote when jurisdiction_shortcode is empty" name="JurisdictionModalFootNote should not render JurisdictionModalFootNote when jurisdiction_shortcode is empty" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="JurisdictionCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:15" time="0.697" tests="10">
    <testcase classname="JurisdictionCard should render JurisdictionCard with svg card" name="JurisdictionCard should render JurisdictionCard with svg card" time="0.047">
    </testcase>
    <testcase classname="JurisdictionCard should render JurisdictionCard with vanuatu card" name="JurisdictionCard should render JurisdictionCard with vanuatu card" time="0.03">
    </testcase>
    <testcase classname="JurisdictionCard should render JurisdictionCard with maltainvest card" name="JurisdictionCard should render JurisdictionCard with maltainvest card" time="0.026">
    </testcase>
    <testcase classname="JurisdictionCard should render JurisdictionCard with bvi card" name="JurisdictionCard should render JurisdictionCard with bvi card" time="0.025">
    </testcase>
    <testcase classname="JurisdictionCard should render JurisdictionCard with labuan card" name="JurisdictionCard should render JurisdictionCard with labuan card" time="0.027">
    </testcase>
    <testcase classname="JurisdictionCard should render JurisdictionCard with synthetic account_type" name="JurisdictionCard should render JurisdictionCard with synthetic account_type" time="0.016">
    </testcase>
    <testcase classname="JurisdictionCard should render JurisdictionCard with disabled to be true" name="JurisdictionCard should render JurisdictionCard with disabled to be true" time="0.007">
    </testcase>
    <testcase classname="JurisdictionCard should render JurisdictionCard on the back" name="JurisdictionCard should render JurisdictionCard on the back" time="0.014">
    </testcase>
    <testcase classname="JurisdictionCard should click on JurisdictionCard and render setJurisdictionSelectedShortCode function" name="JurisdictionCard should click on JurisdictionCard and render setJurisdictionSelectedShortCode function" time="0.009">
    </testcase>
    <testcase classname="JurisdictionCard should click on Learn More and include cfd-card-flipped into classnames" name="JurisdictionCard should click on Learn More and include cfd-card-flipped into classnames" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="JurisdictionModalCheckbox" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:15" time="0.741" tests="10">
    <testcase classname="JurisdictionModalCheckbox should not render JurisdictionModalCheckbox when jurisdiction is not selected" name="JurisdictionModalCheckbox should not render JurisdictionModalCheckbox when jurisdiction is not selected" time="0.011">
    </testcase>
    <testcase classname="JurisdictionModalCheckbox should render labuan account and displays checkbox" name="JurisdictionModalCheckbox should render labuan account and displays checkbox" time="0.021">
    </testcase>
    <testcase classname="JurisdictionModalCheckbox should render function onCheck when checkbox is clicked for labuan account" name="JurisdictionModalCheckbox should render function onCheck when checkbox is clicked for labuan account" time="0.012">
    </testcase>
    <testcase classname="JurisdictionModalCheckbox should render svg account without displaying checkbox" name="JurisdictionModalCheckbox should render svg account without displaying checkbox" time="0.002">
    </testcase>
    <testcase classname="JurisdictionModalCheckbox should render bvi account without restriction and displays checkbox" name="JurisdictionModalCheckbox should render bvi account without restriction and displays checkbox" time="0.01">
    </testcase>
    <testcase classname="JurisdictionModalCheckbox should render function onCheck when checkbox is clicked for bvi account without restriction" name="JurisdictionModalCheckbox should render function onCheck when checkbox is clicked for bvi account without restriction" time="0.01">
    </testcase>
    <testcase classname="JurisdictionModalCheckbox should render bvi account with restriction and does not display checkbox" name="JurisdictionModalCheckbox should render bvi account with restriction and does not display checkbox" time="0.003">
    </testcase>
    <testcase classname="JurisdictionModalCheckbox should render vanuatu account without restriction and displays checkbox" name="JurisdictionModalCheckbox should render vanuatu account without restriction and displays checkbox" time="0.007">
    </testcase>
    <testcase classname="JurisdictionModalCheckbox should render function onCheck when checkbox is clicked for vanuatu account without restriction" name="JurisdictionModalCheckbox should render function onCheck when checkbox is clicked for vanuatu account without restriction" time="0.015">
    </testcase>
    <testcase classname="JurisdictionModalCheckbox should render vanuatu account with restriction and does not display checkbox" name="JurisdictionModalCheckbox should render vanuatu account with restriction and does not display checkbox" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="JurisdictionModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:15" time="0.844" tests="2">
    <testcase classname="JurisdictionModal should render JurisdictionModal" name="JurisdictionModal should render JurisdictionModal" time="0.234">
    </testcase>
    <testcase classname="JurisdictionModal should render JurisdictionModal with show_eu_related_content" name="JurisdictionModal should render JurisdictionModal with show_eu_related_content" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="RouteWithSubRoutes component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:16" time="0.345" tests="2">
    <testcase classname="RouteWithSubRoutes component should render the &quot;RouteWithSubRoutes&quot; component" name="RouteWithSubRoutes component should render the &quot;RouteWithSubRoutes&quot; component" time="0.007">
    </testcase>
    <testcase classname="RouteWithSubRoutes component should render properties" name="RouteWithSubRoutes component should render properties" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="JurisdictionCardSection" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:16" time="0.471" tests="3">
    <testcase classname="JurisdictionCardSection should render JurisdictionCardSection component" name="JurisdictionCardSection should render JurisdictionCardSection component" time="0.01">
    </testcase>
    <testcase classname="JurisdictionCardSection should render JurisdictionCardSection component with clickable description" name="JurisdictionCardSection should render JurisdictionCardSection component with clickable description" time="0.005">
    </testcase>
    <testcase classname="JurisdictionCardSection should render JurisdictionCardSection component without displaying title indicators if it is empty" name="JurisdictionCardSection should render JurisdictionCardSection component without displaying title indicators if it is empty" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CopyTextComponent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:16" time="0.47" tests="1">
    <testcase classname="&lt;CopyTextComponent /&gt; component should be rendered" name="&lt;CopyTextComponent /&gt; component should be rendered" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDAccountCopy /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:16" time="0.525" tests="1">
    <testcase classname="&lt;CFDAccountCopy /&gt; component should be rendered" name="&lt;CFDAccountCopy /&gt; component should be rendered" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDPOA /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:16" time="0.859" tests="1">
    <testcase classname="&lt;CFDPOA /&gt; should render CFDPOA and trigger buttons" name="&lt;CFDPOA /&gt; should render CFDPOA and trigger buttons" time="0.119">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDPOI /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:16" time="0.543" tests="1">
    <testcase classname="&lt;CFDPOI /&gt; should render ProofOfIdentityContainerForMt5" name="&lt;CFDPOI /&gt; should render ProofOfIdentityContainerForMt5" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="CFDAccountCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:16" time="0.864" tests="15">
    <testcase classname="CFDAccountCard should render the component for Demo MT5 Synthetic account " name="CFDAccountCard should render the component for Demo MT5 Synthetic account " time="0.065">
    </testcase>
    <testcase classname="CFDAccountCard should display the component for Demo MT5 Financial account " name="CFDAccountCard should display the component for Demo MT5 Financial account " time="0.036">
    </testcase>
    <testcase classname="CFDAccountCard should render the account card if the user has a Real MT5 Synthetic account" name="CFDAccountCard should render the account card if the user has a Real MT5 Synthetic account" time="0.037">
    </testcase>
    <testcase classname="CFDAccountCard should render the account card if the user has a Real MT5 Financial account" name="CFDAccountCard should render the account card if the user has a Real MT5 Financial account" time="0.031">
    </testcase>
    <testcase classname="CFDAccountCard should call onClickFund when top up button is clicked" name="CFDAccountCard should call onClickFund when top up button is clicked" time="0.019">
    </testcase>
    <testcase classname="CFDAccountCard should show add account button if the user doesn&apos;t have an existing account" name="CFDAccountCard should show add account button if the user doesn&apos;t have an existing account" time="0.004">
    </testcase>
    <testcase classname="CFDAccountCard should show add account button if the user doesn&apos;t have an existing account for real account" name="CFDAccountCard should show add account button if the user doesn&apos;t have an existing account for real account" time="0.003">
    </testcase>
    <testcase classname="CFDAccountCard should call onSelectAccount when the add account button is clicked" name="CFDAccountCard should call onSelectAccount when the add account button is clicked" time="0.006">
    </testcase>
    <testcase classname="CFDAccountCard should show add real acount button and call onSelectAccount if the button is clicked" name="CFDAccountCard should show add real acount button and call onSelectAccount if the button is clicked" time="0.014">
    </testcase>
    <testcase classname="CFDAccountCard should show add demo account button and call onSelectAccount if the button is clicked" name="CFDAccountCard should show add demo account button and call onSelectAccount if the button is clicked" time="0.016">
    </testcase>
    <testcase classname="CFDAccountCard should show labuan banner" name="CFDAccountCard should show labuan banner" time="0.004">
    </testcase>
    <testcase classname="CFDAccountCard should show fund transfer button and call onClickFund when the button is clicked" name="CFDAccountCard should show fund transfer button and call onClickFund when the button is clicked" time="0.004">
    </testcase>
    <testcase classname="CFDAccountCard should call onPasswordManager when the password change button icon is clicked" name="CFDAccountCard should call onPasswordManager when the password change button icon is clicked" time="0.016">
    </testcase>
    <testcase classname="CFDAccountCard should render the account card for Demo DerivX Synthetic account " name="CFDAccountCard should render the account card for Demo DerivX Synthetic account " time="0.018">
    </testcase>
    <testcase classname="CFDAccountCard should show descriptor and commission message when the user has no existing data and not logged in" name="CFDAccountCard should show descriptor and commission message when the user has no existing data and not logged in" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MigrationSuccessModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:17" time="0.576" tests="3">
    <testcase classname="&lt;MigrationSuccessModal /&gt; component should be rendered" name="&lt;MigrationSuccessModal /&gt; component should be rendered" time="0.025">
    </testcase>
    <testcase classname="&lt;MigrationSuccessModal /&gt; should not render open position banner if has_open_positions is false" name="&lt;MigrationSuccessModal /&gt; should not render open position banner if has_open_positions is false" time="0.019">
    </testcase>
    <testcase classname="&lt;MigrationSuccessModal /&gt; should render open position banner if has_open_positions is true" name="&lt;MigrationSuccessModal /&gt; should render open position banner if has_open_positions is true" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RealAccountSignupVerifications /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:17" time="0.588" tests="5">
    <testcase classname="&lt;RealAccountSignupVerifications /&gt; should render RealAccountSignupVerifications component" name="&lt;RealAccountSignupVerifications /&gt; should render RealAccountSignupVerifications component" time="0.021">
    </testcase>
    <testcase classname="&lt;RealAccountSignupVerifications /&gt; should render properly for the first step content" name="&lt;RealAccountSignupVerifications /&gt; should render properly for the first step content" time="0.005">
    </testcase>
    <testcase classname="&lt;RealAccountSignupVerifications /&gt; should render properly for the second step content" name="&lt;RealAccountSignupVerifications /&gt; should render properly for the second step content" time="0.01">
    </testcase>
    <testcase classname="&lt;RealAccountSignupVerifications /&gt; should check for POI status when Jurisdiction is Vanuatu or maltainvest" name="&lt;RealAccountSignupVerifications /&gt; should check for POI status when Jurisdiction is Vanuatu or maltainvest" time="0.006">
    </testcase>
    <testcase classname="&lt;RealAccountSignupVerifications /&gt; should check for POA status when Jurisdiction is Labuan and resubmit status is set to true" name="&lt;RealAccountSignupVerifications /&gt; should check for POA status when Jurisdiction is Labuan and resubmit status is set to true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ServerErrorDialog /&gt; " errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:17" time="0.603" tests="5">
    <testcase classname="&lt;ServerErrorDialog /&gt;  should render the component properly" name="&lt;ServerErrorDialog /&gt;  should render the component properly" time="0.018">
    </testcase>
    <testcase classname="&lt;ServerErrorDialog /&gt;  should render the proper text and error message" name="&lt;ServerErrorDialog /&gt;  should render the proper text and error message" time="0.024">
    </testcase>
    <testcase classname="&lt;ServerErrorDialog /&gt;  should not render the component if has_cfd_error is false" name="&lt;ServerErrorDialog /&gt;  should not render the component if has_cfd_error is false" time="0.005">
    </testcase>
    <testcase classname="&lt;ServerErrorDialog /&gt;  should not render the component if is_cfd_success_dialog_enabled" name="&lt;ServerErrorDialog /&gt;  should not render the component if is_cfd_success_dialog_enabled" time="0.004">
    </testcase>
    <testcase classname="&lt;ServerErrorDialog /&gt;  should clear the component if OK is clicked" name="&lt;ServerErrorDialog /&gt;  should clear the component if OK is clicked" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CFDPersonalDetailsForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:16" time="1.569" tests="11">
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should render properly on desktop" name="&lt;CFDPersonalDetailsForm /&gt; should render properly on desktop" time="0.166">
    </testcase>
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should not render scrollbars or modal footer wrapper on mobile" name="&lt;CFDPersonalDetailsForm /&gt; should not render scrollbars or modal footer wrapper on mobile" time="0.024">
    </testcase>
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should show that it&apos;s loading when is_loading is true" name="&lt;CFDPersonalDetailsForm /&gt; should show that it&apos;s loading when is_loading is true" time="0.002">
    </testcase>
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should show that it&apos;s loading when residence_list is still empty" name="&lt;CFDPersonalDetailsForm /&gt; should show that it&apos;s loading when residence_list is still empty" time="0.002">
    </testcase>
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should disable Citizenship and Tax residence fields if they were submitted earlier &amp; immutable from BE" name="&lt;CFDPersonalDetailsForm /&gt; should disable Citizenship and Tax residence fields if they were submitted earlier &amp; immutable from BE" time="0.095">
    </testcase>
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should show an error message received from server that is passed via props as form_error" name="&lt;CFDPersonalDetailsForm /&gt; should show an error message received from server that is passed via props as form_error" time="0.032">
    </testcase>
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should show validation errors in fields" name="&lt;CFDPersonalDetailsForm /&gt; should show validation errors in fields" time="0.157">
    </testcase>
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should enable the Next button for form submission when all required fields are filled" name="&lt;CFDPersonalDetailsForm /&gt; should enable the Next button for form submission when all required fields are filled" time="0.244">
    </testcase>
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should disable the Next button in case of invalid input in a required field" name="&lt;CFDPersonalDetailsForm /&gt; should disable the Next button in case of invalid input in a required field" time="0.045">
    </testcase>
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should disable the Next button in case a required field is empty" name="&lt;CFDPersonalDetailsForm /&gt; should disable the Next button in case a required field is empty" time="0.048">
    </testcase>
    <testcase classname="&lt;CFDPersonalDetailsForm /&gt; should not show TIN field if the country is NPJ based on the landing_company_details response" name="&lt;CFDPersonalDetailsForm /&gt; should not show TIN field if the country is NPJ based on the landing_company_details response" time="0.125">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CompareAccounts /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:17" time="0.603" tests="4">
    <testcase classname="&lt;CompareAccounts /&gt; should render the component and redirect to compare account page" name="&lt;CompareAccounts /&gt; should render the component and redirect to compare account page" time="0.022">
    </testcase>
    <testcase classname="&lt;CompareAccounts /&gt; should render the carousel componet with the correct content" name="&lt;CompareAccounts /&gt; should render the carousel componet with the correct content" time="0.005">
    </testcase>
    <testcase classname="&lt;CompareAccounts /&gt; should render the component and redirect to compare demo account page" name="&lt;CompareAccounts /&gt; should render the component and redirect to compare demo account page" time="0.004">
    </testcase>
    <testcase classname="&lt;CompareAccounts /&gt; navigates to the trader&apos;s hub when the navigation element is clicked" name="&lt;CompareAccounts /&gt; navigates to the trader&apos;s hub when the navigation element is clicked" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="TopUpDemoModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:17" time="0.763" tests="6">
    <testcase classname="TopUpDemoModal should render the button texts correctly" name="TopUpDemoModal should render the button texts correctly" time="0.062">
    </testcase>
    <testcase classname="TopUpDemoModal should render the proper balance in the current balance" name="TopUpDemoModal should render the proper balance in the current balance" time="0.01">
    </testcase>
    <testcase classname="TopUpDemoModal should disable the top up button if the balance is higher than 1000 USD" name="TopUpDemoModal should disable the top up button if the balance is higher than 1000 USD" time="0.024">
    </testcase>
    <testcase classname="TopUpDemoModal should enable the top up button if the balance is lower than 1000 USD" name="TopUpDemoModal should enable the top up button if the balance is lower than 1000 USD" time="0.024">
    </testcase>
    <testcase classname="TopUpDemoModal should render the success component if the is_top_up_virtual_success is true" name="TopUpDemoModal should render the success component if the is_top_up_virtual_success is true" time="0.006">
    </testcase>
    <testcase classname="TopUpDemoModal should not render the component if conditions are false" name="TopUpDemoModal should not render the component if conditions are false" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ProofOfIdentity /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:18" time="0.499" tests="1">
    <testcase classname="&lt;ProofOfIdentity /&gt; should render ProofOfIdentityContainerForMt5" name="&lt;ProofOfIdentity /&gt; should render ProofOfIdentityContainerForMt5" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ProofOfAddress /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:18" time="0.906" tests="1">
    <testcase classname="&lt;ProofOfAddress /&gt; should render ProofOfAddress and trigger buttons" name="&lt;ProofOfAddress /&gt; should render ProofOfAddress and trigger buttons" time="0.141">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PersonalDetailsForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:18" time="1.235" tests="10">
    <testcase classname="&lt;PersonalDetailsForm /&gt; should render properly on desktop" name="&lt;PersonalDetailsForm /&gt; should render properly on desktop" time="0.119">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should not render scrollbars or modal footer wrapper on mobile" name="&lt;PersonalDetailsForm /&gt; should not render scrollbars or modal footer wrapper on mobile" time="0.029">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should show that it&apos;s loading when is_loading is true" name="&lt;PersonalDetailsForm /&gt; should show that it&apos;s loading when is_loading is true" time="0.003">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should show that it&apos;s loading when residence_list is still empty" name="&lt;PersonalDetailsForm /&gt; should show that it&apos;s loading when residence_list is still empty" time="0.002">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should disable Citizenship and Tax residence fields if they were submitted earlier &amp; immutable from BE" name="&lt;PersonalDetailsForm /&gt; should disable Citizenship and Tax residence fields if they were submitted earlier &amp; immutable from BE" time="0.1">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should show an error message received from server that is passed via props as form_error" name="&lt;PersonalDetailsForm /&gt; should show an error message received from server that is passed via props as form_error" time="0.04">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should show validation errors in fields" name="&lt;PersonalDetailsForm /&gt; should show validation errors in fields" time="0.135">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should enable the Next button for form submission when all required fields are filled" name="&lt;PersonalDetailsForm /&gt; should enable the Next button for form submission when all required fields are filled" time="0.19">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should disable the Next button in case of invalid input in a required field" name="&lt;PersonalDetailsForm /&gt; should disable the Next button in case of invalid input in a required field" time="0.045">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should disable the Next button in case a required field is empty" name="&lt;PersonalDetailsForm /&gt; should disable the Next button in case a required field is empty" time="0.045">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OnRampProviderCard /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:18" time="1.519" tests="3">
    <testcase classname="&lt;OnRampProviderCard /&gt; should show proper messages and button" name="&lt;OnRampProviderCard /&gt; should show proper messages and button" time="0.027">
    </testcase>
    <testcase classname="&lt;OnRampProviderCard /&gt; should show proper icons in dark_mode" name="&lt;OnRampProviderCard /&gt; should show proper icons in dark_mode" time="0.011">
    </testcase>
    <testcase classname="&lt;OnRampProviderCard /&gt; should trigger onClick callback, when &quot;Select&quot; button is clicked" name="&lt;OnRampProviderCard /&gt; should trigger onClick callback, when &quot;Select&quot; button is clicked" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OnRampProviderPopup /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:18" time="1.48" tests="9">
    <testcase classname="&lt;OnRampProviderPopup /&gt; should not render &lt;OnRampProviderPopup /&gt; component" name="&lt;OnRampProviderPopup /&gt; should not render &lt;OnRampProviderPopup /&gt; component" time="0.012">
    </testcase>
    <testcase classname="&lt;OnRampProviderPopup /&gt; should show loader" name="&lt;OnRampProviderPopup /&gt; should show loader" time="0.005">
    </testcase>
    <testcase classname="&lt;OnRampProviderPopup /&gt; should show widget" name="&lt;OnRampProviderPopup /&gt; should show widget" time="0.004">
    </testcase>
    <testcase classname="&lt;OnRampProviderPopup /&gt; should show dialog with proper messages and buttons" name="&lt;OnRampProviderPopup /&gt; should show dialog with proper messages and buttons" time="0.007">
    </testcase>
    <testcase classname="&lt;OnRampProviderPopup /&gt; should show dialog with proper messages and buttons" name="&lt;OnRampProviderPopup /&gt; should show dialog with proper messages and buttons" time="0.035">
    </testcase>
    <testcase classname="&lt;OnRampProviderPopup /&gt; should trigger onClick callbacks in dialog when the user clicks &quot;Cancel&quot; and &quot;Go to Deposit page&quot; buttons" name="&lt;OnRampProviderPopup /&gt; should trigger onClick callbacks in dialog when the user clicks &quot;Cancel&quot; and &quot;Go to Deposit page&quot; buttons" time="0.022">
    </testcase>
    <testcase classname="&lt;OnRampProviderPopup /&gt; should show proper messages and buttons" name="&lt;OnRampProviderPopup /&gt; should show proper messages and buttons" time="0.037">
    </testcase>
    <testcase classname="&lt;OnRampProviderPopup /&gt; should trigger onFocus method when the user clicks on deposit address field" name="&lt;OnRampProviderPopup /&gt; should trigger onFocus method when the user clicks on deposit address field" time="0.014">
    </testcase>
    <testcase classname="&lt;OnRampProviderPopup /&gt; should trigger onClick calbacks when the user clicks on &quot;Cancel&quot; and &quot;Continue&quot; buttons" name="&lt;OnRampProviderPopup /&gt; should trigger onClick calbacks when the user clicks on &quot;Cancel&quot; and &quot;Continue&quot; buttons" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OnRamp /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:18" time="1.717" tests="9">
    <testcase classname="&lt;OnRamp /&gt; should render &lt;Loading /&gt; component" name="&lt;OnRamp /&gt; should render &lt;Loading /&gt; component" time="0.015">
    </testcase>
    <testcase classname="&lt;OnRamp /&gt; should render &lt;CashierLocked /&gt; component" name="&lt;OnRamp /&gt; should render &lt;CashierLocked /&gt; component" time="0.003">
    </testcase>
    <testcase classname="&lt;OnRamp /&gt; should render &lt;OnRampProviderCard /&gt; component and &quot;Select payment channel&quot; message" name="&lt;OnRamp /&gt; should render &lt;OnRampProviderCard /&gt; component and &quot;Select payment channel&quot; message" time="0.007">
    </testcase>
    <testcase classname="&lt;OnRamp /&gt; should render &lt;Modal /&gt; component with proper title and &lt;OnRampProviderPopup /&gt; component" name="&lt;OnRamp /&gt; should render &lt;Modal /&gt; component with proper title and &lt;OnRampProviderPopup /&gt; component" time="0.009">
    </testcase>
    <testcase classname="&lt;OnRamp /&gt; should trigger &quot;setIsOnRampModalOpen&quot; callback when the close cross button is clicked on the modal window" name="&lt;OnRamp /&gt; should trigger &quot;setIsOnRampModalOpen&quot; callback when the close cross button is clicked on the modal window" time="0.031">
    </testcase>
    <testcase classname="&lt;OnRamp /&gt; should trigger &quot;setSideNotes&quot; callback in Desktop mode" name="&lt;OnRamp /&gt; should trigger &quot;setSideNotes&quot; callback in Desktop mode" time="0.004">
    </testcase>
    <testcase classname="&lt;OnRamp /&gt; should show &quot;What is Fiat onramp?&quot; message and render &lt;ReadMore /&gt; component in Mobile mode" name="&lt;OnRamp /&gt; should show &quot;What is Fiat onramp?&quot; message and render &lt;ReadMore /&gt; component in Mobile mode" time="0.013">
    </testcase>
    <testcase classname="&lt;OnRamp /&gt; should have proper menu options in Mobile mode" name="&lt;OnRamp /&gt; should have proper menu options in Mobile mode" time="0.007">
    </testcase>
    <testcase classname="&lt;OnRamp /&gt; should trigger &quot;routeTo&quot; callback when the user chooses a different from &quot;Fiat onramp&quot; option in Mobile mode" name="&lt;OnRamp /&gt; should trigger &quot;routeTo&quot; callback when the user chooses a different from &quot;Fiat onramp&quot; option in Mobile mode" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentTransferForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:18" time="1.501" tests="5">
    <testcase classname="&lt;PaymentAgentTransferForm /&gt; should render the component" name="&lt;PaymentAgentTransferForm /&gt; should render the component" time="0.028">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransferForm /&gt; should have the submit button disabled if no data is filled (initially)" name="&lt;PaymentAgentTransferForm /&gt; should have the submit button disabled if no data is filled (initially)" time="0.013">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransferForm /&gt; should show an error if the login id is not valid" name="&lt;PaymentAgentTransferForm /&gt; should show an error if the login id is not valid" time="0.034">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransferForm /&gt; should show an error if amount to be transferred is greater than the balance" name="&lt;PaymentAgentTransferForm /&gt; should show an error if amount to be transferred is greater than the balance" time="0.031">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransferForm /&gt; should show an error if description is not valid" name="&lt;PaymentAgentTransferForm /&gt; should show an error if description is not valid" time="0.054">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentTransfer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:19" time="0.8" tests="8">
    <testcase classname="&lt;PaymentAgentTransfer /&gt; should render the component" name="&lt;PaymentAgentTransfer /&gt; should render the component" time="0.028">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransfer /&gt; should show the virtual component if client is using demo account" name="&lt;PaymentAgentTransfer /&gt; should show the virtual component if client is using demo account" time="0.009">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransfer /&gt; should show the loading component if in loading state" name="&lt;PaymentAgentTransfer /&gt; should show the loading component if in loading state" time="0.002">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransfer /&gt; should show the cashier locked component if cashier is locked" name="&lt;PaymentAgentTransfer /&gt; should show the cashier locked component if cashier is locked" time="0.002">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransfer /&gt; should show a popup if there is an error that needs CTA" name="&lt;PaymentAgentTransfer /&gt; should show a popup if there is an error that needs CTA" time="0.002">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransfer /&gt; should show the no balance component if account has no balance" name="&lt;PaymentAgentTransfer /&gt; should show the no balance component if account has no balance" time="0.003">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransfer /&gt; should show the confirmation if validations are passed" name="&lt;PaymentAgentTransfer /&gt; should show the confirmation if validations are passed" time="0.002">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransfer /&gt; should show the receipt if transfer is successful" name="&lt;PaymentAgentTransfer /&gt; should show the receipt if transfer is successful" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentTransferConfirm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:20" time="0.752" tests="4">
    <testcase classname="&lt;PaymentAgentTransferConfirm /&gt; should show proper icon and message" name="&lt;PaymentAgentTransferConfirm /&gt; should show proper icon and message" time="0.025">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransferConfirm /&gt; setIsTryTransferSuccessful method should be triggered when click on &apos;Back&apos; button" name="&lt;PaymentAgentTransferConfirm /&gt; setIsTryTransferSuccessful method should be triggered when click on &apos;Back&apos; button" time="0.034">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransferConfirm /&gt; requestPaymentAgentTransfer fuction should be triggered if checkbox is enabled and the &quot;Transfer now&quot; button is clicked" name="&lt;PaymentAgentTransferConfirm /&gt; requestPaymentAgentTransfer fuction should be triggered if checkbox is enabled and the &quot;Transfer now&quot; button is clicked" time="0.029">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransferConfirm /&gt; should show error message" name="&lt;PaymentAgentTransferConfirm /&gt; should show error message" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentDepositDetails /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:20" time="0.815" tests="1">
    <testcase classname="&lt;PaymentAgentDepositDetails /&gt; should show proper payment agent deposit details" name="&lt;PaymentAgentDepositDetails /&gt; should show proper payment agent deposit details" time="0.19">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentTransferReceipt /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:19" time="1.425" tests="3">
    <testcase classname="&lt;PaymentAgentTransferReceipt /&gt; component should render" name="&lt;PaymentAgentTransferReceipt /&gt; component should render" time="0.024">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransferReceipt /&gt; should redirect to statement page when click on &apos;View in statement&apos; button" name="&lt;PaymentAgentTransferReceipt /&gt; should redirect to statement page when click on &apos;View in statement&apos; button" time="0.012">
    </testcase>
    <testcase classname="&lt;PaymentAgentTransferReceipt /&gt; resetPaymentAgentTransfer func should be triggered when click on &apos;Make a new transfer&apos; button" name="&lt;PaymentAgentTransferReceipt /&gt; resetPaymentAgentTransfer func should be triggered when click on &apos;Make a new transfer&apos; button" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="Helpers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:20" time="0.359" tests="3">
    <testcase classname="Helpers should normalize payment methods" name="Helpers should normalize payment methods" time="0.015">
    </testcase>
    <testcase classname="Helpers should properly evaluate normalized payment methods" name="Helpers should properly evaluate normalized payment methods" time="0.003">
    </testcase>
    <testcase classname="Helpers should remove duplicated methods" name="Helpers should remove duplicated methods" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentDetail /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:20" time="0.699" tests="4">
    <testcase classname="&lt;PaymentAgentDetail /&gt; should show proper icon, title and description" name="&lt;PaymentAgentDetail /&gt; should show proper icon, title and description" time="0.02">
    </testcase>
    <testcase classname="&lt;PaymentAgentDetail /&gt; should show proper description if children is an array" name="&lt;PaymentAgentDetail /&gt; should show proper description if children is an array" time="0.003">
    </testcase>
    <testcase classname="&lt;PaymentAgentDetail /&gt; should show description as a link if is_link or action were defined" name="&lt;PaymentAgentDetail /&gt; should show description as a link if is_link or action were defined" time="0.004">
    </testcase>
    <testcase classname="&lt;PaymentAgentDetail /&gt; should show description as a paragraph if is_link or action were not defined" name="&lt;PaymentAgentDetail /&gt; should show description as a paragraph if is_link or action were not defined" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useCountdown" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:02" time="19.318" tests="7">
    <testcase classname="useCountdown should have initial count of 60 and is_running of false" name="useCountdown should have initial count of 60 and is_running of false" time="0.009">
    </testcase>
    <testcase classname="useCountdown should count down from 2 to 0 after start is called and stop once finished" name="useCountdown should count down from 2 to 0 after start is called and stop once finished" time="3.011">
    </testcase>
    <testcase classname="useCountdown should count down from 1 to -1 after start is called and stop once finished" name="useCountdown should count down from 1 to -1 after start is called and stop once finished" time="3.007">
    </testcase>
    <testcase classname="useCountdown should count down from -1 to 1 after start is called and stop once finished" name="useCountdown should count down from -1 to 1 after start is called and stop once finished" time="3.007">
    </testcase>
    <testcase classname="useCountdown should count down from 3 to 0 after start is called and reset the counter at 1 and stop once finished" name="useCountdown should count down from 3 to 0 after start is called and reset the counter at 1 and stop once finished" time="6.013">
    </testcase>
    <testcase classname="useCountdown should count down from 3 to 0 after start is called and pause the counter at 1" name="useCountdown should count down from 3 to 0 after start is called and pause the counter at 1" time="2.007">
    </testcase>
    <testcase classname="useCountdown should count down from 3 to 0 after start is called and stop the counter at 1" name="useCountdown should count down from 3 to 0 after start is called and stop the counter at 1" time="2.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentWithdrawConfirm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:20" time="0.839" tests="5">
    <testcase classname="&lt;PaymentAgentWithdrawConfirm /&gt; should show proper messages and buttons" name="&lt;PaymentAgentWithdrawConfirm /&gt; should show proper messages and buttons" time="0.061">
    </testcase>
    <testcase classname="&lt;PaymentAgentWithdrawConfirm /&gt; should show error messages and button" name="&lt;PaymentAgentWithdrawConfirm /&gt; should show error messages and button" time="0.029">
    </testcase>
    <testcase classname="&lt;PaymentAgentWithdrawConfirm /&gt; should trigger setIsTryWithdrawSuccessful method when the client clicks on Back button" name="&lt;PaymentAgentWithdrawConfirm /&gt; should trigger setIsTryWithdrawSuccessful method when the client clicks on Back button" time="0.013">
    </testcase>
    <testcase classname="&lt;PaymentAgentWithdrawConfirm /&gt; should enable Transfer now button when checkbox is checked" name="&lt;PaymentAgentWithdrawConfirm /&gt; should enable Transfer now button when checkbox is checked" time="0.023">
    </testcase>
    <testcase classname="&lt;PaymentAgentWithdrawConfirm /&gt; should trigger requestPaymentAgentWithdraw method when the client clicks on Transfer now button" name="&lt;PaymentAgentWithdrawConfirm /&gt; should trigger requestPaymentAgentWithdraw method when the client clicks on Transfer now button" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentListedWithdrawForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:20" time="0.716" tests="5">
    <testcase classname="&lt;PaymentAgentListedWithdrawForm /&gt; should render the component" name="&lt;PaymentAgentListedWithdrawForm /&gt; should render the component" time="0.048">
    </testcase>
    <testcase classname="&lt;PaymentAgentListedWithdrawForm /&gt; should show loader when is_loading equal to true or there is no payment agents" name="&lt;PaymentAgentListedWithdrawForm /&gt; should show loader when is_loading equal to true or there is no payment agents" time="0.005">
    </testcase>
    <testcase classname="&lt;PaymentAgentListedWithdrawForm /&gt; should show error message, if amount is not valid" name="&lt;PaymentAgentListedWithdrawForm /&gt; should show error message, if amount is not valid" time="0.026">
    </testcase>
    <testcase classname="&lt;PaymentAgentListedWithdrawForm /&gt; should show Insufficient balance error" name="&lt;PaymentAgentListedWithdrawForm /&gt; should show Insufficient balance error" time="0.023">
    </testcase>
    <testcase classname="&lt;PaymentAgentListedWithdrawForm /&gt; should trigger requestTryPaymentAgentWithdraw, when all data are valid" name="&lt;PaymentAgentListedWithdrawForm /&gt; should trigger requestTryPaymentAgentWithdraw, when all data are valid" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentCardDescription /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:21" time="0.501" tests="2">
    <testcase classname="&lt;PaymentAgentCardDescription /&gt; should show proper description details and icon" name="&lt;PaymentAgentCardDescription /&gt; should show proper description details and icon" time="0.013">
    </testcase>
    <testcase classname="&lt;PaymentAgentCardDescription /&gt; should not show an icon when there is no appropriate icon for payment method" name="&lt;PaymentAgentCardDescription /&gt; should not show an icon when there is no appropriate icon for payment method" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:20" time="0.796" tests="6">
    <testcase classname="&lt;PaymentAgent /&gt; should render the payment agent list" name="&lt;PaymentAgent /&gt; should render the payment agent list" time="0.016">
    </testcase>
    <testcase classname="&lt;PaymentAgent /&gt; should render the loading component if in loading state" name="&lt;PaymentAgent /&gt; should render the loading component if in loading state" time="0.006">
    </testcase>
    <testcase classname="&lt;PaymentAgent /&gt; should show the virtual component if the client is using demo account" name="&lt;PaymentAgent /&gt; should show the virtual component if the client is using demo account" time="0.007">
    </testcase>
    <testcase classname="&lt;PaymentAgent /&gt; should show the cashier locked component if cashier is locked" name="&lt;PaymentAgent /&gt; should show the cashier locked component if cashier is locked" time="0.003">
    </testcase>
    <testcase classname="&lt;PaymentAgent /&gt; should reset the index on unmount of component" name="&lt;PaymentAgent /&gt; should reset the index on unmount of component" time="0.002">
    </testcase>
    <testcase classname="&lt;PaymentAgent /&gt; should set the active tab index accordingly" name="&lt;PaymentAgent /&gt; should set the active tab index accordingly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentReceipt /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:21" time="0.726" tests="5">
    <testcase classname="&lt;PaymentAgentReceipt /&gt; should show the proper text/messages" name="&lt;PaymentAgentReceipt /&gt; should show the proper text/messages" time="0.054">
    </testcase>
    <testcase classname="&lt;PaymentAgentReceipt /&gt; should redirect to &quot;/reports/statement&quot; when the &quot;View transactions&quot; button is clicked" name="&lt;PaymentAgentReceipt /&gt; should redirect to &quot;/reports/statement&quot; when the &quot;View transactions&quot; button is clicked" time="0.021">
    </testcase>
    <testcase classname="&lt;PaymentAgentReceipt /&gt; should trigger onClick callback when the &quot;Make a new withdrawal&quot; button is clicked" name="&lt;PaymentAgentReceipt /&gt; should trigger onClick callback when the &quot;Make a new withdrawal&quot; button is clicked" time="0.016">
    </testcase>
    <testcase classname="&lt;PaymentAgentReceipt /&gt; should not show &quot;View transactions&quot; if is_from_derivgo equal to true" name="&lt;PaymentAgentReceipt /&gt; should not show &quot;View transactions&quot; if is_from_derivgo equal to true" time="0.009">
    </testcase>
    <testcase classname="&lt;PaymentAgentReceipt /&gt; should show PaymentAgentDisclaimer in mobile view" name="&lt;PaymentAgentReceipt /&gt; should show PaymentAgentDisclaimer in mobile view" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentUnlistedWithdrawForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:21" time="0.757" tests="5">
    <testcase classname="&lt;PaymentAgentUnlistedWithdrawForm /&gt; should render the component" name="&lt;PaymentAgentUnlistedWithdrawForm /&gt; should render the component" time="0.066">
    </testcase>
    <testcase classname="&lt;PaymentAgentUnlistedWithdrawForm /&gt; should trigger onclick callback when arrow back button was clicked" name="&lt;PaymentAgentUnlistedWithdrawForm /&gt; should trigger onclick callback when arrow back button was clicked" time="0.015">
    </testcase>
    <testcase classname="&lt;PaymentAgentUnlistedWithdrawForm /&gt; should show different error messages" name="&lt;PaymentAgentUnlistedWithdrawForm /&gt; should show different error messages" time="0.067">
    </testcase>
    <testcase classname="&lt;PaymentAgentUnlistedWithdrawForm /&gt; should trigger requestTryPaymentAgentWithdraw, when all data are valid" name="&lt;PaymentAgentUnlistedWithdrawForm /&gt; should trigger requestTryPaymentAgentWithdraw, when all data are valid" time="0.027">
    </testcase>
    <testcase classname="&lt;PaymentAgentUnlistedWithdrawForm /&gt; should show PaymentAgentDisclaimer in mobile view" name="&lt;PaymentAgentUnlistedWithdrawForm /&gt; should show PaymentAgentDisclaimer in mobile view" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentContainer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:21" time="0.774" tests="8">
    <testcase classname="&lt;PaymentAgentContainer /&gt; should show proper messages and icons" name="&lt;PaymentAgentContainer /&gt; should show proper messages and icons" time="0.043">
    </testcase>
    <testcase classname="&lt;PaymentAgentContainer /&gt; should show proper header when is_deposit is equal to false" name="&lt;PaymentAgentContainer /&gt; should show proper header when is_deposit is equal to false" time="0.01">
    </testcase>
    <testcase classname="&lt;PaymentAgentContainer /&gt; should show PaymentAgentUnlistedWithdrawForm when the user clicks on &quot;search for them using their account number&quot; link" name="&lt;PaymentAgentContainer /&gt; should show PaymentAgentUnlistedWithdrawForm when the user clicks on &quot;search for them using their account number&quot; link" time="0.012">
    </testcase>
    <testcase classname="&lt;PaymentAgentContainer /&gt; should show PaymentAgentWithdrawConfirm component when is_try_withdraw_successful is equal to true" name="&lt;PaymentAgentContainer /&gt; should show PaymentAgentWithdrawConfirm component when is_try_withdraw_successful is equal to true" time="0.004">
    </testcase>
    <testcase classname="&lt;PaymentAgentContainer /&gt; should show PaymentAgentReceipt component when is_withdraw_successful is equal to true" name="&lt;PaymentAgentContainer /&gt; should show PaymentAgentReceipt component when is_withdraw_successful is equal to true" time="0.003">
    </testcase>
    <testcase classname="&lt;PaymentAgentContainer /&gt; should show PaymentAgentDisclaimer in mobile view" name="&lt;PaymentAgentContainer /&gt; should show PaymentAgentDisclaimer in mobile view" time="0.018">
    </testcase>
    <testcase classname="&lt;PaymentAgentContainer /&gt; should show search loader when is_search_loading equal to true" name="&lt;PaymentAgentContainer /&gt; should show search loader when is_search_loading equal to true" time="0.012">
    </testcase>
    <testcase classname="&lt;PaymentAgentContainer /&gt; should show proper warning messages if there are no matches in search results" name="&lt;PaymentAgentContainer /&gt; should show proper warning messages if there are no matches in search results" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="WithdrawalLocked" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:21" time="0.686" tests="6">
    <testcase classname="WithdrawalLocked Should show &quot;Check proof of identity document verification status&quot; message and redirect to account/proof-of-identity when &quot;--&gt;&quot; button clicked" name="WithdrawalLocked Should show &quot;Check proof of identity document verification status&quot; message and redirect to account/proof-of-identity when &quot;--&gt;&quot; button clicked" time="0.029">
    </testcase>
    <testcase classname="WithdrawalLocked Should show &quot;Upload a proof of identity to verify your identity&quot; message and redirect to account/proof-of-identity when &quot;--&gt;&quot; button clicked" name="WithdrawalLocked Should show &quot;Upload a proof of identity to verify your identity&quot; message and redirect to account/proof-of-identity when &quot;--&gt;&quot; button clicked" time="0.01">
    </testcase>
    <testcase classname="WithdrawalLocked Should show &quot;Check proof of address document verification status&quot; message and redirect to account/proof_of_address when &quot;--&gt;&quot; button clicked" name="WithdrawalLocked Should show &quot;Check proof of address document verification status&quot; message and redirect to account/proof_of_address when &quot;--&gt;&quot; button clicked" time="0.006">
    </testcase>
    <testcase classname="WithdrawalLocked Should show &quot;Upload a proof of address to verify your address&quot; message and redirect to account/proof_of_address when &quot;--&gt;&quot; button clicked" name="WithdrawalLocked Should show &quot;Upload a proof of address to verify your address&quot; message and redirect to account/proof_of_address when &quot;--&gt;&quot; button clicked" time="0.009">
    </testcase>
    <testcase classname="WithdrawalLocked Should show &quot;Complete the financial assessment form&quot; message and redirect to account/financial_assessment when &quot;--&gt;&quot; button clicked" name="WithdrawalLocked Should show &quot;Complete the financial assessment form&quot; message and redirect to account/financial_assessment when &quot;--&gt;&quot; button clicked" time="0.007">
    </testcase>
    <testcase classname="WithdrawalLocked should render &lt;CashierLocked /&gt; component" name="WithdrawalLocked should render &lt;CashierLocked /&gt; component" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WithdrawalCryptoReceipt /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:21" time="0.774" tests="6">
    <testcase classname="&lt;WithdrawalCryptoReceipt /&gt; should show the proper text/messages" name="&lt;WithdrawalCryptoReceipt /&gt; should show the proper text/messages" time="0.044">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoReceipt /&gt; should trigger onClick callback when the &quot;View transaction history&quot; button is clicked" name="&lt;WithdrawalCryptoReceipt /&gt; should trigger onClick callback when the &quot;View transaction history&quot; button is clicked" time="0.017">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoReceipt /&gt; should trigger onClick callback when the &quot;Make a new withdrawal&quot; button is clicked" name="&lt;WithdrawalCryptoReceipt /&gt; should trigger onClick callback when the &quot;Make a new withdrawal&quot; button is clicked" time="0.013">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoReceipt /&gt; should show the status as &quot;In process&quot; if the transaction status is &quot;PROCESSING&quot;" name="&lt;WithdrawalCryptoReceipt /&gt; should show the status as &quot;In process&quot; if the transaction status is &quot;PROCESSING&quot;" time="0.012">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoReceipt /&gt; should show the status as &quot;Unsuccessful&quot; if the transaction status is &quot;ERROR&quot;" name="&lt;WithdrawalCryptoReceipt /&gt; should show the status as &quot;Unsuccessful&quot; if the transaction status is &quot;ERROR&quot;" time="0.016">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoReceipt /&gt; should show the status as &quot;Successful&quot; if the transaction status is &quot;SENT&quot;" name="&lt;WithdrawalCryptoReceipt /&gt; should show the status as &quot;Successful&quot; if the transaction status is &quot;SENT&quot;" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WithdrawalFiat /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:21" time="0.684" tests="1">
    <testcase classname="&lt;WithdrawalFiat /&gt; should render the cashier container component" name="&lt;WithdrawalFiat /&gt; should render the cashier container component" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PaymentAgentCard /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:21" time="1.586" tests="1">
    <testcase classname="&lt;PaymentAgentCard /&gt; should render PaymentAgentCard component with ExpansionPanel" name="&lt;PaymentAgentCard /&gt; should render PaymentAgentCard component with ExpansionPanel" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="WithdrawalVerificationEmail" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:22" time="0.806" tests="3">
    <testcase classname="WithdrawalVerificationEmail should render the component" name="WithdrawalVerificationEmail should render the component" time="0.04">
    </testcase>
    <testcase classname="WithdrawalVerificationEmail should show the error component when `error` is provided" name="WithdrawalVerificationEmail should show the error component when `error` is provided" time="0.01">
    </testcase>
    <testcase classname="WithdrawalVerificationEmail should show the proper message when email has been sent." name="WithdrawalVerificationEmail should show the proper message when email has been sent." time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Withdrawal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:22" time="0.88" tests="9">
    <testcase classname="&lt;Withdrawal /&gt; should render &lt;Loading /&gt; component" name="&lt;Withdrawal /&gt; should render &lt;Loading /&gt; component" time="0.014">
    </testcase>
    <testcase classname="&lt;Withdrawal /&gt; should render &lt;WithdrawalLocked /&gt; component" name="&lt;Withdrawal /&gt; should render &lt;WithdrawalLocked /&gt; component" time="0.015">
    </testcase>
    <testcase classname="&lt;Withdrawal /&gt; should render &lt;NoBalance /&gt; component" name="&lt;Withdrawal /&gt; should render &lt;NoBalance /&gt; component" time="0.003">
    </testcase>
    <testcase classname="&lt;Withdrawal /&gt; should render &lt;Error /&gt; component" name="&lt;Withdrawal /&gt; should render &lt;Error /&gt; component" time="0.005">
    </testcase>
    <testcase classname="&lt;Withdrawal /&gt; should render &lt;WithdrawalFiat /&gt; component" name="&lt;Withdrawal /&gt; should render &lt;WithdrawalFiat /&gt; component" time="0.011">
    </testcase>
    <testcase classname="&lt;Withdrawal /&gt; should render &lt;WithdrawalCryptoForm /&gt; component" name="&lt;Withdrawal /&gt; should render &lt;WithdrawalCryptoForm /&gt; component" time="0.016">
    </testcase>
    <testcase classname="&lt;Withdrawal /&gt; should render &lt;WithdrawalCryptoReceipt /&gt; component" name="&lt;Withdrawal /&gt; should render &lt;WithdrawalCryptoReceipt /&gt; component" time="0.006">
    </testcase>
    <testcase classname="&lt;Withdrawal /&gt; should render &lt;TransactionsCryptoHistory /&gt; component" name="&lt;Withdrawal /&gt; should render &lt;TransactionsCryptoHistory /&gt; component" time="0.002">
    </testcase>
    <testcase classname="&lt;Withdrawal /&gt; should render &lt;WithdrawalVerificationEmail /&gt; component" name="&lt;Withdrawal /&gt; should render &lt;WithdrawalVerificationEmail /&gt; component" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WithdrawalCryptoForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:22" time="1.041" tests="7">
    <testcase classname="&lt;WithdrawalCryptoForm /&gt; should render arrow left icon when the user focused on the left input" name="&lt;WithdrawalCryptoForm /&gt; should render arrow left icon when the user focused on the left input" time="0.042">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoForm /&gt; component and header should be rendered" name="&lt;WithdrawalCryptoForm /&gt; component and header should be rendered" time="0.013">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoForm /&gt; should show a proper error if address is not provided" name="&lt;WithdrawalCryptoForm /&gt; should show a proper error if address is not provided" time="0.037">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoForm /&gt; should show a proper error if provided address has less characters than needed" name="&lt;WithdrawalCryptoForm /&gt; should show a proper error if provided address has less characters than needed" time="0.024">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoForm /&gt; should show a proper error if provided address has more characters than needed" name="&lt;WithdrawalCryptoForm /&gt; should show a proper error if provided address has more characters than needed" time="0.021">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoForm /&gt; requestWithdraw func should be called if value provided from &apos;converter_from_amount&apos; input and withdraw button is clicked" name="&lt;WithdrawalCryptoForm /&gt; requestWithdraw func should be called if value provided from &apos;converter_from_amount&apos; input and withdraw button is clicked" time="0.068">
    </testcase>
    <testcase classname="&lt;WithdrawalCryptoForm /&gt; requestWithdraw func should be called if value provided from &apos;converter_to_amount&apos; input and withdraw button is clicked" name="&lt;WithdrawalCryptoForm /&gt; requestWithdraw func should be called if value provided from &apos;converter_to_amount&apos; input and withdraw button is clicked" time="0.069">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountTransferReceipt /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:22" time="1.012" tests="4">
    <testcase classname="&lt;AccountTransferReceipt /&gt; should show &quot;Your funds have been transferred&quot; message and &quot;View transaction details&quot; buttons" name="&lt;AccountTransferReceipt /&gt; should show &quot;Your funds have been transferred&quot; message and &quot;View transaction details&quot; buttons" time="0.029">
    </testcase>
    <testcase classname="&lt;AccountTransferReceipt /&gt; should redirect to &quot;/reports/statement&quot;, when the &quot;View transaction details&quot; button was clicked" name="&lt;AccountTransferReceipt /&gt; should redirect to &quot;/reports/statement&quot;, when the &quot;View transaction details&quot; button was clicked" time="0.018">
    </testcase>
    <testcase classname="&lt;AccountTransferReceipt /&gt; should not show &quot;We’re switching over to your {{currency}} account to view the transaction.&quot; message, when the &quot;Cancel&quot; button was clicked" name="&lt;AccountTransferReceipt /&gt; should not show &quot;We’re switching over to your {{currency}} account to view the transaction.&quot; message, when the &quot;Cancel&quot; button was clicked" time="0.275">
    </testcase>
    <testcase classname="&lt;AccountTransferReceipt /&gt; should redirect to &quot;/reports/statement&quot;, when the &quot;Switch to {currency} account&quot; button was clicked" name="&lt;AccountTransferReceipt /&gt; should redirect to &quot;/reports/statement&quot;, when the &quot;Switch to {currency} account&quot; button was clicked" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="AccountTransferLocked" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:23" time="0.781" tests="4">
    <testcase classname="AccountTransferLocked Should show the default lock content if the account is not financial" name="AccountTransferLocked Should show the default lock content if the account is not financial" time="0.032">
    </testcase>
    <testcase classname="AccountTransferLocked Should show the default lock content if the account is financial and any of the account information (financial or trading_experience) is incomplete" name="AccountTransferLocked Should show the default lock content if the account is financial and any of the account information (financial or trading_experience) is incomplete" time="0.008">
    </testcase>
    <testcase classname="AccountTransferLocked Should trigger click on the checklist item" name="AccountTransferLocked Should trigger click on the checklist item" time="0.005">
    </testcase>
    <testcase classname="AccountTransferLocked Should show the financial assessment form and redirect to account/financial-assessment when &quot;--&gt;&quot; button clicked" name="AccountTransferLocked Should show the financial assessment form and redirect to account/financial-assessment when &quot;--&gt;&quot; button clicked" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountTransferNoAccount /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:23" time="0.759" tests="5">
    <testcase classname="&lt;AccountTransferNoAccount /&gt; should show &quot;Transferring funds will require you to create a second account.&quot; message and &quot;Back to traders hub&quot; button" name="&lt;AccountTransferNoAccount /&gt; should show &quot;Transferring funds will require you to create a second account.&quot; message and &quot;Back to traders hub&quot; button" time="0.026">
    </testcase>
    <testcase classname="&lt;AccountTransferNoAccount /&gt; should show &quot;Transferring funds will require you to create a second account.&quot; message and &quot;Back to traders hub&quot; button when is_dxtrade_allowed=true" name="&lt;AccountTransferNoAccount /&gt; should show &quot;Transferring funds will require you to create a second account.&quot; message and &quot;Back to traders hub&quot; button when is_dxtrade_allowed=true" time="0.016">
    </testcase>
    <testcase classname="&lt;AccountTransferNoAccount /&gt; should navigate to traders hub, when the &quot;Back to traders hub&quot; button was clicked" name="&lt;AccountTransferNoAccount /&gt; should navigate to traders hub, when the &quot;Back to traders hub&quot; button was clicked" time="0.011">
    </testcase>
    <testcase classname="&lt;AccountTransferNoAccount /&gt; should navigate to traders hub, when the &quot;Back to traders hub&quot; button was clicked and is_dxtrade_allowed=true" name="&lt;AccountTransferNoAccount /&gt; should navigate to traders hub, when the &quot;Back to traders hub&quot; button was clicked and is_dxtrade_allowed=true" time="0.009">
    </testcase>
    <testcase classname="&lt;AccountTransferNoAccount /&gt; should not show the &quot;Back to traders hub&quot; button if is_from_derivgo is true" name="&lt;AccountTransferNoAccount /&gt; should not show the &quot;Back to traders hub&quot; button if is_from_derivgo is true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountTransfer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:23" time="0.987" tests="8">
    <testcase classname="&lt;AccountTransfer /&gt; should render the account transfer form" name="&lt;AccountTransfer /&gt; should render the account transfer form" time="0.017">
    </testcase>
    <testcase classname="&lt;AccountTransfer /&gt; should not show the side notes when switching" name="&lt;AccountTransfer /&gt; should not show the side notes when switching" time="0.009">
    </testcase>
    <testcase classname="&lt;AccountTransfer /&gt; should render the virtual component if client is using a demo account" name="&lt;AccountTransfer /&gt; should render the virtual component if client is using a demo account" time="0.009">
    </testcase>
    <testcase classname="&lt;AccountTransfer /&gt; should render the cashier locked component if cashier is locked" name="&lt;AccountTransfer /&gt; should render the cashier locked component if cashier is locked" time="0.005">
    </testcase>
    <testcase classname="&lt;AccountTransfer /&gt; should render the transfer lock component if only transfer is locked" name="&lt;AccountTransfer /&gt; should render the transfer lock component if only transfer is locked" time="0.007">
    </testcase>
    <testcase classname="&lt;AccountTransfer /&gt; should render the error component if there are errors when transferring between accounts" name="&lt;AccountTransfer /&gt; should render the error component if there are errors when transferring between accounts" time="0.004">
    </testcase>
    <testcase classname="&lt;AccountTransfer /&gt; should render the no account component if the client has only one account" name="&lt;AccountTransfer /&gt; should render the no account component if the client has only one account" time="0.004">
    </testcase>
    <testcase classname="&lt;AccountTransfer /&gt; should render the no balance component if the account has no balance" name="&lt;AccountTransfer /&gt; should render the no balance component if the account has no balance" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountTransferForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:22" time="1.491" tests="18">
    <testcase classname="&lt;AccountTransferForm /&gt; component should be rendered" name="&lt;AccountTransferForm /&gt; component should be rendered" time="0.042">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show loader if account_list.length === 0" name="&lt;AccountTransferForm /&gt; should show loader if account_list.length === 0" time="0.004">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show &lt;Form /&gt; component if account_list.length &gt; 0" name="&lt;AccountTransferForm /&gt; should show &lt;Form /&gt; component if account_list.length &gt; 0" time="0.045">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show an error if amount is not provided" name="&lt;AccountTransferForm /&gt; should show an error if amount is not provided" time="0.076">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show an error if transfer amount is greater than balance" name="&lt;AccountTransferForm /&gt; should show an error if transfer amount is greater than balance" time="0.063">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show an error and transfer button should be disabled if useMFAccountStatus is pending" name="&lt;AccountTransferForm /&gt; should show an error and transfer button should be disabled if useMFAccountStatus is pending" time="0.132">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should not allow to do transfer if accounts from and to are same" name="&lt;AccountTransferForm /&gt; should not allow to do transfer if accounts from and to are same" time="0.132">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show input if same currency" name="&lt;AccountTransferForm /&gt; should show input if same currency" time="0.029">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show &apos;Please verify your identity&apos; error if error.code is Fiat2CryptoTransferOverLimit" name="&lt;AccountTransferForm /&gt; should show &apos;Please verify your identity&apos; error if error.code is Fiat2CryptoTransferOverLimit" time="0.025">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show &apos;Cashier error&apos; error if error.code is unexpected" name="&lt;AccountTransferForm /&gt; should show &apos;Cashier error&apos; error if error.code is unexpected" time="0.022">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show proper hint about mt5 remained transfers" name="&lt;AccountTransferForm /&gt; should show proper hint about mt5 remained transfers" time="0.011">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show proper hint about dxtrade remained transfers" name="&lt;AccountTransferForm /&gt; should show proper hint about dxtrade remained transfers" time="0.023">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should show proper hint about internal remained transfers" name="&lt;AccountTransferForm /&gt; should show proper hint about internal remained transfers" time="0.013">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should display &quot;no new positions can be opened&quot; when transferring amount to a migrated svg account with position" name="&lt;AccountTransferForm /&gt; should display &quot;no new positions can be opened&quot; when transferring amount to a migrated svg account with position" time="0.011">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; should display &quot;no new positions can be opened&quot; when transferring amount to a migrated svg account without position" name="&lt;AccountTransferForm /&gt; should display &quot;no new positions can be opened&quot; when transferring amount to a migrated svg account without position" time="0.015">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; &lt;Dropdown /&gt; from_dropdown should check for USD icon when USD is selected in from_dropdown" name="&lt;AccountTransferForm /&gt; &lt;Dropdown /&gt; from_dropdown should check for USD icon when USD is selected in from_dropdown" time="0.014">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; &lt;Dropdown /&gt; from_dropdown should check for MT5 icon when MT5 is selected in from_dropdown" name="&lt;AccountTransferForm /&gt; &lt;Dropdown /&gt; from_dropdown should check for MT5 icon when MT5 is selected in from_dropdown" time="0.026">
    </testcase>
    <testcase classname="&lt;AccountTransferForm /&gt; &lt;Dropdown /&gt; from_dropdown should check for DerivX icon when DerivX is selected in from_dropdown" name="&lt;AccountTransferForm /&gt; &lt;Dropdown /&gt; from_dropdown should check for DerivX icon when DerivX is selected in from_dropdown" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DepositLocked /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:23" time="0.921" tests="5">
    <testcase classname="&lt;DepositLocked /&gt; should show the proof of identity document verification message" name="&lt;DepositLocked /&gt; should show the proof of identity document verification message" time="0.019">
    </testcase>
    <testcase classname="&lt;DepositLocked /&gt; should show the proof of address document verification message" name="&lt;DepositLocked /&gt; should show the proof of address document verification message" time="0.005">
    </testcase>
    <testcase classname="&lt;DepositLocked /&gt; should show the terms and conditions accept button" name="&lt;DepositLocked /&gt; should show the terms and conditions accept button" time="0.036">
    </testcase>
    <testcase classname="&lt;DepositLocked /&gt; should show the financial assessment completion message" name="&lt;DepositLocked /&gt; should show the financial assessment completion message" time="0.012">
    </testcase>
    <testcase classname="&lt;DepositLocked /&gt; should trigger click on the checklist item" name="&lt;DepositLocked /&gt; should trigger click on the checklist item" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Deposit /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:23" time="0.94" tests="2">
    <testcase classname="&lt;Deposit /&gt; should render &lt;DepositLocked /&gt; component" name="&lt;Deposit /&gt; should render &lt;DepositLocked /&gt; component" time="0.015">
    </testcase>
    <testcase classname="&lt;Deposit /&gt; should render &lt;TransactionsCryptoHistory /&gt; component" name="&lt;Deposit /&gt; should render &lt;TransactionsCryptoHistory /&gt; component" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="DepositCryptoWalletAddress" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:23" time="0.738" tests="1">
    <testcase classname="DepositCryptoWalletAddress should show loading while fetching" name="DepositCryptoWalletAddress should show loading while fetching" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="DepositCryptoCurrencyDetails" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:24" time="0.77" tests="2">
    <testcase classname="DepositCryptoCurrencyDetails should show correct message for BTC" name="DepositCryptoCurrencyDetails should show correct message for BTC" time="0.013">
    </testcase>
    <testcase classname="DepositCryptoCurrencyDetails should show correct message for ETH" name="DepositCryptoCurrencyDetails should show correct message for ETH" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="CashierOnboardingFiatCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:24" time="0.79" tests="1">
    <testcase classname="CashierOnboardingFiatCard should call the onClick callback when clicked" name="CashierOnboardingFiatCard should call the onClick callback when clicked" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="DepositCryptoSideNotes" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:24" time="0.778" tests="2">
    <testcase classname="DepositCryptoSideNotes should show correct side note for UST" name="DepositCryptoSideNotes should show correct side note for UST" time="0.027">
    </testcase>
    <testcase classname="DepositCryptoSideNotes should show correct side note for eUSDT" name="DepositCryptoSideNotes should show correct side note for eUSDT" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="DepositCryptoDisclaimers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:24" time="0.765" tests="6">
    <testcase classname="DepositCryptoDisclaimers should show correct message for BTC" name="DepositCryptoDisclaimers should show correct message for BTC" time="0.021">
    </testcase>
    <testcase classname="DepositCryptoDisclaimers should show correct message for ETH" name="DepositCryptoDisclaimers should show correct message for ETH" time="0.005">
    </testcase>
    <testcase classname="DepositCryptoDisclaimers should show correct message for LTC" name="DepositCryptoDisclaimers should show correct message for LTC" time="0.006">
    </testcase>
    <testcase classname="DepositCryptoDisclaimers should show correct message for USDC" name="DepositCryptoDisclaimers should show correct message for USDC" time="0.01">
    </testcase>
    <testcase classname="DepositCryptoDisclaimers should show correct message for UST" name="DepositCryptoDisclaimers should show correct message for UST" time="0.004">
    </testcase>
    <testcase classname="DepositCryptoDisclaimers should show correct message for eUSDT" name="DepositCryptoDisclaimers should show correct message for eUSDT" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DepositFiatIframe /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:24" time="0.774" tests="2">
    <testcase classname="&lt;DepositFiatIframe /&gt; should render the loader when waiting for the response from the cashier API" name="&lt;DepositFiatIframe /&gt; should render the loader when waiting for the response from the cashier API" time="0.018">
    </testcase>
    <testcase classname="&lt;DepositFiatIframe /&gt; should render the iframe once the url is received from API" name="&lt;DepositFiatIframe /&gt; should render the iframe once the url is received from API" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="CashierOnboardingPaymentAgentCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:24" time="0.677" tests="1">
    <testcase classname="CashierOnboardingPaymentAgentCard should call the onClick callback when clicked" name="CashierOnboardingPaymentAgentCard should call the onClick callback when clicked" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="CashierOnboardingAccountIdentifierMessage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:24" time="0.711" tests="2">
    <testcase classname="CashierOnboardingAccountIdentifierMessage should show fiat currency in identfier message for active fiat account" name="CashierOnboardingAccountIdentifierMessage should show fiat currency in identfier message for active fiat account" time="0.019">
    </testcase>
    <testcase classname="CashierOnboardingAccountIdentifierMessage should show crypto currency in identfier message for active crypto account" name="CashierOnboardingAccountIdentifierMessage should show crypto currency in identfier message for active crypto account" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="CashierOnboardingCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:24" time="0.753" tests="1">
    <testcase classname="CashierOnboardingCard should call the onClick callback when clicked" name="CashierOnboardingCard should call the onClick callback when clicked" time="0.038">
    </testcase>
  </testsuite>
  <testsuite name="CashierOnboardingSideNotes" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:24" time="0.859" tests="2">
    <testcase classname="CashierOnboardingSideNotes should render CashierOnboardingSideNoteFiat on mobile if is_crypto is false" name="CashierOnboardingSideNotes should render CashierOnboardingSideNoteFiat on mobile if is_crypto is false" time="0.019">
    </testcase>
    <testcase classname="CashierOnboardingSideNotes should render CashierOnboardingSideNoteCrypto on mobile on mobile if is_crypto is true" name="CashierOnboardingSideNotes should render CashierOnboardingSideNoteCrypto on mobile on mobile if is_crypto is true" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="CashierOnboardingIconMarquee" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:25" time="0.619" tests="1">
    <testcase classname="CashierOnboardingIconMarquee should render cashier onboarding icon marquee" name="CashierOnboardingIconMarquee should render cashier onboarding icon marquee" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="CashierOnboardingOnrampCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:25" time="0.717" tests="1">
    <testcase classname="CashierOnboardingOnrampCard should call the onClick callback when clicked" name="CashierOnboardingOnrampCard should call the onClick callback when clicked" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="RouteWithSubRoutes component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:25" time="0.386" tests="2">
    <testcase classname="RouteWithSubRoutes component should render the &quot;RouteWithSubRoutes&quot; component" name="RouteWithSubRoutes component should render the &quot;RouteWithSubRoutes&quot; component" time="0.008">
    </testcase>
    <testcase classname="RouteWithSubRoutes component should render properties" name="RouteWithSubRoutes component should render properties" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="CashierOnboardingCryptoCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:25" time="0.825" tests="1">
    <testcase classname="CashierOnboardingCryptoCard should call the onClick callback when clicked" name="CashierOnboardingCryptoCard should call the onClick callback when clicked" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="CashierOnboardingP2PCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:25" time="0.704" tests="4">
    <testcase classname="CashierOnboardingP2PCard should call the onClick callback when clicked" name="CashierOnboardingP2PCard should call the onClick callback when clicked" time="0.018">
    </testcase>
    <testcase classname="CashierOnboardingP2PCard should open real account signup when card is clicked" name="CashierOnboardingP2PCard should open real account signup when card is clicked" time="0.005">
    </testcase>
    <testcase classname="CashierOnboardingP2PCard should call onClick callback when current currency is not crypto" name="CashierOnboardingP2PCard should call onClick callback when current currency is not crypto" time="0.009">
    </testcase>
    <testcase classname="CashierOnboardingP2PCard should render blank element" name="CashierOnboardingP2PCard should render blank element" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="TransactionsCryptoTransactionStatusSideNote" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:25" time="0.684" tests="1">
    <testcase classname="TransactionsCryptoTransactionStatusSideNote should show no recent transactions when user doesn&apos;t have any transactions" name="TransactionsCryptoTransactionStatusSideNote should show no recent transactions when user doesn&apos;t have any transactions" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Routes /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:25" time="0.638" tests="2">
    <testcase classname="&lt;Routes /&gt; should show error messages when &quot;has_error = true&quot;" name="&lt;Routes /&gt; should show error messages when &quot;has_error = true&quot;" time="0.013">
    </testcase>
    <testcase classname="&lt;Routes /&gt; should render &lt;BinaryRoutes /&gt; component when &quot;has_error = false&quot;" name="&lt;Routes /&gt; should render &lt;BinaryRoutes /&gt; component when &quot;has_error = false&quot;" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ErrorComponent/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:26" time="0.554" tests="8">
    <testcase classname="&lt;ErrorComponent/&gt; should show the actual error message when header and message is passed" name="&lt;ErrorComponent/&gt; should show the actual error message when header and message is passed" time="0.025">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should show refresh message when should_show_refresh is true" name="&lt;ErrorComponent/&gt; should show refresh message when should_show_refresh is true" time="0.005">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; do not show refresh message when should_show_refresh is false" name="&lt;ErrorComponent/&gt; do not show refresh message when should_show_refresh is false" time="0.002">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should show actual message when header message is passed" name="&lt;ErrorComponent/&gt; should show actual message when header message is passed" time="0.006">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should refresh the page when redirectOnClick is not passed" name="&lt;ErrorComponent/&gt; should refresh the page when redirectOnClick is not passed" time="0.003">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should refresh the page when redirectOnClick is not passed or empty" name="&lt;ErrorComponent/&gt; should refresh the page when redirectOnClick is not passed or empty" time="0.003">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should show the redirect button label as refresh when there is no redirect_label" name="&lt;ErrorComponent/&gt; should show the redirect button label as refresh when there is no redirect_label" time="0.002">
    </testcase>
    <testcase classname="&lt;ErrorComponent/&gt; should trigger the history.listen and call the setError function when redirect button get clicked" name="&lt;ErrorComponent/&gt; should trigger the history.listen and call the setError function when redirect button get clicked" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="SwitchToFiatAccountDialog" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:26" time="0.79" tests="1">
    <testcase classname="SwitchToFiatAccountDialog should call the onSwitchDone callback when clicked on confirm button" name="SwitchToFiatAccountDialog should call the onSwitchDone callback when clicked on confirm button" time="0.073">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Error /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:26" time="0.728" tests="6">
    <testcase classname="&lt;Error /&gt; should show the &quot;Email verification failed&quot; message, and &quot;Resend email&quot; button" name="&lt;Error /&gt; should show the &quot;Email verification failed&quot; message, and &quot;Resend email&quot; button" time="0.028">
    </testcase>
    <testcase classname="&lt;Error /&gt; should show the &quot;Update your personal details&quot; message, and &quot;Update my details&quot; button" name="&lt;Error /&gt; should show the &quot;Update your personal details&quot; message, and &quot;Update my details&quot; button" time="0.011">
    </testcase>
    <testcase classname="&lt;Error /&gt; should show the &quot;Oops, you have an error!&quot; message, and &quot;Try again&quot; button" name="&lt;Error /&gt; should show the &quot;Oops, you have an error!&quot; message, and &quot;Try again&quot; button" time="0.003">
    </testcase>
    <testcase classname="&lt;Error /&gt; should show the &quot;Oops, you have an error with withdrawal!&quot; message" name="&lt;Error /&gt; should show the &quot;Oops, you have an error with withdrawal!&quot; message" time="0.002">
    </testcase>
    <testcase classname="&lt;Error /&gt; should show the &quot;Default error&quot; message" name="&lt;Error /&gt; should show the &quot;Default error&quot; message" time="0.002">
    </testcase>
    <testcase classname="&lt;Error /&gt; should clear an error.message if one of the buttons [&quot;Resend email&quot;, &quot;Update my details&quot;, &quot;Try again&quot;] was clicked" name="&lt;Error /&gt; should clear an error.message if one of the buttons [&quot;Resend email&quot;, &quot;Update my details&quot;, &quot;Try again&quot;] was clicked" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CryptoFiatConverter /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:26" time="0.955" tests="3">
    <testcase classname="&lt;CryptoFiatConverter /&gt; should show the proper hints and labels" name="&lt;CryptoFiatConverter /&gt; should show the proper hints and labels" time="0.036">
    </testcase>
    <testcase classname="&lt;CryptoFiatConverter /&gt; &quot;converter_from_amount&quot; and &quot;converter_to_amount&quot; inputs should show the proper values" name="&lt;CryptoFiatConverter /&gt; &quot;converter_from_amount&quot; and &quot;converter_to_amount&quot; inputs should show the proper values" time="0.034">
    </testcase>
    <testcase classname="&lt;CryptoFiatConverter /&gt; should trigger onChange callback when the input field changes" name="&lt;CryptoFiatConverter /&gt; should trigger onChange callback when the input field changes" time="0.186">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CashierBreadcrumb /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:26" time="0.775" tests="2">
    <testcase classname="&lt;CashierBreadcrumb /&gt; should render proper crumbs for crypto deposit page" name="&lt;CashierBreadcrumb /&gt; should render proper crumbs for crypto deposit page" time="0.023">
    </testcase>
    <testcase classname="&lt;CashierBreadcrumb /&gt; should render proper crumbs for fiat deposit page" name="&lt;CashierBreadcrumb /&gt; should render proper crumbs for fiat deposit page" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;NoBalance /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:26" time="0.986" tests="2">
    <testcase classname="&lt;NoBalance /&gt; component should render" name="&lt;NoBalance /&gt; component should render" time="0.049">
    </testcase>
    <testcase classname="&lt;NoBalance /&gt; component should redirect to deposit page when button is clicked" name="&lt;NoBalance /&gt; component should redirect to deposit page when button is clicked" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CashierSearchBox /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:27" time="0.683" tests="4">
    <testcase classname="&lt;CashierSearchBox /&gt; should have close icon if there is a text in input field" name="&lt;CashierSearchBox /&gt; should have close icon if there is a text in input field" time="0.019">
    </testcase>
    <testcase classname="&lt;CashierSearchBox /&gt; should trigger onClear callback when the user clicks on close icon" name="&lt;CashierSearchBox /&gt; should trigger onClear callback when the user clicks on close icon" time="0.009">
    </testcase>
    <testcase classname="&lt;CashierSearchBox /&gt; should not trigger setTimeout callback (formSubmit) when the user presses backspace button on empty search input" name="&lt;CashierSearchBox /&gt; should not trigger setTimeout callback (formSubmit) when the user presses backspace button on empty search input" time="0.007">
    </testcase>
    <testcase classname="&lt;CashierSearchBox /&gt; should trigger setIsSearchLoading, onSearch and setTimeout callbacks when the user enters the search term" name="&lt;CashierSearchBox /&gt; should trigger setIsSearchLoading, onSearch and setTimeout callbacks when the user enters the search term" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="EmailVerificationEmptyState" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:27" time="0.767" tests="1">
    <testcase classname="EmailVerificationEmptyState should disable resend button after sending the request" name="EmailVerificationEmptyState should disable resend button after sending the request" time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="FundsProtection component tests" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:27" time="0.568" tests="1">
    <testcase classname="FundsProtection component tests should render the component" name="FundsProtection component tests should render the component" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="PageContainer" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:27" time="0.608" tests="2">
    <testcase classname="PageContainer should show loading if is_authorize is false" name="PageContainer should show loading if is_authorize is false" time="0.011">
    </testcase>
    <testcase classname="PageContainer should show children if is_authorize is true" name="PageContainer should show children if is_authorize is true" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PercentageSelector /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:27" time="0.672" tests="4">
    <testcase classname="&lt;PercentageSelector /&gt; should render the component" name="&lt;PercentageSelector /&gt; should render the component" time="0.018">
    </testcase>
    <testcase classname="&lt;PercentageSelector /&gt; should calculate the percentage amount on click of percentage block" name="&lt;PercentageSelector /&gt; should calculate the percentage amount on click of percentage block" time="0.015">
    </testcase>
    <testcase classname="&lt;PercentageSelector /&gt; should reset the percentage block upon clicking twice" name="&lt;PercentageSelector /&gt; should reset the percentage block upon clicking twice" time="0.016">
    </testcase>
    <testcase classname="&lt;PercentageSelector /&gt; should reset the percentage" name="&lt;PercentageSelector /&gt; should reset the percentage" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Page404 /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:27" time="0.434" tests="1">
    <testcase classname="&lt;Page404 /&gt; should show the proper error message" name="&lt;Page404 /&gt; should show the proper error message" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CashierLocked /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:27" time="0.823" tests="31">
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if there is a crypto cashier maintenance" name="&lt;CashierLocked /&gt; should show the proper message if there is a crypto cashier maintenance" time="0.019">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if crypto withdrawal is suspended" name="&lt;CashierLocked /&gt; should show the proper message if crypto withdrawal is suspended" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if crypto deposit is suspended" name="&lt;CashierLocked /&gt; should show the proper message if crypto deposit is suspended" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if there is a cashier maintenance" name="&lt;CashierLocked /&gt; should show the proper message if there is a cashier maintenance" time="0.005">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client does not provide residence" name="&lt;CashierLocked /&gt; should show the proper message if the client does not provide residence" time="0.009">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the documents are expired" name="&lt;CashierLocked /&gt; should show the proper message if the documents are expired" time="0.003">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has cashier_locked_status" name="&lt;CashierLocked /&gt; should show the proper message if the client has cashier_locked_status" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has disabled_status" name="&lt;CashierLocked /&gt; should show the proper message if the client has disabled_status" time="0.003">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client account has no currency" name="&lt;CashierLocked /&gt; should show the proper message if the client account has no currency" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client is not fully authenticated" name="&lt;CashierLocked /&gt; should show the proper message if the client is not fully authenticated" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if eu client is not fully authenticated and landed in deposit page" name="&lt;CashierLocked /&gt; should show the proper message if eu client is not fully authenticated and landed in deposit page" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if eu client is not fully authenticated and landed in withdrawal page" name="&lt;CashierLocked /&gt; should show the proper message if eu client is not fully authenticated and landed in withdrawal page" time="0.009">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if eu client is not fully authenticated and landed in transfers page" name="&lt;CashierLocked /&gt; should show the proper message if eu client is not fully authenticated and landed in transfers page" time="0.003">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should redirect eu client that is not fully authenticated to POI page when `Verify now` button is clicked" name="&lt;CashierLocked /&gt; should redirect eu client that is not fully authenticated to POI page when `Verify now` button is clicked" time="0.03">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if eu client`s verification is pending and landed in deposit page" name="&lt;CashierLocked /&gt; should show the proper message if eu client`s verification is pending and landed in deposit page" time="0.003">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if eu client`s verification is pending and landed in withdrawal page" name="&lt;CashierLocked /&gt; should show the proper message if eu client`s verification is pending and landed in withdrawal page" time="0.003">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if eu client`s verification is pending and landed in transfer page" name="&lt;CashierLocked /&gt; should show the proper message if eu client`s verification is pending and landed in transfer page" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has ask_financial_risk_approval status" name="&lt;CashierLocked /&gt; should show the proper message if the client has ask_financial_risk_approval status" time="0.003">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client is high risk and has no FA" name="&lt;CashierLocked /&gt; should show the proper message if the client is high risk and has no FA" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has ask_tin_information" name="&lt;CashierLocked /&gt; should show the proper message if the client has ask_tin_information" time="0.003">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has ask_uk_funds_protection" name="&lt;CashierLocked /&gt; should show the proper message if the client has ask_uk_funds_protection" time="0.011">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client does not set 30-day turnover limit" name="&lt;CashierLocked /&gt; should show the proper message if the client does not set 30-day turnover limit" time="0.003">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has missing required profile fields" name="&lt;CashierLocked /&gt; should show the proper message if the client has missing required profile fields" time="0.005">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has self-exluded from the website" name="&lt;CashierLocked /&gt; should show the proper message if the client has self-exluded from the website" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has unwelcome_status" name="&lt;CashierLocked /&gt; should show the proper message if the client has unwelcome_status" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has no_withdrawal_or_trading_status" name="&lt;CashierLocked /&gt; should show the proper message if the client has no_withdrawal_or_trading_status" time="0.004">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has withdrawal_locked_status" name="&lt;CashierLocked /&gt; should show the proper message if the client has withdrawal_locked_status" time="0.01">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has only_pa_withdrawals_allowed_status" name="&lt;CashierLocked /&gt; should show the proper message if the client has only_pa_withdrawals_allowed_status" time="0.002">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should prioritize cashier locked message if the client has a combo of deposit and cashier locked reasons" name="&lt;CashierLocked /&gt; should prioritize cashier locked message if the client has a combo of deposit and cashier locked reasons" time="0.002">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show cashier locked message if the client has a combo of deposit and withdrawal locked reasons" name="&lt;CashierLocked /&gt; should show cashier locked message if the client has a combo of deposit and withdrawal locked reasons" time="0.003">
    </testcase>
    <testcase classname="&lt;CashierLocked /&gt; should show the proper message if the client has PACommisionWithdrawalLimit" name="&lt;CashierLocked /&gt; should show the proper message if the client has PACommisionWithdrawalLimit" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TransactionsCryptoCancelModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:27" time="0.722" tests="3">
    <testcase classname="&lt;TransactionsCryptoCancelModal /&gt; should show &quot;Are you sure you want to cancel this transaction&quot; and &quot;Cancel transaction&quot; messages, &quot;Yes&quot; and &quot;No&quot; buttons" name="&lt;TransactionsCryptoCancelModal /&gt; should show &quot;Are you sure you want to cancel this transaction&quot; and &quot;Cancel transaction&quot; messages, &quot;Yes&quot; and &quot;No&quot; buttons" time="0.024">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoCancelModal /&gt; should trigger onClick callback when the user clicks &quot;Yes&quot; button" name="&lt;TransactionsCryptoCancelModal /&gt; should trigger onClick callback when the user clicks &quot;Yes&quot; button" time="0.013">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoCancelModal /&gt; should trigger onClick callback when the user clicks &quot;No&quot; button" name="&lt;TransactionsCryptoCancelModal /&gt; should trigger onClick callback when the user clicks &quot;No&quot; button" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TransactionsCryptoRenderer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:28" time="0.767" tests="9">
    <testcase classname="&lt;TransactionsCryptoRenderer /&gt; should show the proper data in Desktop mode" name="&lt;TransactionsCryptoRenderer /&gt; should show the proper data in Desktop mode" time="0.044">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoRenderer /&gt; should show the popover with the proper message, &quot;Yes&quot; and &quot;No&quot; buttons if the &quot;Cancel transaction&quot; cross-button was clicked in Desktop mode" name="&lt;TransactionsCryptoRenderer /&gt; should show the popover with the proper message, &quot;Yes&quot; and &quot;No&quot; buttons if the &quot;Cancel transaction&quot; cross-button was clicked in Desktop mode" time="0.019">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoRenderer /&gt; should close the popover when &quot;No&quot; button is clicked in Desktop mode" name="&lt;TransactionsCryptoRenderer /&gt; should close the popover when &quot;No&quot; button is clicked in Desktop mode" time="0.024">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoRenderer /&gt; should close the popover when &quot;Yes&quot; button is clicked in Desktop mode" name="&lt;TransactionsCryptoRenderer /&gt; should close the popover when &quot;Yes&quot; button is clicked in Desktop mode" time="0.022">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoRenderer /&gt; should trigger onClick callback when &quot;transactions-crypto-history__table-status&quot; is clicked in Mobile mode" name="&lt;TransactionsCryptoRenderer /&gt; should trigger onClick callback when &quot;transactions-crypto-history__table-status&quot; is clicked in Mobile mode" time="0.008">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoRenderer /&gt; should show the proper data in Mobile mode" name="&lt;TransactionsCryptoRenderer /&gt; should show the proper data in Mobile mode" time="0.018">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoRenderer /&gt; should trigger onClick callback when the user clicks &quot;Cancel transaction&quot; button in Mobile mode" name="&lt;TransactionsCryptoRenderer /&gt; should trigger onClick callback when the user clicks &quot;Cancel transaction&quot; button in Mobile mode" time="0.006">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoRenderer /&gt; should display popover when hovering on tooltip for third-party transactions (CoinsPaid)" name="&lt;TransactionsCryptoRenderer /&gt; should display popover when hovering on tooltip for third-party transactions (CoinsPaid)" time="0.033">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoRenderer /&gt; should check whether the tooltip is clickable for third-party transactions (CoinsPaid)" name="&lt;TransactionsCryptoRenderer /&gt; should check whether the tooltip is clickable for third-party transactions (CoinsPaid)" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TransactionsCryptoHistory /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:28" time="0.665" tests="4">
    <testcase classname="&lt;TransactionsCryptoHistory /&gt; should show &quot;USD recent transactions&quot; and &quot;No current transactions available&quot; messages" name="&lt;TransactionsCryptoHistory /&gt; should show &quot;USD recent transactions&quot; and &quot;No current transactions available&quot; messages" time="0.023">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoHistory /&gt; should trigger onClick callback when the back arrow is clicked" name="&lt;TransactionsCryptoHistory /&gt; should trigger onClick callback when the back arrow is clicked" time="0.009">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoHistory /&gt; should show the loader when isLoading is equal &quot;true&quot;" name="&lt;TransactionsCryptoHistory /&gt; should show the loader when isLoading is equal &quot;true&quot;" time="0.01">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoHistory /&gt; should show table headers: &quot;Transaction&quot;, &quot;Amount&quot;, &quot;Address&quot;, &quot;Transaction hash&quot;, &quot;Time&quot;, &quot;Status&quot;, &quot;Action&quot;" name="&lt;TransactionsCryptoHistory /&gt; should show table headers: &quot;Transaction&quot;, &quot;Amount&quot;, &quot;Address&quot;, &quot;Transaction hash&quot;, &quot;Time&quot;, &quot;Status&quot;, &quot;Action&quot;" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TransactionsCryptoStatusModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:28" time="0.593" tests="2">
    <testcase classname="&lt;TransactionsCryptoStatusModal /&gt; should show proper messages and &quot;OK&quot; button" name="&lt;TransactionsCryptoStatusModal /&gt; should show proper messages and &quot;OK&quot; button" time="0.026">
    </testcase>
    <testcase classname="&lt;TransactionsCryptoStatusModal /&gt; should trigger onClick callback when the user clicks &quot;OK&quot; button" name="&lt;TransactionsCryptoStatusModal /&gt; should trigger onClick callback when the user clicks &quot;OK&quot; button" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ErrorDialog /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:28" time="0.645" tests="6">
    <testcase classname="&lt;ErrorDialog /&gt; should show &quot;Please verify your identity&quot; message, &quot;Cancel&quot; and &quot;Verify identity&quot; buttons" name="&lt;ErrorDialog /&gt; should show &quot;Please verify your identity&quot; message, &quot;Cancel&quot; and &quot;Verify identity&quot; buttons" time="0.023">
    </testcase>
    <testcase classname="&lt;ErrorDialog /&gt; should redirect to &quot;/account/proof-of-identity&quot; page, when &quot;Verify identity&quot; button was clicked" name="&lt;ErrorDialog /&gt; should redirect to &quot;/account/proof-of-identity&quot; page, when &quot;Verify identity&quot; button was clicked" time="0.009">
    </testcase>
    <testcase classname="&lt;ErrorDialog /&gt; should show &quot;Cashier Error&quot; message and &quot;OK&quot; button" name="&lt;ErrorDialog /&gt; should show &quot;Cashier Error&quot; message and &quot;OK&quot; button" time="0.004">
    </testcase>
    <testcase classname="&lt;ErrorDialog /&gt; should not show &quot;Cashier Error&quot; message, when &quot;OK&quot; button was clicked" name="&lt;ErrorDialog /&gt; should not show &quot;Cashier Error&quot; message, when &quot;OK&quot; button was clicked" time="0.006">
    </testcase>
    <testcase classname="&lt;ErrorDialog /&gt; should not show &quot;Please verify your identity&quot; message, when &quot;Cancel&quot; button was clicked" name="&lt;ErrorDialog /&gt; should not show &quot;Please verify your identity&quot; message, when &quot;Cancel&quot; button was clicked" time="0.012">
    </testcase>
    <testcase classname="&lt;ErrorDialog /&gt; should clear an error.message if one of the buttons [&quot;Verify identity&quot;, &quot;Cancel&quot;, &quot;OK&quot;] was clicked" name="&lt;ErrorDialog /&gt; should clear an error.message if one of the buttons [&quot;Verify identity&quot;, &quot;Cancel&quot;, &quot;OK&quot;] was clicked" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TransferConfirm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:28" time="0.731" tests="6">
    <testcase classname="&lt;TransferConfirm /&gt; should show proper icon, messages and buttons" name="&lt;TransferConfirm /&gt; should show proper icon, messages and buttons" time="0.064">
    </testcase>
    <testcase classname="&lt;TransferConfirm /&gt; should show error messages and button" name="&lt;TransferConfirm /&gt; should show error messages and button" time="0.025">
    </testcase>
    <testcase classname="&lt;TransferConfirm /&gt; should trigger onClickBack method when the client clicks on Back button" name="&lt;TransferConfirm /&gt; should trigger onClickBack method when the client clicks on Back button" time="0.013">
    </testcase>
    <testcase classname="&lt;TransferConfirm /&gt; should enable Transfer now button when checkbox is checked" name="&lt;TransferConfirm /&gt; should enable Transfer now button when checkbox is checked" time="0.024">
    </testcase>
    <testcase classname="&lt;TransferConfirm /&gt; should show proer checkbox label text when is_payment_agent_withdraw property is equal to true/false" name="&lt;TransferConfirm /&gt; should show proer checkbox label text when is_payment_agent_withdraw property is equal to true/false" time="0.01">
    </testcase>
    <testcase classname="&lt;TransferConfirm /&gt; should trigger onClickConfirm method when the client clicks on Transfer now button" name="&lt;TransferConfirm /&gt; should trigger onClickConfirm method when the client clicks on Transfer now button" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ReadMoreWrapper /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:28" time="0.501" tests="1">
    <testcase classname="&lt;ReadMoreWrapper /&gt; should render ReadMoreWrapper component and open dialog on click" name="&lt;ReadMoreWrapper /&gt; should render ReadMoreWrapper component and open dialog on click" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Real /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:28" time="0.577" tests="3">
    <testcase classname="&lt;Real /&gt; should show loader when is_loading is true or iframe_height is equal to 0" name="&lt;Real /&gt; should show loader when is_loading is true or iframe_height is equal to 0" time="0.016">
    </testcase>
    <testcase classname="&lt;Real /&gt; should render an iframe if iframe_url is not an empty string" name="&lt;Real /&gt; should render an iframe if iframe_url is not an empty string" time="0.005">
    </testcase>
    <testcase classname="&lt;Real /&gt; should trigger setIsDeposit callback when the user clicks on Cashier breadcrumb" name="&lt;Real /&gt; should trigger setIsDeposit callback when the user clicks on Cashier breadcrumb" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Virtual /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:28" time="0.631" tests="4">
    <testcase classname="&lt;Virtual /&gt; component should render" name="&lt;Virtual /&gt; component should render" time="0.034">
    </testcase>
    <testcase classname="&lt;Virtual /&gt; icon styling should be dark when &apos;is_dark_mode_on&apos; prop is true" name="&lt;Virtual /&gt; icon styling should be dark when &apos;is_dark_mode_on&apos; prop is true" time="0.013">
    </testcase>
    <testcase classname="&lt;Virtual /&gt; icon styling should be light when &apos;is_dark_mode_on&apos; prop is false" name="&lt;Virtual /&gt; icon styling should be light when &apos;is_dark_mode_on&apos; prop is false" time="0.012">
    </testcase>
    <testcase classname="&lt;Virtual /&gt; toggleAccountsDialog func should be triggered on click on text element &apos;Account Switcher.&apos;" name="&lt;Virtual /&gt; toggleAccountsDialog func should be triggered on click on text element &apos;Account Switcher.&apos;" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="PaymentAgentTransferStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:29" time="0.489" tests="15">
    <testcase classname="PaymentAgentTransferStore should clear an error and set correct is_try_transfer_successful value" name="PaymentAgentTransferStore should clear an error and set correct is_try_transfer_successful value" time="0.007">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should set correct is_transfer_successful value" name="PaymentAgentTransferStore should set correct is_transfer_successful value" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should set correct confirmation transfer value" name="PaymentAgentTransferStore should set correct confirmation transfer value" time="0.003">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should set correct receipt value" name="PaymentAgentTransferStore should set correct receipt value" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should set correct transfer_limit value" name="PaymentAgentTransferStore should set correct transfer_limit value" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should reset payment agent transfer" name="PaymentAgentTransferStore should reset payment agent transfer" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should get current payment agent from response_payment_agent" name="PaymentAgentTransferStore should get current payment agent from response_payment_agent" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should get current payment agent from cashier.payment_agent.getPaymentAgentDetails()" name="PaymentAgentTransferStore should get current payment agent from cashier.payment_agent.getPaymentAgentDetails()" time="0.005">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should return an empty object if there are no payment agents" name="PaymentAgentTransferStore should return an empty object if there are no payment agents" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should mount payment agent transfer" name="PaymentAgentTransferStore should mount payment agent transfer" time="0.003">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should set transfer_limits on mounting if there is no transfer_limit.min_withdrawal value" name="PaymentAgentTransferStore should set transfer_limits on mounting if there is no transfer_limit.min_withdrawal value" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should set correct confirmation transfer value if there is no any errors in response (dry_run = 1)" name="PaymentAgentTransferStore should set correct confirmation transfer value if there is no any errors in response (dry_run = 1)" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should trigger setErrorMessage callback if there is an error in response (paymentagent_transfer = 0), requestTryPaymentAgentTransfer" name="PaymentAgentTransferStore should trigger setErrorMessage callback if there is an error in response (paymentagent_transfer = 0), requestTryPaymentAgentTransfer" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should set correct confirmation transfer value if there is no any errors in response (dry_run = 0)" name="PaymentAgentTransferStore should set correct confirmation transfer value if there is no any errors in response (dry_run = 0)" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentTransferStore should trigger setErrorMessage callback if there is an error in response (paymentagent_transfer = 0), requestPaymentAgentTransfer" name="PaymentAgentTransferStore should trigger setErrorMessage callback if there is an error in response (paymentagent_transfer = 0), requestPaymentAgentTransfer" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="IframeStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:29" time="0.478" tests="10">
    <testcase classname="IframeStore should set session_timeout and invoke removeOnIframeLoaded function" name="IframeStore should set session_timeout and invoke removeOnIframeLoaded function" time="0.005">
    </testcase>
    <testcase classname="IframeStore should remove onIframeLoaded function" name="IframeStore should remove onIframeLoaded function" time="0.01">
    </testcase>
    <testcase classname="IframeStore should clear timeout cashier url" name="IframeStore should clear timeout cashier url" time="0.002">
    </testcase>
    <testcase classname="IframeStore should set timeout cashier url" name="IframeStore should set timeout cashier url" time="0.002">
    </testcase>
    <testcase classname="IframeStore should set container height" name="IframeStore should set container height" time="0.001">
    </testcase>
    <testcase classname="IframeStore should clear iframe" name="IframeStore should clear iframe" time="0.003">
    </testcase>
    <testcase classname="IframeStore should set the proper iframe url" name="IframeStore should set the proper iframe url" time="0.001">
    </testcase>
    <testcase classname="IframeStore iframe_url should be an empty string if there is no url" name="IframeStore iframe_url should be an empty string if there is no url" time="0.001">
    </testcase>
    <testcase classname="IframeStore should add event listener with proper arguments" name="IframeStore should add event listener with proper arguments" time="0.006">
    </testcase>
    <testcase classname="IframeStore should set proper iframe_height for desktop and mobile view" name="IframeStore should set proper iframe_height for desktop and mobile view" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SideNote /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:29" time="0.56" tests="2">
    <testcase classname="&lt;SideNote /&gt; should show proper title and messages" name="&lt;SideNote /&gt; should show proper title and messages" time="0.01">
    </testcase>
    <testcase classname="&lt;SideNote /&gt; should show side note bullet dots when &quot;has_bullets=true&quot;" name="&lt;SideNote /&gt; should show side note bullet dots when &quot;has_bullets=true&quot;" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="SideNotePaymentMethodsLearnMore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:29" time="0.703" tests="1">
    <testcase classname="SideNotePaymentMethodsLearnMore should render learn more about payment methods side note" name="SideNotePaymentMethodsLearnMore should render learn more about payment methods side note" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="TransactionHistoryStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:29" time="0.58" tests="12">
    <testcase classname="TransactionHistoryStore should cancel a crypto transaction" name="TransactionHistoryStore should cancel a crypto transaction" time="0.003">
    </testcase>
    <testcase classname="TransactionHistoryStore should not proceed with the cancellation of a crypto transaction if there is an error" name="TransactionHistoryStore should not proceed with the cancellation of a crypto transaction if there is an error" time="0.002">
    </testcase>
    <testcase classname="TransactionHistoryStore should set selected crypto transaction id" name="TransactionHistoryStore should set selected crypto transaction id" time="0">
    </testcase>
    <testcase classname="TransactionHistoryStore should set crypto transactions cancel modal visibility" name="TransactionHistoryStore should set crypto transactions cancel modal visibility" time="0.001">
    </testcase>
    <testcase classname="TransactionHistoryStore should show crypto transactions cancel modal" name="TransactionHistoryStore should show crypto transactions cancel modal" time="0.001">
    </testcase>
    <testcase classname="TransactionHistoryStore should hide crypto transactions cancel modal" name="TransactionHistoryStore should hide crypto transactions cancel modal" time="0">
    </testcase>
    <testcase classname="TransactionHistoryStore should set selected crypto transaction status" name="TransactionHistoryStore should set selected crypto transaction status" time="0">
    </testcase>
    <testcase classname="TransactionHistoryStore should set selected crypto transaction description" name="TransactionHistoryStore should set selected crypto transaction description" time="0">
    </testcase>
    <testcase classname="TransactionHistoryStore should set crypto transactions status modal visibility" name="TransactionHistoryStore should set crypto transactions status modal visibility" time="0.001">
    </testcase>
    <testcase classname="TransactionHistoryStore should show crypto transactions status modal" name="TransactionHistoryStore should show crypto transactions status modal" time="0.001">
    </testcase>
    <testcase classname="TransactionHistoryStore should hide crypto transactions status modal" name="TransactionHistoryStore should hide crypto transactions status modal" time="0.003">
    </testcase>
    <testcase classname="TransactionHistoryStore should set crypto transactions visibility" name="TransactionHistoryStore should set crypto transactions visibility" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ErrorStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:30" time="0.381" tests="6">
    <testcase classname="ErrorStore should change value of the variable message" name="ErrorStore should change value of the variable message" time="0.004">
    </testcase>
    <testcase classname="ErrorStore should change value of the variable is_ask_uk_funds_protection" name="ErrorStore should change value of the variable is_ask_uk_funds_protection" time="0.001">
    </testcase>
    <testcase classname="ErrorStore should change value of the variable is_self_exclusion_max_turnover_set" name="ErrorStore should change value of the variable is_self_exclusion_max_turnover_set" time="0.001">
    </testcase>
    <testcase classname="ErrorStore should change value of the variable is_ask_authentication" name="ErrorStore should change value of the variable is_ask_authentication" time="0.001">
    </testcase>
    <testcase classname="ErrorStore should change value of the variable is_ask_financial_risk_approval" name="ErrorStore should change value of the variable is_ask_financial_risk_approval" time="0">
    </testcase>
    <testcase classname="ErrorStore should proper handle different error codes" name="ErrorStore should proper handle different error codes" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="CryptoFiatConverterStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:29" time="0.532" tests="19">
    <testcase classname="CryptoFiatConverterStore should set converter_from_amount to the given amount" name="CryptoFiatConverterStore should set converter_from_amount to the given amount" time="0.005">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should set converter_to_amount to the given amount" name="CryptoFiatConverterStore should set converter_to_amount to the given amount" time="0.001">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should set error to converter_from_error" name="CryptoFiatConverterStore should set error to converter_from_error" time="0.001">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should set error to converter_to_error" name="CryptoFiatConverterStore should set error to converter_to_error" time="0.001">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should set is_timer_visible to a truthy value" name="CryptoFiatConverterStore should set is_timer_visible to a truthy value" time="0.002">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should set is_timer_visible to a false value" name="CryptoFiatConverterStore should set is_timer_visible to a false value" time="0.001">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should call function validateWithdrawFromAmount when account transfer container and general store container are different" name="CryptoFiatConverterStore should call function validateWithdrawFromAmount when account transfer container and general store container are different" time="0.001">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should call function validateTransferFromAmount when account transfer container and general store container are different" name="CryptoFiatConverterStore should call function validateTransferFromAmount when account transfer container and general store container are different" time="0">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should call function validateWithdrawToAmount when account transfer container and general store container are different" name="CryptoFiatConverterStore should call function validateWithdrawToAmount when account transfer container and general store container are different" time="0.002">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should call function validateTransferToAmount when account transfer container and general store container are different" name="CryptoFiatConverterStore should call function validateTransferToAmount when account transfer container and general store container are different" time="0.001">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should reset converter details when onChangeConverterFromAmount is called without passing target value" name="CryptoFiatConverterStore should reset converter details when onChangeConverterFromAmount is called without passing target value" time="0.008">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should set converter_from_amount with an amount when target value is passed" name="CryptoFiatConverterStore should set converter_from_amount with an amount when target value is passed" time="0.001">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should clear converter_to_amount, converter_to_error, is_timer_visible and setAccountTransferAmount when converter_from_error has error" name="CryptoFiatConverterStore should clear converter_to_amount, converter_to_error, is_timer_visible and setAccountTransferAmount when converter_from_error has error" time="0.002">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should set converter_to_amount with an amount when onChangeConverterFromAmount is called" name="CryptoFiatConverterStore should set converter_to_amount with an amount when onChangeConverterFromAmount is called" time="0.002">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should reset converter details when onChangeConverterToAmount is called without passing target value" name="CryptoFiatConverterStore should reset converter details when onChangeConverterToAmount is called without passing target value" time="0.007">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should set converter_to_amount with an amount when target value is passed" name="CryptoFiatConverterStore should set converter_to_amount with an amount when target value is passed" time="0.001">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should clear converter_from_amount, converter_from_error, is_timer_visible and setAccountTransferAmount when converter_to_error has error" name="CryptoFiatConverterStore should clear converter_from_amount, converter_from_error, is_timer_visible and setAccountTransferAmount when converter_to_error has error" time="0.001">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should set converter_from_amount with an amount when onChangeConverterToAmount is called" name="CryptoFiatConverterStore should set converter_from_amount with an amount when onChangeConverterToAmount is called" time="0.002">
    </testcase>
    <testcase classname="CryptoFiatConverterStore should set is_timer_visible to false when converter_from_error has error" name="CryptoFiatConverterStore should set is_timer_visible to false when converter_from_error has error" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GeneralStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:29" time="0.644" tests="20">
    <testcase classname="GeneralStore should set function on remount" name="GeneralStore should set function on remount" time="0.006">
    </testcase>
    <testcase classname="GeneralStore should return false if the client currency is equal to USD when is_crypto property was called" name="GeneralStore should return false if the client currency is equal to USD when is_crypto property was called" time="0.004">
    </testcase>
    <testcase classname="GeneralStore should return true if the client currency is equal to BTC when is_crypto property was called" name="GeneralStore should return true if the client currency is equal to BTC when is_crypto property was called" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should calculate proper percentage for account transfer container" name="GeneralStore should calculate proper percentage for account transfer container" time="0.002">
    </testcase>
    <testcase classname="GeneralStore should calculate proper percentage for other containers" name="GeneralStore should calculate proper percentage for other containers" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should set percentage equal to zero if calculated percentage is not finite number" name="GeneralStore should set percentage equal to zero if calculated percentage is not finite number" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should reset percentage" name="GeneralStore should reset percentage" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should change value of the variable is_deposit" name="GeneralStore should change value of the variable is_deposit" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should change value of the variable should_show_all_available_currencies" name="GeneralStore should change value of the variable should_show_all_available_currencies" time="0.002">
    </testcase>
    <testcase classname="GeneralStore should set deposit target" name="GeneralStore should set deposit target" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should trigger proper callbacks when setAccountSwitchListener was called" name="GeneralStore should trigger proper callbacks when setAccountSwitchListener was called" time="0.009">
    </testcase>
    <testcase classname="GeneralStore should not call setPaymentAgentList method if is_populating_values is equal to true when onMountCommon was called" name="GeneralStore should not call setPaymentAgentList method if is_populating_values is equal to true when onMountCommon was called" time="0.003">
    </testcase>
    <testcase classname="GeneralStore should sort accounts transfer when onMountCommon was called" name="GeneralStore should sort accounts transfer when onMountCommon was called" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should setOnRemount when onMountCommon was called with true argument" name="GeneralStore should setOnRemount when onMountCommon was called with true argument" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should route to deposit page of payment agent tab  when is_payment_agent_visible is false and location.pahname = /cashier/payment-agent when onMountCommon was called" name="GeneralStore should route to deposit page of payment agent tab  when is_payment_agent_visible is false and location.pahname = /cashier/payment-agent when onMountCommon was called" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should route to deposit page of onramp tab is not visible and location.pahname = /cashier/on-ramp when onMountCommon was called" name="GeneralStore should route to deposit page of onramp tab is not visible and location.pahname = /cashier/on-ramp when onMountCommon was called" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should route to deposit page and call proper methods if is_transactions_crypto_visible equal to false and location.pahname = /cashier/transactions-crypto when onMountCommon was called" name="GeneralStore should route to deposit page and call proper methods if is_transactions_crypto_visible equal to false and location.pahname = /cashier/transactions-crypto when onMountCommon was called" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should set cashier tab index" name="GeneralStore should set cashier tab index" time="0.009">
    </testcase>
    <testcase classname="GeneralStore should change the value of the variable is_loading" name="GeneralStore should change the value of the variable is_loading" time="0.001">
    </testcase>
    <testcase classname="GeneralStore should set active tab" name="GeneralStore should set active tab" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PaymentAgentStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:29" time="0.62" tests="30">
    <testcase classname="PaymentAgentStore should set active_tab_index" name="PaymentAgentStore should set active_tab_index" time="0.005">
    </testcase>
    <testcase classname="PaymentAgentStore should get is_payment_agent_visible" name="PaymentAgentStore should get is_payment_agent_visible" time="0.003">
    </testcase>
    <testcase classname="PaymentAgentStore should get payment agent details" name="PaymentAgentStore should get payment agent details" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentStore should add a supported bank" name="PaymentAgentStore should add a supported bank" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should clear the list of supported banks" name="PaymentAgentStore should clear the list of supported banks" time="0.006">
    </testcase>
    <testcase classname="PaymentAgentStore should sort the list of supported banks" name="PaymentAgentStore should sort the list of supported banks" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should add payment agent to list" name="PaymentAgentStore should add payment agent to list" time="0.003">
    </testcase>
    <testcase classname="PaymentAgentStore should clear the list of payment agents" name="PaymentAgentStore should clear the list of payment agents" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should set payment agent list" name="PaymentAgentStore should set payment agent list" time="0.013">
    </testcase>
    <testcase classname="PaymentAgentStore should filter payment agent list by selected bank" name="PaymentAgentStore should filter payment agent list by selected bank" time="0.008">
    </testcase>
    <testcase classname="PaymentAgentStore should filter payment agent list by search term" name="PaymentAgentStore should filter payment agent list by search term" time="0.003">
    </testcase>
    <testcase classname="PaymentAgentStore should set has_payment_agent_search_warning to true when there is no matches for the search term" name="PaymentAgentStore should set has_payment_agent_search_warning to true when there is no matches for the search term" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentStore should return empty filtered list of payment agent if there is no payment agent available when accessing from payment agent page" name="PaymentAgentStore should return empty filtered list of payment agent if there is no payment agent available when accessing from payment agent page" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should filter the payment agent list on change of payment method" name="PaymentAgentStore should filter the payment agent list on change of payment method" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentStore should set is_withdraw" name="PaymentAgentStore should set is_withdraw" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should set is_search_loading" name="PaymentAgentStore should set is_search_loading" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should set has_payment_agent_search_warning" name="PaymentAgentStore should set has_payment_agent_search_warning" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should set search_term" name="PaymentAgentStore should set search_term" time="0.006">
    </testcase>
    <testcase classname="PaymentAgentStore should set is_try_withdraw_successful" name="PaymentAgentStore should set is_try_withdraw_successful" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentStore should set is_withdraw_successful" name="PaymentAgentStore should set is_withdraw_successful" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentStore should set confirm value" name="PaymentAgentStore should set confirm value" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should set receipt value" name="PaymentAgentStore should set receipt value" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentStore should add payment agent" name="PaymentAgentStore should add payment agent" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should mount payment agent withdraw" name="PaymentAgentStore should mount payment agent withdraw" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentStore should redirect to deposit page if there is no available payment agent upon accessing PA withdrawal" name="PaymentAgentStore should redirect to deposit page if there is no available payment agent upon accessing PA withdrawal" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should request to try payment agent withdraw" name="PaymentAgentStore should request to try payment agent withdraw" time="0.011">
    </testcase>
    <testcase classname="PaymentAgentStore should handle error when requesting to try payment agent withdraw" name="PaymentAgentStore should handle error when requesting to try payment agent withdraw" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should mount payment agent list" name="PaymentAgentStore should mount payment agent list" time="0.001">
    </testcase>
    <testcase classname="PaymentAgentStore should request for payment agent withdraw" name="PaymentAgentStore should request for payment agent withdraw" time="0.002">
    </testcase>
    <testcase classname="PaymentAgentStore should handle error when requesting for payment agent withdraw" name="PaymentAgentStore should handle error when requesting for payment agent withdraw" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="AccountTransferStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:29" time="0.863" tests="70">
    <testcase classname="AccountTransferStore should not lock the transfer if there is no any account statuses" name="AccountTransferStore should not lock the transfer if there is no any account statuses" time="0.044">
    </testcase>
    <testcase classname="AccountTransferStore should not lock the transfer if it is not a financial account" name="AccountTransferStore should not lock the transfer if it is not a financial account" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should not lock the transfer if is_financial_information_incomplete and is_trading_experience_incomplete is equal to false" name="AccountTransferStore should not lock the transfer if is_financial_information_incomplete and is_trading_experience_incomplete is equal to false" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should lock the transfer if the financial assessment is needed and error.is_ask_financial_risk_approval is equal to true" name="AccountTransferStore should lock the transfer if the financial assessment is needed and error.is_ask_financial_risk_approval is equal to true" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set the balance by loginid" name="AccountTransferStore should set the balance by loginid" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should set &quot;selected from&quot; balance" name="AccountTransferStore should set &quot;selected from&quot; balance" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set &quot;selected to&quot; balance" name="AccountTransferStore should set &quot;selected to&quot; balance" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should show loader during fetching the data when calling onMountAccountTransfer method" name="AccountTransferStore should show loader during fetching the data when calling onMountAccountTransfer method" time="0.003">
    </testcase>
    <testcase classname="AccountTransferStore should set has_no_accounts_balance to false, if some balance update has come in since the last mount when calling onMountAccountTransfer method" name="AccountTransferStore should set has_no_accounts_balance to false, if some balance update has come in since the last mount when calling onMountAccountTransfer method" time="0.005">
    </testcase>
    <testcase classname="AccountTransferStore should set an error message if there is an error field in transfer_between_accounts response when calling onMountAccountTransfer method" name="AccountTransferStore should set an error message if there is an error field in transfer_between_accounts response when calling onMountAccountTransfer method" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should not call sortAccountsTransfer method if the client can not do account transfer when calling onMountAccountTransfer method" name="AccountTransferStore should not call sortAccountsTransfer method if the client can not do account transfer when calling onMountAccountTransfer method" time="0">
    </testcase>
    <testcase classname="AccountTransferStore should set selected_to loginid as a default, if cfd_transfer_to_login_id property exists in session storage when calling onMountAccountTransfer method" name="AccountTransferStore should set selected_to loginid as a default, if cfd_transfer_to_login_id property exists in session storage when calling onMountAccountTransfer method" time="0.007">
    </testcase>
    <testcase classname="AccountTransferStore should set an error if selected_to loginid in cfd_transfer_to_login_id property in session storage is not allowed for transfer when calling onMountAccountTransfer method" name="AccountTransferStore should set an error if selected_to loginid in cfd_transfer_to_login_id property in session storage is not allowed for transfer when calling onMountAccountTransfer method" time="0.004">
    </testcase>
    <testcase classname="AccountTransferStore should call proper methods when calling onMountAccountTransfer method" name="AccountTransferStore should call proper methods when calling onMountAccountTransfer method" time="0.005">
    </testcase>
    <testcase classname="AccountTransferStore the client cannot make a transfer if he does not have any account with balance greater then 0 " name="AccountTransferStore the client cannot make a transfer if he does not have any account with balance greater then 0 " time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore the client cannot make a transfer if he does not have at least two real-money accounts" name="AccountTransferStore the client cannot make a transfer if he does not have at least two real-money accounts" time="0.008">
    </testcase>
    <testcase classname="AccountTransferStore the client must be able to make a transfer" name="AccountTransferStore the client must be able to make a transfer" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should change value of the variable has_no_accounts_balance" name="AccountTransferStore should change value of the variable has_no_accounts_balance" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should change value of the variable has_no_account" name="AccountTransferStore should change value of the variable has_no_account" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set transfer fee equal to 2" name="AccountTransferStore should set transfer fee equal to 2" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set transfer fee equal to 0 if transfer fee is undefined" name="AccountTransferStore should set transfer fee equal to 0 if transfer fee is undefined" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set minimum fee as 0.01 for USD" name="AccountTransferStore should set minimum fee as 0.01 for USD" time="0">
    </testcase>
    <testcase classname="AccountTransferStore should set minimum fee as 0.00000001 for BTC" name="AccountTransferStore should set minimum fee as 0.00000001 for BTC" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set proper transfer limit for mt5 transfer" name="AccountTransferStore should set proper transfer limit for mt5 transfer" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should set proper transfer limit for dxtrade transfer" name="AccountTransferStore should set proper transfer limit for dxtrade transfer" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set proper transfer limit for other types of transfers" name="AccountTransferStore should set proper transfer limit for other types of transfers" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set max transfer limit equal to the current &quot;selected from&quot; balance, if there is no max transfer fee in response" name="AccountTransferStore should set max transfer limit equal to the current &quot;selected from&quot; balance, if there is no max transfer fee in response" time="0.012">
    </testcase>
    <testcase classname="AccountTransferStore should set min transfer limit equal to null, if there is no min transfer fee in response" name="AccountTransferStore should set min transfer limit equal to null, if there is no min transfer fee in response" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should not sort and set accounts if there is an error in transfer_between_accounts response when calling sortAccountsTransfer method" name="AccountTransferStore should not sort and set accounts if there is an error in transfer_between_accounts response when calling sortAccountsTransfer method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should sort and set accounts when calling sortAccountsTransfer method" name="AccountTransferStore should sort and set accounts when calling sortAccountsTransfer method" time="0.003">
    </testcase>
    <testcase classname="AccountTransferStore should sort and set accounts when calling sortAccountsTransfer method when from derivgo" name="AccountTransferStore should sort and set accounts when calling sortAccountsTransfer method when from derivgo" time="0.008">
    </testcase>
    <testcase classname="AccountTransferStore should set current logged in client as the default transfer from account when calling sortAccountsTransfer method" name="AccountTransferStore should set current logged in client as the default transfer from account when calling sortAccountsTransfer method" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should set an error if client account and selected_from account has not allowed loginid for transfer when calling sortAccountsTransfer method" name="AccountTransferStore should set an error if client account and selected_from account has not allowed loginid for transfer when calling sortAccountsTransfer method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set an error if selected_to account has not allowed loginid for transfer when calling sortAccountsTransfer method" name="AccountTransferStore should set an error if selected_to account has not allowed loginid for transfer when calling sortAccountsTransfer method" time="0">
    </testcase>
    <testcase classname="AccountTransferStore should set proper values for selected_from property" name="AccountTransferStore should set proper values for selected_from property" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set proper values for selected_to property" name="AccountTransferStore should set proper values for selected_to property" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set accounts" name="AccountTransferStore should set accounts" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should change value of the variable is_transfer_confirm" name="AccountTransferStore should change value of the variable is_transfer_confirm" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set account transfer amount" name="AccountTransferStore should set account transfer amount" time="0">
    </testcase>
    <testcase classname="AccountTransferStore should change value of the variable is_transfer_successful" name="AccountTransferStore should change value of the variable is_transfer_successful" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should change value of the variable is_mt5_transfer_in_progress" name="AccountTransferStore should change value of the variable is_mt5_transfer_in_progress" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should set transferred amount in receipt" name="AccountTransferStore should set transferred amount in receipt" time="0.006">
    </testcase>
    <testcase classname="AccountTransferStore should switch the value of selected_from and selected_to, if new value of selected_from is the same as the current selected_to" name="AccountTransferStore should switch the value of selected_from and selected_to, if new value of selected_from is the same as the current selected_to" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should not allowed transfer between mt5 accounts and select first non cfd account" name="AccountTransferStore should not allowed transfer between mt5 accounts and select first non cfd account" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should not allowed transfer between Dxtrade accounts and select first non cfd account" name="AccountTransferStore should not allowed transfer between Dxtrade accounts and select first non cfd account" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should not allowed transfer between MT and Dxtrade accounts and select first non cfd account" name="AccountTransferStore should not allowed transfer between MT and Dxtrade accounts and select first non cfd account" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should not allowed transfer between Dxtrade and MT accounts and select first non cfd account" name="AccountTransferStore should not allowed transfer between Dxtrade and MT accounts and select first non cfd account" time="0.004">
    </testcase>
    <testcase classname="AccountTransferStore should set an error if target.value loginid is not allowed to transfer when calling onChangeTransferFrom method" name="AccountTransferStore should set an error if target.value loginid is not allowed to transfer when calling onChangeTransferFrom method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set transfer fee, minimum fee and transfer limit when calling onChangeTransferFrom method" name="AccountTransferStore should set transfer fee, minimum fee and transfer limit when calling onChangeTransferFrom method" time="0.009">
    </testcase>
    <testcase classname="AccountTransferStore should set an error if target.value loginid is not allowed to transfer when calling onChangeTransferTo method" name="AccountTransferStore should set an error if target.value loginid is not allowed to transfer when calling onChangeTransferTo method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set transfer fee, minimum fee and transfer limit when calling onChangeTransferTo method" name="AccountTransferStore should set transfer fee, minimum fee and transfer limit when calling onChangeTransferTo method" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should return null if the client is not logged in when calling requestTransferBetweenAccounts method" name="AccountTransferStore should return null if the client is not logged in when calling requestTransferBetweenAccounts method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should call setIsMT5TransferInProgress if there is mt5 transfer when calling requestTransferBetweenAccounts method" name="AccountTransferStore should call setIsMT5TransferInProgress if there is mt5 transfer when calling requestTransferBetweenAccounts method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set error message if there is an error in transferBetweenAccounts response when calling requestTransferBetweenAccounts method" name="AccountTransferStore should set error message if there is an error in transferBetweenAccounts response when calling requestTransferBetweenAccounts method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set account status if there is an error code &quot;Fiat2CryptoTransferOverLimit&quot; in transferBetweenAccounts response when calling requestTransferBetweenAccounts method" name="AccountTransferStore should set account status if there is an error code &quot;Fiat2CryptoTransferOverLimit&quot; in transferBetweenAccounts response when calling requestTransferBetweenAccounts method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should call proper setBalance methods when calling requestTransferBetweenAccounts method" name="AccountTransferStore should call proper setBalance methods when calling requestTransferBetweenAccounts method" time="0.007">
    </testcase>
    <testcase classname="AccountTransferStore should show loader during fetching the data when calling requestTransferBetweenAccounts method" name="AccountTransferStore should show loader during fetching the data when calling requestTransferBetweenAccounts method" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should call WS.mt5LoginList and WS.balanceAll methods to update the balance for mt account when calling requestTransferBetweenAccounts" name="AccountTransferStore should call WS.mt5LoginList and WS.balanceAll methods to update the balance for mt account when calling requestTransferBetweenAccounts" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should call WS.tradingPlatformAccountsList and WS.balanceAll methods to update the balance for dxtrade account when calling requestTransferBetweenAccounts" name="AccountTransferStore should call WS.tradingPlatformAccountsList and WS.balanceAll methods to update the balance for dxtrade account when calling requestTransferBetweenAccounts" time="0.002">
    </testcase>
    <testcase classname="AccountTransferStore should reset account transfer" name="AccountTransferStore should reset account transfer" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set transfer percentage selector result if amount &gt; 0" name="AccountTransferStore should set transfer percentage selector result if amount &gt; 0" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set transfer percentage selector result if selected_from.balance = 0" name="AccountTransferStore should set transfer percentage selector result if selected_from.balance = 0" time="0.009">
    </testcase>
    <testcase classname="AccountTransferStore should reset crypto fiat converter if amount = 0 and selected_from.balance &gt; 0" name="AccountTransferStore should reset crypto fiat converter if amount = 0 and selected_from.balance &gt; 0" time="0">
    </testcase>
    <testcase classname="AccountTransferStore should set timer visibility and percentage selector selection status to false when calling  setTransferPercentageSelectorResult method" name="AccountTransferStore should set timer visibility and percentage selector selection status to false when calling  setTransferPercentageSelectorResult method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set &quot;This field is required.&quot; error, if there is no converter_from_amount when calling validateTransferFromAmount method" name="AccountTransferStore should set &quot;This field is required.&quot; error, if there is no converter_from_amount when calling validateTransferFromAmount method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set &quot;Insufficient funds&quot; error, if selected_from.balance &lt; converter_from_amount when calling validateTransferFromAmount method" name="AccountTransferStore should set &quot;Insufficient funds&quot; error, if selected_from.balance &lt; converter_from_amount when calling validateTransferFromAmount method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set error message, if converter_from_amount is not valid number when calling validateTransferFromAmount method" name="AccountTransferStore should set error message, if converter_from_amount is not valid number when calling validateTransferFromAmount method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should remove an error if validation is successful when calling validateTransferFromAmount method" name="AccountTransferStore should remove an error if validation is successful when calling validateTransferFromAmount method" time="0.001">
    </testcase>
    <testcase classname="AccountTransferStore should set error message, if converter_to_amount is not valid number when calling validateTransferToAmount method" name="AccountTransferStore should set error message, if converter_to_amount is not valid number when calling validateTransferToAmount method" time="0">
    </testcase>
    <testcase classname="AccountTransferStore should remove an error if validation is successful when calling validateTransferToAmount method" name="AccountTransferStore should remove an error if validation is successful when calling validateTransferToAmount method" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="WithdrawStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:30" time="0.456" tests="22">
    <testcase classname="WithdrawStore should set is_withdraw_confirmed" name="WithdrawStore should set is_withdraw_confirmed" time="0.005">
    </testcase>
    <testcase classname="WithdrawStore should set withdraw_amount" name="WithdrawStore should set withdraw_amount" time="0.001">
    </testcase>
    <testcase classname="WithdrawStore should request for withdrawal" name="WithdrawStore should request for withdrawal" time="0.01">
    </testcase>
    <testcase classname="WithdrawStore should save withdrawal request" name="WithdrawStore should save withdrawal request" time="0.003">
    </testcase>
    <testcase classname="WithdrawStore should reset withdrawal form" name="WithdrawStore should reset withdrawal form" time="0.002">
    </testcase>
    <testcase classname="WithdrawStore should set blockchain_address" name="WithdrawStore should set blockchain_address" time="0.001">
    </testcase>
    <testcase classname="WithdrawStore should set the iframe url if verification code is valid" name="WithdrawStore should set the iframe url if verification code is valid" time="0.002">
    </testcase>
    <testcase classname="WithdrawStore should handle error on mount of withdraw" name="WithdrawStore should handle error on mount of withdraw" time="0.005">
    </testcase>
    <testcase classname="WithdrawStore should not set the iframe url if the client is using a crypto or virtual account" name="WithdrawStore should not set the iframe url if the client is using a crypto or virtual account" time="0.002">
    </testcase>
    <testcase classname="WithdrawStore should return an error on mount of crypto withdraw if verification code is not valid" name="WithdrawStore should return an error on mount of crypto withdraw if verification code is not valid" time="0.002">
    </testcase>
    <testcase classname="WithdrawStore should mount crypto withdraw if verification code is valid" name="WithdrawStore should mount crypto withdraw if verification code is valid" time="0.001">
    </testcase>
    <testcase classname="WithdrawStore should return is_withdrawal_locked equal to false if there is no account status" name="WithdrawStore should return is_withdrawal_locked equal to false if there is no account status" time="0.001">
    </testcase>
    <testcase classname="WithdrawStore should return is_withdrawal_locked equal to true if client needs POI verification" name="WithdrawStore should return is_withdrawal_locked equal to true if client needs POI verification" time="0.001">
    </testcase>
    <testcase classname="WithdrawStore should return is_withdrawal_locked equal to true if client needs financial risk approval" name="WithdrawStore should return is_withdrawal_locked equal to true if client needs financial risk approval" time="0.001">
    </testcase>
    <testcase classname="WithdrawStore should set max_withdraw_amount" name="WithdrawStore should set max_withdraw_amount" time="0.001">
    </testcase>
    <testcase classname="WithdrawStore should check 10k limit" name="WithdrawStore should check 10k limit" time="0.007">
    </testcase>
    <testcase classname="WithdrawStore should set is_10k_withdrawal_limit_reached" name="WithdrawStore should set is_10k_withdrawal_limit_reached" time="0.002">
    </testcase>
    <testcase classname="WithdrawStore should set crypto_config" name="WithdrawStore should set crypto_config" time="0.001">
    </testcase>
    <testcase classname="WithdrawStore should set percentage selector result" name="WithdrawStore should set percentage selector result" time="0.002">
    </testcase>
    <testcase classname="WithdrawStore should return an error if balance is less than the provided converter from amount" name="WithdrawStore should return an error if balance is less than the provided converter from amount" time="0.001">
    </testcase>
    <testcase classname="WithdrawStore should return an error if balance is less than the minimum withdrawal amount" name="WithdrawStore should return an error if balance is less than the minimum withdrawal amount" time="0.002">
    </testcase>
    <testcase classname="WithdrawStore should return an error if converter from/to amount is not a valid number" name="WithdrawStore should return an error if converter from/to amount is not a valid number" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="OnRampStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:30" time="0.663" tests="37">
    <testcase classname="OnRampStore onramp tab should not be visible for virtual account" name="OnRampStore onramp tab should not be visible for virtual account" time="0.004">
    </testcase>
    <testcase classname="OnRampStore onramp tab should not be visible if the client currency is not cryptocurrency" name="OnRampStore onramp tab should not be visible if the client currency is not cryptocurrency" time="0.002">
    </testcase>
    <testcase classname="OnRampStore onramp tab should not be visible if there is no onramp providers" name="OnRampStore onramp tab should not be visible if there is no onramp providers" time="0.001">
    </testcase>
    <testcase classname="OnRampStore onramp tab should be visible if there is at least one onramp provider" name="OnRampStore onramp tab should be visible if there is at least one onramp provider" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should return only one provider for USD currency" name="OnRampStore should return only one provider for USD currency" time="0.008">
    </testcase>
    <testcase classname="OnRampStore should return three providers for BTC cryptocurrency" name="OnRampStore should return three providers for BTC cryptocurrency" time="0.002">
    </testcase>
    <testcase classname="OnRampStore should return proper onramp popup modal title if should_show_widget = true" name="OnRampStore should return proper onramp popup modal title if should_show_widget = true" time="0.002">
    </testcase>
    <testcase classname="OnRampStore should return proper onramp popup modal title if should_show_widget = false and there is selected provider with should_show_dialog = true" name="OnRampStore should return proper onramp popup modal title if should_show_widget = false and there is selected provider with should_show_dialog = true" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should return empty string to render header + close icon if should_show_widget = false and there is selected provider with should_show_dialog = false" name="OnRampStore should return empty string to render header + close icon if should_show_widget = false and there is selected provider with should_show_dialog = false" time="0.002">
    </testcase>
    <testcase classname="OnRampStore should return undefined if should_show_widget = false and there is no selected provider" name="OnRampStore should return undefined if should_show_widget = false and there is no selected provider" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should have returned from onMountOnramp method if there is no selected_provider" name="OnRampStore should have returned from onMountOnramp method if there is no selected_provider" time="0.011">
    </testcase>
    <testcase classname="OnRampStore should have returned from onMountOnramp method if there is an empty array without dependencies" name="OnRampStore should have returned from onMountOnramp method if there is an empty array without dependencies" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should set widget html if it is defined when disposeGetWidgetHtmlReaction reaction is running" name="OnRampStore should set widget html if it is defined when disposeGetWidgetHtmlReaction reaction is running" time="0.002">
    </testcase>
    <testcase classname="OnRampStore should set should_show_widget into false if html widget is not defined when disposeGetWidgetHtmlReaction reaction is running" name="OnRampStore should set should_show_widget into false if html widget is not defined when disposeGetWidgetHtmlReaction reaction is running" time="0.059">
    </testcase>
    <testcase classname="OnRampStore should set widget error if there is an error when requesting widget when disposeGetWidgetHtmlReaction reaction is running" name="OnRampStore should set widget error if there is an error when requesting widget when disposeGetWidgetHtmlReaction reaction is running" time="0.053">
    </testcase>
    <testcase classname="OnRampStore should not call setIsRequestingWidgetHtml method if is_requesting_widget_html already equal to true when disposeGetWidgetHtmlReaction reaction is running" name="OnRampStore should not call setIsRequestingWidgetHtml method if is_requesting_widget_html already equal to true when disposeGetWidgetHtmlReaction reaction is running" time="0.003">
    </testcase>
    <testcase classname="OnRampStore should call disposeThirdPartyJsReaction and disposeGetWidgetHtmlReaction reactions when unmount onramp" name="OnRampStore should call disposeThirdPartyJsReaction and disposeGetWidgetHtmlReaction reactions when unmount onramp" time="0.002">
    </testcase>
    <testcase classname="OnRampStore should show widget when onClickDisclaimerContinue method was called" name="OnRampStore should show widget when onClickDisclaimerContinue method was called" time="0.002">
    </testcase>
    <testcase classname="OnRampStore should go to deposit page when onClickGoToDepositPage method was called" name="OnRampStore should go to deposit page when onClickGoToDepositPage method was called" time="0.003">
    </testcase>
    <testcase classname="OnRampStore should set api error and clear deposit address interval if there is an error in response when pollApiForDepositAddress method was called" name="OnRampStore should set api error and clear deposit address interval if there is an error in response when pollApiForDepositAddress method was called" time="0.004">
    </testcase>
    <testcase classname="OnRampStore should set empty deposit address when pollApiForDepositAddress method was called with should_allow_empty_address = true" name="OnRampStore should set empty deposit address when pollApiForDepositAddress method was called with should_allow_empty_address = true" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should set deposit address when pollApiForDepositAddress method was called with should_allow_empty_address = false" name="OnRampStore should set deposit address when pollApiForDepositAddress method was called with should_allow_empty_address = false" time="0.013">
    </testcase>
    <testcase classname="OnRampStore should set deposit address interval to 3 seconds when pollApiForDepositAddress method was called" name="OnRampStore should set deposit address interval to 3 seconds when pollApiForDepositAddress method was called" time="0.002">
    </testcase>
    <testcase classname="OnRampStore should clear interval after 30 seconds if there is an empty deposit address in response when pollApiForDepositAddress method was called with should_allow_empty_address = false" name="OnRampStore should clear interval after 30 seconds if there is an empty deposit address in response when pollApiForDepositAddress method was called with should_allow_empty_address = false" time="0.002">
    </testcase>
    <testcase classname="OnRampStore should set deposit address loading when pollApiForDepositAddress method was called" name="OnRampStore should set deposit address loading when pollApiForDepositAddress method was called" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should reset popup" name="OnRampStore should reset popup" time="0.003">
    </testcase>
    <testcase classname="OnRampStore should set api error" name="OnRampStore should set api error" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should set deposit address" name="OnRampStore should set deposit address" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should change value of the variable is_deposit_address_loading" name="OnRampStore should change value of the variable is_deposit_address_loading" time="0.008">
    </testcase>
    <testcase classname="OnRampStore should change value of the variable is_onramp_modal_open" name="OnRampStore should change value of the variable is_onramp_modal_open" time="0.002">
    </testcase>
    <testcase classname="OnRampStore should change value of the variable is_requesting_widget_html" name="OnRampStore should change value of the variable is_requesting_widget_html" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should set selected provider" name="OnRampStore should set selected provider" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should set selected provider to null if there is no provider" name="OnRampStore should set selected provider to null if there is no provider" time="0.002">
    </testcase>
    <testcase classname="OnRampStore should change value of the variable should_show_widget" name="OnRampStore should change value of the variable should_show_widget" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should set onramp providers" name="OnRampStore should set onramp providers" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should set widget error" name="OnRampStore should set widget error" time="0.001">
    </testcase>
    <testcase classname="OnRampStore should set widget html" name="OnRampStore should set widget html" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;QSInputLabel /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:30" time="2.06" tests="3">
    <testcase classname="&lt;QSInputLabel /&gt; should render QSInputLabel" name="&lt;QSInputLabel /&gt; should render QSInputLabel" time="0.032">
    </testcase>
    <testcase classname="&lt;QSInputLabel /&gt; should render label" name="&lt;QSInputLabel /&gt; should render label" time="0.01">
    </testcase>
    <testcase classname="&lt;QSInputLabel /&gt; should render description" name="&lt;QSInputLabel /&gt; should render description" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="BotStopNotification" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:30" time="2.04" tests="4">
    <testcase classname="BotStopNotification should clear the notification timer and hide message after timer expires" name="BotStopNotification should clear the notification timer and hide message after timer expires" time="0.036">
    </testcase>
    <testcase classname="BotStopNotification should render the toast component" name="BotStopNotification should render the toast component" time="0.014">
    </testcase>
    <testcase classname="BotStopNotification should render to remove the toast component when clicking on close icon" name="BotStopNotification should render to remove the toast component when clicking on close icon" time="0.02">
    </testcase>
    <testcase classname="BotStopNotification should render toast" name="BotStopNotification should render toast" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="SearchIcon" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:31" time="1.43" tests="4">
    <testcase classname="SearchIcon should render the SearchIcon component" name="SearchIcon should render the SearchIcon component" time="0.012">
    </testcase>
    <testcase classname="SearchIcon should render the SearchIcon component with IcCloseCircle icon and has correct props when search value is not empty" name="SearchIcon should render the SearchIcon component with IcCloseCircle icon and has correct props when search value is not empty" time="0.002">
    </testcase>
    <testcase classname="SearchIcon should render search icon when search is empty" name="SearchIcon should render search icon when search is empty" time="0.002">
    </testcase>
    <testcase classname="SearchIcon should render loader when is_search_loading is true" name="SearchIcon should render loader when is_search_loading is true" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BotStopped /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:30" time="1.841" tests="4">
    <testcase classname="&lt;BotStopped /&gt; renders the BotStopped component" name="&lt;BotStopped /&gt; renders the BotStopped component" time="0.017">
    </testcase>
    <testcase classname="&lt;BotStopped /&gt; should go to reports page on click of go to reports button" name="&lt;BotStopped /&gt; should go to reports page on click of go to reports button" time="0.009">
    </testcase>
    <testcase classname="&lt;BotStopped /&gt; should reload page on click of Back to Bot" name="&lt;BotStopped /&gt; should reload page on click of Back to Bot" time="0.005">
    </testcase>
    <testcase classname="&lt;BotStopped /&gt; should reload page on click of x button" name="&lt;BotStopped /&gt; should reload page on click of x button" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="SearchBox" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:30" time="1.753" tests="4">
    <testcase classname="SearchBox should render the SearchBox component" name="SearchBox should render the SearchBox component" time="0.015">
    </testcase>
    <testcase classname="SearchBox should handle on search" name="SearchBox should handle on search" time="0.023">
    </testcase>
    <testcase classname="SearchBox should handle search clear click" name="SearchBox should handle search clear click" time="0.035">
    </testcase>
    <testcase classname="SearchBox should handle on search blur" name="SearchBox should handle on search blur" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="Toolbar component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:32" time="0.901" tests="3">
    <testcase classname="Toolbar component should render Toolbar" name="Toolbar component should render Toolbar" time="0.042">
    </testcase>
    <testcase classname="Toolbar component Toolbar should renders a modal window, when the bot is running and dialog is open" name="Toolbar component Toolbar should renders a modal window, when the bot is running and dialog is open" time="0.05">
    </testcase>
    <testcase classname="Toolbar component Toolbar should renders a button, when it is mobile version" name="Toolbar component Toolbar should renders a button, when it is mobile version" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="WorkspaceGroup" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:32" time="1.037" tests="9">
    <testcase classname="WorkspaceGroup should render WorkspaceGroup" name="WorkspaceGroup should render WorkspaceGroup" time="0.041">
    </testcase>
    <testcase classname="WorkspaceGroup should call reset function on clicking reset icon" name="WorkspaceGroup should call reset function on clicking reset icon" time="0.022">
    </testcase>
    <testcase classname="WorkspaceGroup should call toggleLoadModal function on clicking import icon" name="WorkspaceGroup should call toggleLoadModal function on clicking import icon" time="0.023">
    </testcase>
    <testcase classname="WorkspaceGroup should call toggleSaveModal function on clicking save icon" name="WorkspaceGroup should call toggleSaveModal function on clicking save icon" time="0.025">
    </testcase>
    <testcase classname="WorkspaceGroup should call onSortClick function on clicking sort icon" name="WorkspaceGroup should call onSortClick function on clicking sort icon" time="0.014">
    </testcase>
    <testcase classname="WorkspaceGroup should call onUndoClick function with false on clicking undo icon" name="WorkspaceGroup should call onUndoClick function with false on clicking undo icon" time="0.027">
    </testcase>
    <testcase classname="WorkspaceGroup should call onUndoClick function with true on clicking redo icon" name="WorkspaceGroup should call onUndoClick function with true on clicking redo icon" time="0.02">
    </testcase>
    <testcase classname="WorkspaceGroup should call onZoomInOutClick function with true on clicking zoomIn icon" name="WorkspaceGroup should call onZoomInOutClick function with true on clicking zoomIn icon" time="0.025">
    </testcase>
    <testcase classname="WorkspaceGroup should call onZoomInOutClick function with false on clicking zoomOut icon" name="WorkspaceGroup should call onZoomInOutClick function with false on clicking zoomOut icon" time="0.038">
    </testcase>
  </testsuite>
  <testsuite name="WorkspaceWrapper" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:32" time="1.173" tests="6">
    <testcase classname="WorkspaceWrapper should render WorkspaceWrapper with inner components should render WorkspaceWrapper with Toolbox component" name="WorkspaceWrapper should render WorkspaceWrapper with inner components should render WorkspaceWrapper with Toolbox component" time="0.109">
    </testcase>
    <testcase classname="WorkspaceWrapper should render WorkspaceWrapper with inner components should render WorkspaceWrapper with Toolbar component" name="WorkspaceWrapper should render WorkspaceWrapper with inner components should render WorkspaceWrapper with Toolbar component" time="0.105">
    </testcase>
    <testcase classname="WorkspaceWrapper should render WorkspaceWrapper with inner components should render WorkspaceWrapper with Flyout component" name="WorkspaceWrapper should render WorkspaceWrapper with inner components should render WorkspaceWrapper with Flyout component" time="0.041">
    </testcase>
    <testcase classname="WorkspaceWrapper should render WorkspaceWrapper with inner components should render WorkspaceWrapper with StopBotModal component" name="WorkspaceWrapper should render WorkspaceWrapper with inner components should render WorkspaceWrapper with StopBotModal component" time="0.034">
    </testcase>
    <testcase classname="WorkspaceWrapper should render empty DOM element when is_loading equals true" name="WorkspaceWrapper should render empty DOM element when is_loading equals true" time="0.006">
    </testcase>
    <testcase classname="WorkspaceWrapper should not render anything in the dom when window.Blockly.derivWorkspace equals undefined" name="WorkspaceWrapper should not render anything in the dom when window.Blockly.derivWorkspace equals undefined" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="BotBuilder" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:32" time="1.218" tests="7">
    <testcase classname="BotBuilder should render BotBuilderTourHandler" name="BotBuilder should render BotBuilderTourHandler" time="0.094">
    </testcase>
    <testcase classname="BotBuilder should render QuickStrategy" name="BotBuilder should render QuickStrategy" time="0.01">
    </testcase>
    <testcase classname="BotBuilder should render BotBuilder with worksapce wrapper" name="BotBuilder should render BotBuilder with worksapce wrapper" time="0.014">
    </testcase>
    <testcase classname="BotBuilder should show warning on change of block if bot is running" name="BotBuilder should show warning on change of block if bot is running" time="0.022">
    </testcase>
    <testcase classname="BotBuilder should not show warning on change of block if bot is running but reset is clicked" name="BotBuilder should not show warning on change of block if bot is running but reset is clicked" time="0.014">
    </testcase>
    <testcase classname="BotBuilder should remove listeners on component unmount" name="BotBuilder should remove listeners on component unmount" time="0.073">
    </testcase>
    <testcase classname="BotBuilder should close the notification on click of notification close button" name="BotBuilder should close the notification on click of notification close button" time="0.156">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DesktopFormWrapper /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:32" time="1.356" tests="5">
    <testcase classname="&lt;DesktopFormWrapper /&gt; renders the DesktopFormWrapper component" name="&lt;DesktopFormWrapper /&gt; renders the DesktopFormWrapper component" time="0.043">
    </testcase>
    <testcase classname="&lt;DesktopFormWrapper /&gt; should close the form" name="&lt;DesktopFormWrapper /&gt; should close the form" time="0.024">
    </testcase>
    <testcase classname="&lt;DesktopFormWrapper /&gt; should change the selected strategy" name="&lt;DesktopFormWrapper /&gt; should change the selected strategy" time="0.024">
    </testcase>
    <testcase classname="&lt;DesktopFormWrapper /&gt; should submit the form on edit" name="&lt;DesktopFormWrapper /&gt; should submit the form on edit" time="0.076">
    </testcase>
    <testcase classname="&lt;DesktopFormWrapper /&gt; should submit the form" name="&lt;DesktopFormWrapper /&gt; should submit the form" time="0.094">
    </testcase>
  </testsuite>
  <testsuite name="&lt;QSInput /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:33" time="0.989" tests="4">
    <testcase classname="&lt;QSInput /&gt; should render QSInput" name="&lt;QSInput /&gt; should render QSInput" time="0.035">
    </testcase>
    <testcase classname="&lt;QSInput /&gt; should increase the value on click of &quot;+&quot; button" name="&lt;QSInput /&gt; should increase the value on click of &quot;+&quot; button" time="0.036">
    </testcase>
    <testcase classname="&lt;QSInput /&gt; should decrease the value on click of &quot;-&quot; button" name="&lt;QSInput /&gt; should decrease the value on click of &quot;-&quot; button" time="0.02">
    </testcase>
    <testcase classname="&lt;QSInput /&gt; the onMouseLeave handler sets the focus to false" name="&lt;QSInput /&gt; the onMouseLeave handler sets the focus to false" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;QSCheckbox /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:33" time="0.917" tests="3">
    <testcase classname="&lt;QSCheckbox /&gt; should render QSCheckbox" name="&lt;QSCheckbox /&gt; should render QSCheckbox" time="0.048">
    </testcase>
    <testcase classname="&lt;QSCheckbox /&gt; should render description" name="&lt;QSCheckbox /&gt; should render description" time="0.073">
    </testcase>
    <testcase classname="&lt;QSCheckbox /&gt; should change value" name="&lt;QSCheckbox /&gt; should change value" time="0.087">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MobileFormWrapper /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:33" time="0.851" tests="3">
    <testcase classname="&lt;MobileFormWrapper /&gt; renders the MobileFormWrapper component" name="&lt;MobileFormWrapper /&gt; renders the MobileFormWrapper component" time="0.045">
    </testcase>
    <testcase classname="&lt;MobileFormWrapper /&gt; should change the selected strategy" name="&lt;MobileFormWrapper /&gt; should change the selected strategy" time="0.061">
    </testcase>
    <testcase classname="&lt;MobileFormWrapper /&gt; should submit the form" name="&lt;MobileFormWrapper /&gt; should submit the form" time="0.078">
    </testcase>
  </testsuite>
  <testsuite name="LossThresholdWarningDialog" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:33" time="0.867" tests="4">
    <testcase classname="LossThresholdWarningDialog should render LossThresholdWarningDialog" name="LossThresholdWarningDialog should render LossThresholdWarningDialog" time="0.024">
    </testcase>
    <testcase classname="LossThresholdWarningDialog should handle edit the amount button click" name="LossThresholdWarningDialog should handle edit the amount button click" time="0.05">
    </testcase>
    <testcase classname="LossThresholdWarningDialog should handle continue button click" name="LossThresholdWarningDialog should handle continue button click" time="0.047">
    </testcase>
    <testcase classname="LossThresholdWarningDialog should handle dont show again checkbox click" name="LossThresholdWarningDialog should handle dont show again checkbox click" time="0.099">
    </testcase>
  </testsuite>
  <testsuite name="&lt;QuickStrategy /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:34" time="1.063" tests="4">
    <testcase classname="&lt;QuickStrategy /&gt; should render QuickStrategy" name="&lt;QuickStrategy /&gt; should render QuickStrategy" time="0.107">
    </testcase>
    <testcase classname="&lt;QuickStrategy /&gt; It should submit the form" name="&lt;QuickStrategy /&gt; It should submit the form" time="0.158">
    </testcase>
    <testcase classname="&lt;QuickStrategy /&gt; It should close the form on close button click" name="&lt;QuickStrategy /&gt; It should close the form on close button click" time="0.049">
    </testcase>
    <testcase classname="&lt;QuickStrategy /&gt; It should render desktop" name="&lt;QuickStrategy /&gt; It should render desktop" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="&lt;QuickStrategyForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:34" time="0.83" tests="2">
    <testcase classname="&lt;QuickStrategyForm /&gt; should render TradeType" name="&lt;QuickStrategyForm /&gt; should render TradeType" time="0.081">
    </testcase>
    <testcase classname="&lt;QuickStrategyForm /&gt; On press of enter handleEnter should run" name="&lt;QuickStrategyForm /&gt; On press of enter handleEnter should run" time="0.075">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContractType /&gt; Responsive" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:34" time="0.819" tests="4">
    <testcase classname="&lt;ContractType /&gt; Responsive should render ContractTypes" name="&lt;ContractType /&gt; Responsive should render ContractTypes" time="0.03">
    </testcase>
    <testcase classname="&lt;ContractType /&gt; Responsive should select item from tabs" name="&lt;ContractType /&gt; Responsive should select item from tabs" time="0.024">
    </testcase>
    <testcase classname="&lt;ContractType /&gt; Desktop should render ContractType" name="&lt;ContractType /&gt; Desktop should render ContractType" time="0.02">
    </testcase>
    <testcase classname="&lt;ContractType /&gt; Desktop should select item from list" name="&lt;ContractType /&gt; Desktop should select item from list" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DurationUnit /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:34" time="0.802" tests="2">
    <testcase classname="&lt;DurationUnit /&gt; should render DurationUnit" name="&lt;DurationUnit /&gt; should render DurationUnit" time="0.054">
    </testcase>
    <testcase classname="&lt;DurationUnit /&gt; should select item from list" name="&lt;DurationUnit /&gt; should select item from list" time="0.059">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradeType /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:34" time="0.928" tests="2">
    <testcase classname="&lt;TradeType /&gt; should render TradeType" name="&lt;TradeType /&gt; should render TradeType" time="0.045">
    </testcase>
    <testcase classname="&lt;TradeType /&gt; should select the first item from list on the first time the browser is used" name="&lt;TradeType /&gt; should select the first item from list on the first time the browser is used" time="0.139">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SymbolSelect /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:35" time="0.957" tests="3">
    <testcase classname="&lt;SymbolSelect /&gt; should render SymbolSelect" name="&lt;SymbolSelect /&gt; should render SymbolSelect" time="0.035">
    </testcase>
    <testcase classname="&lt;SymbolSelect /&gt; should select item from the list" name="&lt;SymbolSelect /&gt; should select item from the list" time="0.063">
    </testcase>
    <testcase classname="&lt;SymbolSelect /&gt; should input to be empty when the user clicks to type something" name="&lt;SymbolSelect /&gt; should input to be empty when the user clicks to type something" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FAQContent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:35" time="0.701" tests="1">
    <testcase classname="&lt;FAQContent /&gt; should render the component" name="&lt;FAQContent /&gt; should render the component" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FAQContent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:35" time="0.774" tests="2">
    <testcase classname="&lt;FAQContent /&gt; should render FAQContent" name="&lt;FAQContent /&gt; should render FAQContent" time="0.021">
    </testcase>
    <testcase classname="&lt;FAQContent /&gt; should show content" name="&lt;FAQContent /&gt; should show content" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TutorialsTab /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:35" time="0.752" tests="1">
    <testcase classname="&lt;TutorialsTab /&gt; should render tutorials tab" name="&lt;TutorialsTab /&gt; should render tutorials tab" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TutorialsTabDesktop /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:35" time="0.773" tests="4">
    <testcase classname="&lt;TutorialsTabDesktop /&gt; should render tutorials tab for desktop" name="&lt;TutorialsTabDesktop /&gt; should render tutorials tab for desktop" time="0.017">
    </testcase>
    <testcase classname="&lt;TutorialsTabDesktop /&gt; should call onFocusSearch when input is focused" name="&lt;TutorialsTabDesktop /&gt; should call onFocusSearch when input is focused" time="0.013">
    </testcase>
    <testcase classname="&lt;TutorialsTabDesktop /&gt; should call onSearch when input value changes" name="&lt;TutorialsTabDesktop /&gt; should call onSearch when input value changes" time="0.033">
    </testcase>
    <testcase classname="&lt;TutorialsTabDesktop /&gt; should clear Search on input when clicked on close" name="&lt;TutorialsTabDesktop /&gt; should clear Search on input when clicked on close" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="Tour Config Data" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:36" time="0.706" tests="1">
    <testcase classname="Tour Config Data DBOT_ONBOARDING_MOBILE is called" name="Tour Config Data DBOT_ONBOARDING_MOBILE is called" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TutorialsTabDesktop /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:36" time="0.875" tests="5">
    <testcase classname="&lt;TutorialsTabDesktop /&gt; should render tutorials tab for mobile" name="&lt;TutorialsTabDesktop /&gt; should render tutorials tab for mobile" time="0.074">
    </testcase>
    <testcase classname="&lt;TutorialsTabDesktop /&gt; should toggle the search bar visibility when the arrow icon is clicked" name="&lt;TutorialsTabDesktop /&gt; should toggle the search bar visibility when the arrow icon is clicked" time="0.017">
    </testcase>
    <testcase classname="&lt;TutorialsTabDesktop /&gt; should toggle the search bar visibility when the arrow icon is clicked" name="&lt;TutorialsTabDesktop /&gt; should toggle the search bar visibility when the arrow icon is clicked" time="0.014">
    </testcase>
    <testcase classname="&lt;TutorialsTabDesktop /&gt; should update the search input value and call onSearch" name="&lt;TutorialsTabDesktop /&gt; should update the search input value and call onSearch" time="0.036">
    </testcase>
    <testcase classname="&lt;TutorialsTabDesktop /&gt; should clear Search on input when clicked on close" name="&lt;TutorialsTabDesktop /&gt; should clear Search on input when clicked on close" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="&lt;QuickStrategyGuidesDetail /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:36" time="0.788" tests="4">
    <testcase classname="&lt;QuickStrategyGuidesDetail /&gt; should render QuickStrategyGuidesDetail component" name="&lt;QuickStrategyGuidesDetail /&gt; should render QuickStrategyGuidesDetail component" time="0.018">
    </testcase>
    <testcase classname="&lt;QuickStrategyGuidesDetail /&gt; should render onClick on press of enter keydown" name="&lt;QuickStrategyGuidesDetail /&gt; should render onClick on press of enter keydown" time="0.014">
    </testcase>
    <testcase classname="&lt;QuickStrategyGuidesDetail /&gt; should not render onClick on press of space keydown" name="&lt;QuickStrategyGuidesDetail /&gt; should not render onClick on press of space keydown" time="0.007">
    </testcase>
    <testcase classname="&lt;QuickStrategyGuidesDetail /&gt; should render back with click on breadcrumb" name="&lt;QuickStrategyGuidesDetail /&gt; should render back with click on breadcrumb" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TourButton /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:36" time="0.564" tests="4">
    <testcase classname="&lt;TourButton /&gt; should render TourButton with label" name="&lt;TourButton /&gt; should render TourButton with label" time="0.02">
    </testcase>
    <testcase classname="&lt;TourButton /&gt; should not render TourButton with label" name="&lt;TourButton /&gt; should not render TourButton with label" time="0.001">
    </testcase>
    <testcase classname="&lt;TourButton /&gt; should render TourButton with specified type" name="&lt;TourButton /&gt; should render TourButton with specified type" time="0.01">
    </testcase>
    <testcase classname="&lt;TourButton /&gt; should call onClick when the button is clicked" name="&lt;TourButton /&gt; should call onClick when the button is clicked" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Cashier /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:26" time="10.905" tests="5">
    <testcase classname="&lt;Cashier /&gt; should show the loading component if client_tnc_status is not yet loaded or not yet logged in" name="&lt;Cashier /&gt; should show the loading component if client_tnc_status is not yet loaded or not yet logged in" time="0.019">
    </testcase>
    <testcase classname="&lt;Cashier /&gt; should render the component if client_tnc_status is loaded" name="&lt;Cashier /&gt; should render the component if client_tnc_status is loaded" time="7.236">
    </testcase>
    <testcase classname="&lt;Cashier /&gt; should go to selected route page on desktop" name="&lt;Cashier /&gt; should go to selected route page on desktop" time="0.851">
    </testcase>
    <testcase classname="&lt;Cashier /&gt; should not render the side note if on deposit page" name="&lt;Cashier /&gt; should not render the side note if on deposit page" time="0.013">
    </testcase>
    <testcase classname="&lt;Cashier /&gt; should show the selected route page on mobile" name="&lt;Cashier /&gt; should show the selected route page on mobile" time="0.911">
    </testcase>
  </testsuite>
  <testsuite name="&lt;QuickStrategyGuides /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:36" time="0.915" tests="3">
    <testcase classname="&lt;QuickStrategyGuides /&gt; should render the component" name="&lt;QuickStrategyGuides /&gt; should render the component" time="0.025">
    </testcase>
    <testcase classname="&lt;QuickStrategyGuides /&gt; should render the component with quick strategy description" name="&lt;QuickStrategyGuides /&gt; should render the component with quick strategy description" time="0.049">
    </testcase>
    <testcase classname="&lt;QuickStrategyGuides /&gt; should render the component with xs font when on mobile" name="&lt;QuickStrategyGuides /&gt; should render the component with xs font when on mobile" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="ReactJoyrideWrapper" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:36" time="0.66" tests="1">
    <testcase classname="ReactJoyrideWrapper should render ReactJoyrideWrapper" name="ReactJoyrideWrapper should render ReactJoyrideWrapper" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Accordion /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:36" time="0.722" tests="4">
    <testcase classname="&lt;Accordion /&gt; should render Accordion with correct props and content" name="&lt;Accordion /&gt; should render Accordion with correct props and content" time="0.016">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should not render Accordion if content_data is empty" name="&lt;Accordion /&gt; should not render Accordion if content_data is empty" time="0.002">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should open accordion" name="&lt;Accordion /&gt; should open accordion" time="0.004">
    </testcase>
    <testcase classname="&lt;Accordion /&gt; should close accordion" name="&lt;Accordion /&gt; should close accordion" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="RecentComponent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:36" time="0.75" tests="3">
    <testcase classname="RecentComponent Should display the list of strategies" name="RecentComponent Should display the list of strategies" time="0.048">
    </testcase>
    <testcase classname="RecentComponent Should display text size equal to &quot;xs&quot; when using the mobile version" name="RecentComponent Should display text size equal to &quot;xs&quot; when using the mobile version" time="0.017">
    </testcase>
    <testcase classname="RecentComponent Should not display anything if the list of strategies is empty" name="RecentComponent Should not display anything if the list of strategies is empty" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="local" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:37" time="0.726" tests="2">
    <testcase classname="local should render the Local component" name="local should render the Local component" time="0.032">
    </testcase>
    <testcase classname="local should render the open button to open bot builder tab" name="local should render the open button to open bot builder tab" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="IconRadio" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:37" time="0.721" tests="4">
    <testcase classname="IconRadio should render the text passed as prop" name="IconRadio should render the text passed as prop" time="0.014">
    </testcase>
    <testcase classname="IconRadio should render Google Drive as disconnected" name="IconRadio should render Google Drive as disconnected" time="0.007">
    </testcase>
    <testcase classname="IconRadio should fire gdrive connect callback" name="IconRadio should fire gdrive connect callback" time="0.012">
    </testcase>
    <testcase classname="IconRadio should fire gdrive disconnect callback" name="IconRadio should fire gdrive disconnect callback" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="GoogleDrive" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:37" time="0.917" tests="4">
    <testcase classname="GoogleDrive should render GoogleDrive component with svg element that has height and width equal 128, and should have text Google Drive, when is_authorised = false on desktop version" name="GoogleDrive should render GoogleDrive component with svg element that has height and width equal 128, and should have text Google Drive, when is_authorised = false on desktop version" time="0.017">
    </testcase>
    <testcase classname="GoogleDrive should render GoogleDrive component with buttons Disconnect and Open when is_authorised = true" name="GoogleDrive should render GoogleDrive component with buttons Disconnect and Open when is_authorised = true" time="0.007">
    </testcase>
    <testcase classname="GoogleDrive should render GoogleDrive component with ability to close dialog modal and invoke google drive when is_authorised = true" name="GoogleDrive should render GoogleDrive component with ability to close dialog modal and invoke google drive when is_authorised = true" time="0.042">
    </testcase>
    <testcase classname="GoogleDrive should render GoogleDrive component with with svg element that has height and width equal 96 when it is a mobile version" name="GoogleDrive should render GoogleDrive component with with svg element that has height and width equal 96 when it is a mobile version" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="BotPreview" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:37" time="0.722" tests="1">
    <testcase classname="BotPreview should render BotPreview component with ref" name="BotPreview should render BotPreview component with ref" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="LocalFooter" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:37" time="0.905" tests="4">
    <testcase classname="LocalFooter should render LocalFooter" name="LocalFooter should render LocalFooter" time="0.019">
    </testcase>
    <testcase classname="LocalFooter should open modal on click open button" name="LocalFooter should open modal on click open button" time="0.021">
    </testcase>
    <testcase classname="LocalFooter should render cancel button on mobile" name="LocalFooter should render cancel button on mobile" time="0.005">
    </testcase>
    <testcase classname="LocalFooter should reset local file on cancel button click" name="LocalFooter should reset local file on cancel button click" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="StopBotModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:37" time="0.829" tests="2">
    <testcase classname="StopBotModal should render the StopBotModal component" name="StopBotModal should render the StopBotModal component" time="0.01">
    </testcase>
    <testcase classname="StopBotModal should render dialog with button label stop my bot" name="StopBotModal should render dialog with button label stop my bot" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="RunStrategy" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:38" time="0.339" tests="2">
    <testcase classname="RunStrategy should render the RunStrategy component" name="RunStrategy should render the RunStrategy component" time="0.008">
    </testcase>
    <testcase classname="RunStrategy should render the TradeAnimation component inside of RunStrategy" name="RunStrategy should render the TradeAnimation component inside of RunStrategy" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="RecentFooter" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:37" time="1.949" tests="2">
    <testcase classname="RecentFooter should render RecentFooter" name="RecentFooter should render RecentFooter" time="0.011">
    </testcase>
    <testcase classname="RecentFooter should render open button" name="RecentFooter should render open button" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="RecentComponent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:37" time="1.296" tests="5">
    <testcase classname="RecentComponent Should render SaveModal in desktop" name="RecentComponent Should render SaveModal in desktop" time="0.034">
    </testcase>
    <testcase classname="RecentComponent Should render SaveModal in mobile mode" name="RecentComponent Should render SaveModal in mobile mode" time="0.022">
    </testcase>
    <testcase classname="RecentComponent Should check save to Google Drive " name="RecentComponent Should check save to Google Drive " time="0.161">
    </testcase>
    <testcase classname="RecentComponent Should check save to  Local" name="RecentComponent Should check save to  Local" time="0.131">
    </testcase>
    <testcase classname="RecentComponent Should check save to bot-name empty " name="RecentComponent Should check save to bot-name empty " time="0.153">
    </testcase>
  </testsuite>
  <testsuite name="&lt;UserGuide /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:38" time="0.618" tests="1">
    <testcase classname="&lt;UserGuide /&gt; renders user guide button" name="&lt;UserGuide /&gt; renders user guide button" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="StopBotModalContent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:38" time="0.838" tests="3">
    <testcase classname="StopBotModalContent should render the StopBotModalContent component" name="StopBotModalContent should render the StopBotModalContent component" time="0.035">
    </testcase>
    <testcase classname="StopBotModalContent should render the StopBotModalContent component with close contract message" name="StopBotModalContent should render the StopBotModalContent component with close contract message" time="0.013">
    </testcase>
    <testcase classname="StopBotModalContent should render the StopBotModalContent component with stop bot message" name="StopBotModalContent should render the StopBotModalContent component with stop bot message" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="InfoPanel" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:38" time="0.851" tests="4">
    <testcase classname="InfoPanel should render the InfoPanel component" name="InfoPanel should render the InfoPanel component" time="0.016">
    </testcase>
    <testcase classname="InfoPanel should render the closing of the info panel on close icon click" name="InfoPanel should render the closing of the info panel on close icon click" time="0.018">
    </testcase>
    <testcase classname="InfoPanel should render the switching of tabs upon clicking the text link" name="InfoPanel should render the switching of tabs upon clicking the text link" time="0.01">
    </testcase>
    <testcase classname="InfoPanel should render the tutorial tab and FAQ tab" name="InfoPanel should render the tutorial tab and FAQ tab" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="Chart" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:38" time="0.772" tests="1">
    <testcase classname="Chart renders Chart component with SmartChart component" name="Chart renders Chart component with SmartChart component" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="useComponentVisibility" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:39" time="0.318" tests="2">
    <testcase classname="useComponentVisibility should render dropdown visibility to be hidden on ESC key press" name="useComponentVisibility should render dropdown visibility to be hidden on ESC key press" time="0.017">
    </testcase>
    <testcase classname="useComponentVisibility should render dropdown visibility to be hidden on outside click" name="useComponentVisibility should render dropdown visibility to be hidden on outside click" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ChartModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:39" time="0.762" tests="2">
    <testcase classname="ChartModal should render Desktop component based on Desktop" name="ChartModal should render Desktop component based on Desktop" time="0.033">
    </testcase>
    <testcase classname="ChartModal should render Mobile version without Chart Modal" name="ChartModal should render Mobile version without Chart Modal" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="ToolbarWidgets" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:39" time="0.883" tests="2">
    <testcase classname="ToolbarWidgets should render ToolbarWidgets in desktop" name="ToolbarWidgets should render ToolbarWidgets in desktop" time="0.048">
    </testcase>
    <testcase classname="ToolbarWidgets should render ToolbarWidgets in mobile" name="ToolbarWidgets should render ToolbarWidgets in mobile" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ChartModalDesktop" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:39" time="0.792" tests="2">
    <testcase classname="ChartModalDesktop should render ChartModalDesktop" name="ChartModalDesktop should render ChartModalDesktop" time="0.029">
    </testcase>
    <testcase classname="ChartModalDesktop should show ChartModalDesktop modal after resizing screen" name="ChartModalDesktop should show ChartModalDesktop modal after resizing screen" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="FlyoutVideo" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:39" time="0.314" tests="4">
    <testcase classname="FlyoutVideo Renders the iframe container" name="FlyoutVideo Renders the iframe container" time="0.011">
    </testcase>
    <testcase classname="FlyoutVideo Renders the iframe with the provided URL" name="FlyoutVideo Renders the iframe with the provided URL" time="0.004">
    </testcase>
    <testcase classname="FlyoutVideo Renders the iframe with the correct attributes" name="FlyoutVideo Renders the iframe with the correct attributes" time="0.005">
    </testcase>
    <testcase classname="FlyoutVideo Renders the iframe with the correct class" name="FlyoutVideo Renders the iframe with the correct class" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="NetworkToastPopup" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:39" time="0.724" tests="3">
    <testcase classname="NetworkToastPopup should render NetworkToastPopup message" name="NetworkToastPopup should render NetworkToastPopup message" time="0.028">
    </testcase>
    <testcase classname="NetworkToastPopup should not render NetworkToastPopup if status is online" name="NetworkToastPopup should not render NetworkToastPopup if status is online" time="0.013">
    </testcase>
    <testcase classname="NetworkToastPopup should not render NetworkToastPopup if no message found" name="NetworkToastPopup should not render NetworkToastPopup if no message found" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="FlyoutText" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:39" time="0.532" tests="2">
    <testcase classname="FlyoutText renders the provided text" name="FlyoutText renders the provided text" time="0.01">
    </testcase>
    <testcase classname="FlyoutText renders with the correct styles" name="FlyoutText renders with the correct styles" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="FlyoutImage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:39" time="0.32" tests="5">
    <testcase classname="FlyoutImage Should render the FlyoutImage component" name="FlyoutImage Should render the FlyoutImage component" time="0.008">
    </testcase>
    <testcase classname="FlyoutImage FlyoutImage component should consists the image" name="FlyoutImage FlyoutImage component should consists the image" time="0.006">
    </testcase>
    <testcase classname="FlyoutImage Renders the image with given url" name="FlyoutImage Renders the image with given url" time="0.009">
    </testcase>
    <testcase classname="FlyoutImage Applies the width style when provided" name="FlyoutImage Applies the width style when provided" time="0.003">
    </testcase>
    <testcase classname="FlyoutImage Has the correct class names" name="FlyoutImage Has the correct class names" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Summary" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:39" time="1.027" tests="2">
    <testcase classname="Summary The Summary component must be rendered for mobile version with expected class" name="Summary The Summary component must be rendered for mobile version with expected class" time="0.013">
    </testcase>
    <testcase classname="Summary The Summary component must be rendered for desktop version with expected class" name="Summary The Summary component must be rendered for desktop version with expected class" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FlyoutBlock /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:39" time="0.781" tests="2">
    <testcase classname="&lt;FlyoutBlock /&gt; should render the FlyoutBlock component" name="&lt;FlyoutBlock /&gt; should render the FlyoutBlock component" time="0.012">
    </testcase>
    <testcase classname="&lt;FlyoutBlock /&gt; should show the FlyoutBlock element" name="&lt;FlyoutBlock /&gt; should show the FlyoutBlock element" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="messageWithButtonMockProps" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:40" time="0.595" tests="4">
    <testcase classname="messageWithButtonMockProps should render messageWithButton" name="messageWithButtonMockProps should render messageWithButton" time="0.012">
    </testcase>
    <testcase classname="messageWithButtonMockProps should call function of the button on click of the button" name="messageWithButtonMockProps should call function of the button on click of the button" time="0.014">
    </testcase>
    <testcase classname="messageWithButtonMockProps should get appropriate icon when getIcon is called" name="messageWithButtonMockProps should get appropriate icon when getIcon is called" time="0.001">
    </testcase>
    <testcase classname="messageWithButtonMockProps should render messageWithImage" name="messageWithButtonMockProps should render messageWithImage" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="BotNotificationMessages" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:40" time="0.805" tests="3">
    <testcase classname="BotNotificationMessages should render BotNotificationMessages" name="BotNotificationMessages should render BotNotificationMessages" time="0.016">
    </testcase>
    <testcase classname="BotNotificationMessages should apply notifications-container__dashboard class when active tab is 0 and is_info_panel_visible is true" name="BotNotificationMessages should apply notifications-container__dashboard class when active tab is 0 and is_info_panel_visible is true" time="0.002">
    </testcase>
    <testcase classname="BotNotificationMessages should apply notifications-container--panel-open class when is_drawer_open is true and active tab has a value of 1 or 2" name="BotNotificationMessages should apply notifications-container--panel-open class when is_drawer_open is true and active tab has a value of 1 or 2" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="BlocklyLoading" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:40" time="0.862" tests="3">
    <testcase classname="BlocklyLoading should render BlocklyLoading" name="BlocklyLoading should render BlocklyLoading" time="0.01">
    </testcase>
    <testcase classname="BlocklyLoading should not render BlocklyLoading loader" name="BlocklyLoading should not render BlocklyLoading loader" time="0.002">
    </testcase>
    <testcase classname="BlocklyLoading should render BlocklyLoading loader" name="BlocklyLoading should render BlocklyLoading loader" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="BotSnackbar" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:40" time="0.953" tests="5">
    <testcase classname="BotSnackbar should render BotSnackbar with correct message" name="BotSnackbar should render BotSnackbar with correct message" time="0.036">
    </testcase>
    <testcase classname="BotSnackbar should not render BotSnackbar if snack bar is not opened" name="BotSnackbar should not render BotSnackbar if snack bar is not opened" time="0.018">
    </testcase>
    <testcase classname="BotSnackbar should render close button if snackbar is open" name="BotSnackbar should render close button if snackbar is open" time="0.012">
    </testcase>
    <testcase classname="BotSnackbar should hanlde close function on click close button" name="BotSnackbar should hanlde close function on click close button" time="0.03">
    </testcase>
    <testcase classname="BotSnackbar should close snackbar after timeout is passed and mouse is not over the snackbar" name="BotSnackbar should close snackbar after timeout is passed and mouse is not over the snackbar" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="Audio" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:40" time="0.463" tests="3">
    <testcase classname="Audio should render Audio" name="Audio should render Audio" time="0.008">
    </testcase>
    <testcase classname="Audio should have 5 audio tag" name="Audio should have 5 audio tag" time="0.005">
    </testcase>
    <testcase classname="Audio should have mandatory src attribute in audio tags" name="Audio should have mandatory src attribute in audio tags" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="Draggable" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:40" time="0.824" tests="3">
    <testcase classname="Draggable should render Draggable" name="Draggable should render Draggable" time="0.038">
    </testcase>
    <testcase classname="Draggable should not render Draggable" name="Draggable should not render Draggable" time="0.007">
    </testcase>
    <testcase classname="Draggable should call onClose function on close button click" name="Draggable should call onClose function on close button click" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="RoutePromptDialog" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:40" time="0.865" tests="4">
    <testcase classname="RoutePromptDialog should render RoutePromptDialog" name="RoutePromptDialog should render RoutePromptDialog" time="0.018">
    </testcase>
    <testcase classname="RoutePromptDialog should render title of RoutePromptDialog" name="RoutePromptDialog should render title of RoutePromptDialog" time="0.006">
    </testcase>
    <testcase classname="RoutePromptDialog should confirm and hide RoutePromptDialog on clicking confirm button" name="RoutePromptDialog should confirm and hide RoutePromptDialog on clicking confirm button" time="0.042">
    </testcase>
    <testcase classname="RoutePromptDialog should hide RoutePromptDialog on clicking cancel button" name="RoutePromptDialog should hide RoutePromptDialog on clicking cancel button" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="ContractResultOverlay" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:40" time="0.77" tests="3">
    <testcase classname="ContractResultOverlay should render the ContractResultOverlay component" name="ContractResultOverlay should render the ContractResultOverlay component" time="0.025">
    </testcase>
    <testcase classname="ContractResultOverlay should show contract won" name="ContractResultOverlay should show contract won" time="0.008">
    </testcase>
    <testcase classname="ContractResultOverlay should show contract lost" name="ContractResultOverlay should show contract lost" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="WorkspaceControl" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:41" time="0.774" tests="5">
    <testcase classname="WorkspaceControl should render LocalFooter" name="WorkspaceControl should render LocalFooter" time="0.012">
    </testcase>
    <testcase classname="WorkspaceControl should show zoom in icon" name="WorkspaceControl should show zoom in icon" time="0.007">
    </testcase>
    <testcase classname="WorkspaceControl should show zoom out icon" name="WorkspaceControl should show zoom out icon" time="0.002">
    </testcase>
    <testcase classname="WorkspaceControl should call onZoomInOutClick when zoom in icon is clicked" name="WorkspaceControl should call onZoomInOutClick when zoom in icon is clicked" time="0.011">
    </testcase>
    <testcase classname="WorkspaceControl should call onZoomInOutClick when zoom out icon is clicked" name="WorkspaceControl should call onZoomInOutClick when zoom out icon is clicked" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Recent component of load modal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:41" time="0.811" tests="2">
    <testcase classname="Recent component of load modal should render Recent component without any recent bots strategies when recent_strategies array is empty" name="Recent component of load modal should render Recent component without any recent bots strategies when recent_strategies array is empty" time="0.021">
    </testcase>
    <testcase classname="Recent component of load modal should render Recent component with recent bots strategies, title and preview when recent_strategies are exist" name="Recent component of load modal should render Recent component with recent bots strategies, title and preview when recent_strategies are exist" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="RecentFooter" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:41" time="0.692" tests="3">
    <testcase classname="RecentFooter should render RecentFooter" name="RecentFooter should render RecentFooter" time="0.011">
    </testcase>
    <testcase classname="RecentFooter should render button with Open text without loader" name="RecentFooter should render button with Open text without loader" time="0.01">
    </testcase>
    <testcase classname="RecentFooter should render import message and close load modal on open button click" name="RecentFooter should render import message and close load modal on open button click" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="LocalFooter" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:41" time="0.808" tests="3">
    <testcase classname="LocalFooter should render LocalFooter" name="LocalFooter should render LocalFooter" time="0.014">
    </testcase>
    <testcase classname="LocalFooter should display Cancel button on mobile" name="LocalFooter should display Cancel button on mobile" time="0.026">
    </testcase>
    <testcase classname="LocalFooter should display Open button on desktop" name="LocalFooter should display Open button on desktop" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="RecentWorkspace" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:41" time="0.766" tests="3">
    <testcase classname="RecentWorkspace should render RecentWorkspace" name="RecentWorkspace should render RecentWorkspace" time="0.01">
    </testcase>
    <testcase classname="RecentWorkspace should show strategy saved time in proper format" name="RecentWorkspace should show strategy saved time in proper format" time="0.004">
    </testcase>
    <testcase classname="RecentWorkspace should update selected strategy ID on clicking the strategy" name="RecentWorkspace should update selected strategy ID on clicking the strategy" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="ContractCardLoader" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:41" time="0.775" tests="3">
    <testcase classname="ContractCardLoader should render ContractCardLoader" name="ContractCardLoader should render ContractCardLoader" time="0.018">
    </testcase>
    <testcase classname="ContractCardLoader should render ContractCardLoader with default speed value" name="ContractCardLoader should render ContractCardLoader with default speed value" time="0.004">
    </testcase>
    <testcase classname="ContractCardLoader should render ContractCardLoader with speed value passed as prop" name="ContractCardLoader should render ContractCardLoader with speed value passed as prop" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="TransactionDetailsDesktop" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:41" time="0.837" tests="4">
    <testcase classname="TransactionDetailsDesktop should render TransactionDetailsDesktop" name="TransactionDetailsDesktop should render TransactionDetailsDesktop" time="0.012">
    </testcase>
    <testcase classname="TransactionDetailsDesktop should open DesktopTransactionTable modal" name="TransactionDetailsDesktop should open DesktopTransactionTable modal" time="0.025">
    </testcase>
    <testcase classname="TransactionDetailsDesktop should open DesktopTransactionTable modal after resizing screen" name="TransactionDetailsDesktop should open DesktopTransactionTable modal after resizing screen" time="0.012">
    </testcase>
    <testcase classname="TransactionDetailsDesktop should close DesktopTransactionTable modal" name="TransactionDetailsDesktop should close DesktopTransactionTable modal" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="DesktopTransactionTable" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:42" time="0.629" tests="3">
    <testcase classname="DesktopTransactionTable should render DesktopTransactionTable" name="DesktopTransactionTable should render DesktopTransactionTable" time="0.018">
    </testcase>
    <testcase classname="DesktopTransactionTable should render DesktopTransactionTable with loader" name="DesktopTransactionTable should render DesktopTransactionTable with loader" time="0.013">
    </testcase>
    <testcase classname="DesktopTransactionTable should render DesktopTransactionTable with profit shown upto 2 decimal" name="DesktopTransactionTable should render DesktopTransactionTable with profit shown upto 2 decimal" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TransactionDetailsMobile" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:42" time="0.873" tests="4">
    <testcase classname="TransactionDetailsMobile should render TransactionDetailsMobile" name="TransactionDetailsMobile should render TransactionDetailsMobile" time="0.011">
    </testcase>
    <testcase classname="TransactionDetailsMobile should open TransactionDetailsMobile modal" name="TransactionDetailsMobile should open TransactionDetailsMobile modal" time="0.016">
    </testcase>
    <testcase classname="TransactionDetailsMobile should close TransactionDetailsMobile modal" name="TransactionDetailsMobile should close TransactionDetailsMobile modal" time="0.008">
    </testcase>
    <testcase classname="TransactionDetailsMobile should render TransactionDetailsMobile with loader" name="TransactionDetailsMobile should render TransactionDetailsMobile with loader" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="JournalItem" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:42" time="0.609" tests="5">
    <testcase classname="JournalItem Should render default JournalItem flow" name="JournalItem Should render default JournalItem flow" time="0.016">
    </testcase>
    <testcase classname="JournalItem Should render JournalItem with an Error message" name="JournalItem Should render JournalItem with an Error message" time="0.003">
    </testcase>
    <testcase classname="JournalItem Should render JournalItem with an Notify message" name="JournalItem Should render JournalItem with an Notify message" time="0.007">
    </testcase>
    <testcase classname="JournalItem Should render JournalItem with an Notify function" name="JournalItem Should render JournalItem with an Notify function" time="0.006">
    </testcase>
    <testcase classname="JournalItem Should render JournalItem with a Success row data message &quot;Blocks are loaded successfully&quot;" name="JournalItem Should render JournalItem with a Success row data message &quot;Blocks are loaded successfully&quot;" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="JournalLoader" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:42" time="0.306" tests="2">
    <testcase classname="JournalLoader Renders correctly for desktop" name="JournalLoader Renders correctly for desktop" time="0.016">
    </testcase>
    <testcase classname="JournalLoader Renders correctly for mobile with given props" name="JournalLoader Renders correctly for mobile with given props" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="TransactionDetails" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:42" time="0.771" tests="2">
    <testcase classname="TransactionDetails should render Desktop component based on Desktop" name="TransactionDetails should render Desktop component based on Desktop" time="0.027">
    </testcase>
    <testcase classname="TransactionDetails should render Mobile component on mobile" name="TransactionDetails should render Mobile component on mobile" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="JournalTools" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:42" time="0.82" tests="2">
    <testcase classname="JournalTools should renders JournalTools" name="JournalTools should renders JournalTools" time="0.021">
    </testcase>
    <testcase classname="JournalTools should renders filter options that is passed as prop" name="JournalTools should renders filter options that is passed as prop" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="DOM utilities of window-size file" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:43" time="0.335" tests="4">
    <testcase classname="DOM utilities of window-size file Should get main content height" name="DOM utilities of window-size file Should get main content height" time="0.01">
    </testcase>
    <testcase classname="DOM utilities of window-size file Should get main content width" name="DOM utilities of window-size file Should get main content width" time="0.002">
    </testcase>
    <testcase classname="DOM utilities of window-size file Should set main content width based on is_run_panel_open" name="DOM utilities of window-size file Should set main content width based on is_run_panel_open" time="0.006">
    </testcase>
    <testcase classname="DOM utilities of window-size file Should set inner height to --vh variable" name="DOM utilities of window-size file Should set inner height to --vh variable" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Settings functions: getSetting(), storeSetting(), removeKeyValue()" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:43" time="0.263" tests="4">
    <testcase classname="Settings functions: getSetting(), storeSetting(), removeKeyValue() Should return null if there are no settings" name="Settings functions: getSetting(), storeSetting(), removeKeyValue() Should return null if there are no settings" time="0.001">
    </testcase>
    <testcase classname="Settings functions: getSetting(), storeSetting(), removeKeyValue() Should store and retrieve a setting" name="Settings functions: getSetting(), storeSetting(), removeKeyValue() Should store and retrieve a setting" time="0">
    </testcase>
    <testcase classname="Settings functions: getSetting(), storeSetting(), removeKeyValue() Should remove a key-value pair from settings" name="Settings functions: getSetting(), storeSetting(), removeKeyValue() Should remove a key-value pair from settings" time="0.001">
    </testcase>
    <testcase classname="Settings functions: getSetting(), storeSetting(), removeKeyValue() Should handle removing a key when dbot_settings does not exist and settings is an empty object" name="Settings functions: getSetting(), storeSetting(), removeKeyValue() Should handle removing a key when dbot_settings does not exist and settings is an empty object" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Draggable" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:42" time="0.754" tests="3">
    <testcase classname="Draggable should renders DateItem" name="Draggable should renders DateItem" time="0.013">
    </testcase>
    <testcase classname="Draggable should show date" name="Draggable should show date" time="0.004">
    </testcase>
    <testcase classname="Draggable should show time" name="Draggable should show time" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Filters /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:42" time="0.843" tests="1">
    <testcase classname="&lt;Filters /&gt; should render filter component" name="&lt;Filters /&gt; should render filter component" time="0.067">
    </testcase>
  </testsuite>
  <testsuite name="Multiplier Util" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:43" time="0.483" tests="3">
    <testcase classname="Multiplier Util should return the buy price from contract_store" name="Multiplier Util should return the buy price from contract_store" time="0.001">
    </testcase>
    <testcase classname="Multiplier Util should return contract update config with stop loss and take profit" name="Multiplier Util should return contract update config with stop loss and take profit" time="0.001">
    </testcase>
    <testcase classname="Multiplier Util should handle missing limit_order" name="Multiplier Util should handle missing limit_order" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Session Storage Util" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:43" time="0.531" tests="4">
    <testcase classname="Session Storage Util should return default value when storage is empty" name="Session Storage Util should return default value when storage is empty" time="0.001">
    </testcase>
    <testcase classname="Session Storage Util should return default value when loginid is falsy" name="Session Storage Util should return default value when loginid is falsy" time="0">
    </testcase>
    <testcase classname="Session Storage Util should set stored items" name="Session Storage Util should set stored items" time="0.001">
    </testcase>
    <testcase classname="Session Storage Util should throw error if invalid object is passed to store" name="Session Storage Util should throw error if invalid object is passed to store" time="0">
    </testcase>
  </testsuite>
  <testsuite name="FilterDialog" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:42" time="1.046" tests="3">
    <testcase classname="FilterDialog should renders FilterDialog" name="FilterDialog should renders FilterDialog" time="0.014">
    </testcase>
    <testcase classname="FilterDialog should render FilterDialog with filters" name="FilterDialog should render FilterDialog with filters" time="0.006">
    </testcase>
    <testcase classname="FilterDialog should call toggleFilterDialog when clicking outside the dialog" name="FilterDialog should call toggleFilterDialog when clicking outside the dialog" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="RoutePromptDialogStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:43" time="0.554" tests="11">
    <testcase classname="RoutePromptDialogStore should set should_show to be false" name="RoutePromptDialogStore should set should_show to be false" time="0.002">
    </testcase>
    <testcase classname="RoutePromptDialogStore should set is_confirmed to be false" name="RoutePromptDialogStore should set is_confirmed to be false" time="0.001">
    </testcase>
    <testcase classname="RoutePromptDialogStore should set last_location to be null" name="RoutePromptDialogStore should set last_location to be null" time="0">
    </testcase>
    <testcase classname="RoutePromptDialogStore should update should_show" name="RoutePromptDialogStore should update should_show" time="0.001">
    </testcase>
    <testcase classname="RoutePromptDialogStore should update should_show to false on onCancel" name="RoutePromptDialogStore should update should_show to false on onCancel" time="0">
    </testcase>
    <testcase classname="RoutePromptDialogStore should set should_show to false and is_confirmed to true on onConfirm" name="RoutePromptDialogStore should set should_show to false and is_confirmed to true on onConfirm" time="0.001">
    </testcase>
    <testcase classname="RoutePromptDialogStore should return false for shouldNavigateAfterPrompt if is_confirmed is false" name="RoutePromptDialogStore should return false for shouldNavigateAfterPrompt if is_confirmed is false" time="0.001">
    </testcase>
    <testcase classname="RoutePromptDialogStore should return true for shouldNavigateAfterPrompt if is_confirmed is true" name="RoutePromptDialogStore should return true for shouldNavigateAfterPrompt if is_confirmed is true" time="0">
    </testcase>
    <testcase classname="RoutePromptDialogStore should set should_show to true if location pathname not equal to bot" name="RoutePromptDialogStore should set should_show to true if location pathname not equal to bot" time="0.002">
    </testcase>
    <testcase classname="RoutePromptDialogStore should not call common.routeTo when is_confirmed is false on continueRoute" name="RoutePromptDialogStore should not call common.routeTo when is_confirmed is false on continueRoute" time="0.001">
    </testcase>
    <testcase classname="RoutePromptDialogStore should call common.routeTo when is_confirmed is true on continueRoute" name="RoutePromptDialogStore should call common.routeTo when is_confirmed is true on continueRoute" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="SelfExclusionStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:43" time="0.284" tests="14">
    <testcase classname="SelfExclusionStore Should initialize with default values" name="SelfExclusionStore Should initialize with default values" time="0.004">
    </testcase>
    <testcase classname="SelfExclusionStore Should return initial values" name="SelfExclusionStore Should return initial values" time="0.001">
    </testcase>
    <testcase classname="SelfExclusionStore Should return run_limit as part of initial values when it is not -1" name="SelfExclusionStore Should return run_limit as part of initial values when it is not -1" time="0.001">
    </testcase>
    <testcase classname="SelfExclusionStore Should return empty string for run_limit in initial values when it is -1" name="SelfExclusionStore Should return empty string for run_limit in initial values when it is -1" time="0.001">
    </testcase>
    <testcase classname="SelfExclusionStore Should allow bot to run by default" name="SelfExclusionStore Should allow bot to run by default" time="0">
    </testcase>
    <testcase classname="SelfExclusionStore Should not allow bot to run under certain conditions" name="SelfExclusionStore Should not allow bot to run under certain conditions" time="0.008">
    </testcase>
    <testcase classname="SelfExclusionStore Should not allow the bot to run when client is EU, not virtual and run_limit is -1" name="SelfExclusionStore Should not allow the bot to run when client is EU, not virtual and run_limit is -1" time="0">
    </testcase>
    <testcase classname="SelfExclusionStore Should allow the bot to run when client is not EU even if run_limit is -1" name="SelfExclusionStore Should allow the bot to run when client is not EU even if run_limit is -1" time="0.001">
    </testcase>
    <testcase classname="SelfExclusionStore Should not allow the bot to run when client is EU, not virtual and run_limit is -1 regardless of api_max_losses value" name="SelfExclusionStore Should not allow the bot to run when client is EU, not virtual and run_limit is -1 regardless of api_max_losses value" time="0">
    </testcase>
    <testcase classname="SelfExclusionStore Should set is_restricted" name="SelfExclusionStore Should set is_restricted" time="0.001">
    </testcase>
    <testcase classname="SelfExclusionStore Should set api_max_losses" name="SelfExclusionStore Should set api_max_losses" time="0">
    </testcase>
    <testcase classname="SelfExclusionStore Should set run_limit" name="SelfExclusionStore Should set run_limit" time="0.001">
    </testcase>
    <testcase classname="SelfExclusionStore Should reset self exclusion values" name="SelfExclusionStore Should reset self exclusion values" time="0">
    </testcase>
    <testcase classname="SelfExclusionStore Should update api_max_losses after checking restriction" name="SelfExclusionStore Should update api_max_losses after checking restriction" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="journalError function" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:43" time="0.799" tests="1">
    <testcase classname="journalError function Should return the correct error object" name="journalError function Should return the correct error object" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="useDBotStore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:43" time="0.739" tests="2">
    <testcase classname="useDBotStore UseDBotStore should return the store if used inside DBotStoreProvider" name="useDBotStore UseDBotStore should return the store if used inside DBotStoreProvider" time="0.022">
    </testcase>
    <testcase classname="useDBotStore UseDBotStore should throw error if used outside of DBotStoreProvider" name="useDBotStore UseDBotStore should throw error if used outside of DBotStoreProvider" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="Bot component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:43" time="0.598" tests="1">
    <testcase classname="Bot component renders app-main using makeLazyLoader" name="Bot component renders app-main using makeLazyLoader" time="0.236">
    </testcase>
  </testsuite>
  <testsuite name="AppContent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:43" time="0.787" tests="5">
    <testcase classname="AppContent should render loading initially" name="AppContent should render loading initially" time="0.011">
    </testcase>
    <testcase classname="AppContent should render Dashboard if user is not logged in" name="AppContent should render Dashboard if user is not logged in" time="0.012">
    </testcase>
    <testcase classname="AppContent should settle open contracts if there is any" name="AppContent should settle open contracts if there is any" time="0.004">
    </testcase>
    <testcase classname="AppContent should unsubscribe message handler on component unmount" name="AppContent should unsubscribe message handler on component unmount" time="0.054">
    </testcase>
    <testcase classname="AppContent should not render loading if user is offline" name="AppContent should not render loading if user is offline" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="DBotProviders" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:44" time="0.715" tests="2">
    <testcase classname="DBotProviders should render DBotProviders with children" name="DBotProviders should render DBotProviders with children" time="0.023">
    </testcase>
    <testcase classname="DBotProviders should access useStore platform value from component" name="DBotProviders should access useStore platform value from component" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="APIMiddleware" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:44" time="0.745" tests="10">
    <testcase classname="APIMiddleware Should get measure for each request, invoke method log(), clear measures" name="APIMiddleware Should get measure for each request, invoke method log(), clear measures" time="0.007">
    </testcase>
    <testcase classname="APIMiddleware Should log info if measures are there" name="APIMiddleware Should log info if measures are there" time="0">
    </testcase>
    <testcase classname="APIMiddleware Should not log info if measures are absent" name="APIMiddleware Should not log info if measures are absent" time="0.001">
    </testcase>
    <testcase classname="APIMiddleware GetRequestType" name="APIMiddleware GetRequestType" time="0">
    </testcase>
    <testcase classname="APIMiddleware Should invoke the method defineMeasure()" name="APIMiddleware Should invoke the method defineMeasure()" time="0.001">
    </testcase>
    <testcase classname="APIMiddleware Should invoke the method sendWillBeCalled()" name="APIMiddleware Should invoke the method sendWillBeCalled()" time="0.002">
    </testcase>
    <testcase classname="APIMiddleware Define measure Should define measure of history API call" name="APIMiddleware Define measure Should define measure of history API call" time="0.002">
    </testcase>
    <testcase classname="APIMiddleware Define measure Should define measure of proposal API call" name="APIMiddleware Define measure Should define measure of proposal API call" time="0.009">
    </testcase>
    <testcase classname="APIMiddleware Define measure Should define measure for API calls except of history" name="APIMiddleware Define measure Should define measure for API calls except of history" time="0.008">
    </testcase>
    <testcase classname="APIMiddleware Should be added the method sendRequestsStatistic to window" name="APIMiddleware Should be added the method sendRequestsStatistic to window" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="App" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:44" time="1.203" tests="1">
    <testcase classname="App should render loader on app" name="App should render loader on app" time="0.039">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletContentDivider /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:44" time="0.711" tests="2">
    <testcase classname="&lt;WalletContentDivider /&gt; Check classname for NOT demo" name="&lt;WalletContentDivider /&gt; Check classname for NOT demo" time="0.016">
    </testcase>
    <testcase classname="&lt;WalletContentDivider /&gt; Check classname for demo" name="&lt;WalletContentDivider /&gt; Check classname for demo" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;EUDisclaimer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:44" time="1.537" tests="4">
    <testcase classname="&lt;EUDisclaimer /&gt; Check disclaimer exists" name="&lt;EUDisclaimer /&gt; Check disclaimer exists" time="0.015">
    </testcase>
    <testcase classname="&lt;EUDisclaimer /&gt; Check disclaimer for wallets exists" name="&lt;EUDisclaimer /&gt; Check disclaimer for wallets exists" time="0.004">
    </testcase>
    <testcase classname="&lt;EUDisclaimer /&gt; Check classes when dont pass the props" name="&lt;EUDisclaimer /&gt; Check classes when dont pass the props" time="0.005">
    </testcase>
    <testcase classname="&lt;EUDisclaimer /&gt; Check classes when pass the props" name="&lt;EUDisclaimer /&gt; Check classes when pass the props" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="TradersHub" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:44" time="1.782" tests="6">
    <testcase classname="TradersHub should display the component" name="TradersHub should display the component" time="0.021">
    </testcase>
    <testcase classname="TradersHub should display both CFDs and Multipliers section" name="TradersHub should display both CFDs and Multipliers section" time="0.009">
    </testcase>
    <testcase classname="TradersHub should display Multipliers section if there is no MT5 accounts availble for country of residence" name="TradersHub should display Multipliers section if there is no MT5 accounts availble for country of residence" time="0.004">
    </testcase>
    <testcase classname="TradersHub should display Multipliers and CFDs section in order if the user is non eu" name="TradersHub should display Multipliers and CFDs section in order if the user is non eu" time="0.003">
    </testcase>
    <testcase classname="TradersHub should display Multipliers and CFDs section in reverse order if the user is eu" name="TradersHub should display Multipliers and CFDs section in reverse order if the user is eu" time="0.009">
    </testcase>
    <testcase classname="TradersHub should display disclaimer if the user is from low risk eu country" name="TradersHub should display disclaimer if the user is from low risk eu country" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="EmptyOnboarding test cases:" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:44" time="1.794" tests="3">
    <testcase classname="EmptyOnboarding test cases: Should render component" name="EmptyOnboarding test cases: Should render component" time="0.01">
    </testcase>
    <testcase classname="EmptyOnboarding test cases: Should render Deriv Logo inside the component" name="EmptyOnboarding test cases: Should render Deriv Logo inside the component" time="0.002">
    </testcase>
    <testcase classname="EmptyOnboarding test cases: Should not render the component when conditions are true" name="EmptyOnboarding test cases: Should not render the component when conditions are true" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletTransferBlock /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:44" time="1.675" tests="2">
    <testcase classname="&lt;WalletTransferBlock /&gt; Check balance" name="&lt;WalletTransferBlock /&gt; Check balance" time="0.014">
    </testcase>
    <testcase classname="&lt;WalletTransferBlock /&gt; Check loginid" name="&lt;WalletTransferBlock /&gt; Check loginid" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="GridContainer" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:46" time="0.33" tests="1">
    <testcase classname="GridContainer should render children" name="GridContainer should render children" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="CurrentSwitcherContainer" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:46" time="0.718" tests="5">
    <testcase classname="CurrentSwitcherContainer should render the modal" name="CurrentSwitcherContainer should render the modal" time="0.013">
    </testcase>
    <testcase classname="CurrentSwitcherContainer should not have the dropdown if is demo is true" name="CurrentSwitcherContainer should not have the dropdown if is demo is true" time="0.003">
    </testcase>
    <testcase classname="CurrentSwitcherContainer should not have the dropdown if is_eu_user is true" name="CurrentSwitcherContainer should not have the dropdown if is_eu_user is true" time="0.004">
    </testcase>
    <testcase classname="CurrentSwitcherContainer should have pending in the classname if the document status is pending" name="CurrentSwitcherContainer should have pending in the classname if the document status is pending" time="0.009">
    </testcase>
    <testcase classname="CurrentSwitcherContainer should have default in the classname if the document status is default" name="CurrentSwitcherContainer should have default in the classname if the document status is default" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="AccountTransferModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:46" time="0.7" tests="3">
    <testcase classname="AccountTransferModal should render the modal" name="AccountTransferModal should render the modal" time="0.035">
    </testcase>
    <testcase classname="AccountTransferModal should render the text and mocked modal correctly" name="AccountTransferModal should render the text and mocked modal correctly" time="0.009">
    </testcase>
    <testcase classname="AccountTransferModal should have account-transfer-modal classname if should switch account is true" name="AccountTransferModal should have account-transfer-modal classname if should switch account is true" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletContent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:45" time="1.752" tests="5">
    <testcase classname="&lt;WalletContent /&gt; Check class" name="&lt;WalletContent /&gt; Check class" time="0.015">
    </testcase>
    <testcase classname="&lt;WalletContent /&gt; Check class for demo" name="&lt;WalletContent /&gt; Check class for demo" time="0.011">
    </testcase>
    <testcase classname="&lt;WalletContent /&gt; Check there is NOT disclaimer for demo" name="&lt;WalletContent /&gt; Check there is NOT disclaimer for demo" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletContent /&gt; Check there is NOT disclaimer for Non-EU" name="&lt;WalletContent /&gt; Check there is NOT disclaimer for Non-EU" time="0.004">
    </testcase>
    <testcase classname="&lt;WalletContent /&gt; Check there is disclaimer for EU and not demo" name="&lt;WalletContent /&gt; Check there is disclaimer for EU and not demo" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Wallets /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:45" time="1.588" tests="3">
    <testcase classname="&lt;Wallets /&gt; Check class for NOT demo" name="&lt;Wallets /&gt; Check class for NOT demo" time="0.024">
    </testcase>
    <testcase classname="&lt;Wallets /&gt; Check class for demo" name="&lt;Wallets /&gt; Check class for demo" time="0.006">
    </testcase>
    <testcase classname="&lt;Wallets /&gt; Check for demo wallet header" name="&lt;Wallets /&gt; Check for demo wallet header" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="CFDsListing" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:46" time="0.828" tests="1">
    <testcase classname="CFDsListing should render the component" name="CFDsListing should render the component" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TradingAppCard/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:46" time="1.094" tests="5">
    <testcase classname="&lt;TradingAppCard/&gt; should render correct status badge if mt5_acc_auth_status value is migrated_with_position" name="&lt;TradingAppCard/&gt; should render correct status badge if mt5_acc_auth_status value is migrated_with_position" time="0.02">
    </testcase>
    <testcase classname="&lt;TradingAppCard/&gt; should render correct status badge if mt5_acc_auth_status value is migrated_without_position" name="&lt;TradingAppCard/&gt; should render correct status badge if mt5_acc_auth_status value is migrated_without_position" time="0.015">
    </testcase>
    <testcase classname="&lt;TradingAppCard/&gt; should open OpenPositionsSVGModal when user clicks on the badge" name="&lt;TradingAppCard/&gt; should open OpenPositionsSVGModal when user clicks on the badge" time="0.033">
    </testcase>
    <testcase classname="&lt;TradingAppCard/&gt; should close OpenPositionsSVGModal when user clicks on the OK" name="&lt;TradingAppCard/&gt; should close OpenPositionsSVGModal when user clicks on the OK" time="0.291">
    </testcase>
    <testcase classname="&lt;TradingAppCard/&gt; should not render status badge if mt5_acc_auth_status value is null" name="&lt;TradingAppCard/&gt; should not render status badge if mt5_acc_auth_status value is null" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="RegulatorSwitcher" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:47" time="0.604" tests="6">
    <testcase classname="RegulatorSwitcher should render correctly" name="RegulatorSwitcher should render correctly" time="0.014">
    </testcase>
    <testcase classname="RegulatorSwitcher should render the correct text" name="RegulatorSwitcher should render the correct text" time="0.009">
    </testcase>
    <testcase classname="RegulatorSwitcher should open toggleRegulatorsCompareModal if the user clicks on the icon" name="RegulatorSwitcher should open toggleRegulatorsCompareModal if the user clicks on the icon" time="0.009">
    </testcase>
    <testcase classname="RegulatorSwitcher should switch the region to EU if the user clicks on EU" name="RegulatorSwitcher should switch the region to EU if the user clicks on EU" time="0.01">
    </testcase>
    <testcase classname="RegulatorSwitcher should switch the region to Non-EU if the user clicks on Non-EU" name="RegulatorSwitcher should switch the region to Non-EU if the user clicks on Non-EU" time="0.004">
    </testcase>
    <testcase classname="RegulatorSwitcher should show loader if is_switching is true" name="RegulatorSwitcher should show loader if is_switching is true" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletButton /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:47" time="0.733" tests="4">
    <testcase classname="&lt;WalletButton /&gt; Should render right text" name="&lt;WalletButton /&gt; Should render right text" time="0.025">
    </testcase>
    <testcase classname="&lt;WalletButton /&gt; Should render desktop class" name="&lt;WalletButton /&gt; Should render desktop class" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletButton /&gt; Should render mobile class" name="&lt;WalletButton /&gt; Should render mobile class" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletButton /&gt; Should add disabled class" name="&lt;WalletButton /&gt; Should add disabled class" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="CurrencySwitcherCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:47" time="0.467" tests="4">
    <testcase classname="CurrencySwitcherCard should render empty div if user has no real account" name="CurrencySwitcherCard should render empty div if user has no real account" time="0.016">
    </testcase>
    <testcase classname="CurrencySwitcherCard should render demo account card if user is in demo" name="CurrencySwitcherCard should render demo account card if user is in demo" time="0.005">
    </testcase>
    <testcase classname="CurrencySwitcherCard should render real account switcher if user is in real and not an eu user" name="CurrencySwitcherCard should render real account switcher if user is in real and not an eu user" time="0.011">
    </testcase>
    <testcase classname="CurrencySwitcherCard should render real account switcher if user is in real and is an eu user" name="CurrencySwitcherCard should render real account switcher if user is in real and is an eu user" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="StaticDashboard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:47" time="0.643" tests="6">
    <testcase classname="StaticDashboard should display the component" name="StaticDashboard should display the component" time="0.025">
    </testcase>
    <testcase classname="StaticDashboard should display both CFDs and Multipliers section" name="StaticDashboard should display both CFDs and Multipliers section" time="0.007">
    </testcase>
    <testcase classname="StaticDashboard should display Multipliers and CFDs section in order if the user is non eu" name="StaticDashboard should display Multipliers and CFDs section in order if the user is non eu" time="0.011">
    </testcase>
    <testcase classname="StaticDashboard should display Multipliers and CFDs section in reverse order if the user is eu" name="StaticDashboard should display Multipliers and CFDs section in reverse order if the user is eu" time="0.004">
    </testcase>
    <testcase classname="StaticDashboard should display correct platforms if the user residence is in financial restricted countries" name="StaticDashboard should display correct platforms if the user residence is in financial restricted countries" time="0.004">
    </testcase>
    <testcase classname="StaticDashboard should not display MT5 section if MT5 is not available in residence country" name="StaticDashboard should not display MT5 section if MT5 is not available in residence country" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletHeader /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:47" time="0.888" tests="14">
    <testcase classname="&lt;WalletHeader /&gt; Check currency card Should render right currency card for DEMO" name="&lt;WalletHeader /&gt; Check currency card Should render right currency card for DEMO" time="0.023">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check currency card Should render right currency card for REAL SVG fiat" name="&lt;WalletHeader /&gt; Check currency card Should render right currency card for REAL SVG fiat" time="0.013">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check currency card Should render right currency card for REAL SVG crypto" name="&lt;WalletHeader /&gt; Check currency card Should render right currency card for REAL SVG crypto" time="0.011">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check currency card Should render right currency card for REAL MALTA fiat" name="&lt;WalletHeader /&gt; Check currency card Should render right currency card for REAL MALTA fiat" time="0.025">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check balance Should render right balance with balance as props" name="&lt;WalletHeader /&gt; Check balance Should render right balance with balance as props" time="0.01">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check balance Should render balance === 0.00" name="&lt;WalletHeader /&gt; Check balance Should render balance === 0.00" time="0.007">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check balance Should render badge Pending verification" name="&lt;WalletHeader /&gt; Check balance Should render badge Pending verification" time="0.008">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check balance Should render badge Verification failed" name="&lt;WalletHeader /&gt; Check balance Should render badge Verification failed" time="0.017">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check balance Should render badge Need verification" name="&lt;WalletHeader /&gt; Check balance Should render badge Need verification" time="0.007">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check buttons Buttons collapsed" name="&lt;WalletHeader /&gt; Check buttons Buttons collapsed" time="0.007">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check buttons Buttons uncollapsed" name="&lt;WalletHeader /&gt; Check buttons Buttons uncollapsed" time="0.021">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check buttons Arrow button click and switchAccount should be called" name="&lt;WalletHeader /&gt; Check buttons Arrow button click and switchAccount should be called" time="0.01">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check buttons Check buttons for demo" name="&lt;WalletHeader /&gt; Check buttons Check buttons for demo" time="0.03">
    </testcase>
    <testcase classname="&lt;WalletHeader /&gt; Check buttons Check buttons for real" name="&lt;WalletHeader /&gt; Check buttons Check buttons for real" time="0.051">
    </testcase>
  </testsuite>
  <testsuite name="RealAccountCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:47" time="0.685" tests="5">
    <testcase classname="RealAccountCard should render the component" name="RealAccountCard should render the component" time="0.033">
    </testcase>
    <testcase classname="RealAccountCard should render the component with the correct balance and currency as USD" name="RealAccountCard should render the component with the correct balance and currency as USD" time="0.006">
    </testcase>
    <testcase classname="RealAccountCard should render the component with the correct balance and currency as EUR" name="RealAccountCard should render the component with the correct balance and currency as EUR" time="0.005">
    </testcase>
    <testcase classname="RealAccountCard should redirect the user to cashier_deposit page after clicking deposit" name="RealAccountCard should redirect the user to cashier_deposit page after clicking deposit" time="0.007">
    </testcase>
    <testcase classname="RealAccountCard should open the currency selection modal" name="RealAccountCard should open the currency selection modal" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="RealAccountSwitcher" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:47" time="0.66" tests="6">
    <testcase classname="RealAccountSwitcher should render the component" name="RealAccountSwitcher should render the component" time="0.014">
    </testcase>
    <testcase classname="RealAccountSwitcher should render AccountNeedsVerification component with the correct pending status" name="RealAccountSwitcher should render AccountNeedsVerification component with the correct pending status" time="0.007">
    </testcase>
    <testcase classname="RealAccountSwitcher should render RealAccountCard if its an eu user and has a maltainvest account" name="RealAccountSwitcher should render RealAccountCard if its an eu user and has a maltainvest account" time="0.003">
    </testcase>
    <testcase classname="RealAccountSwitcher should render RealAccountCard if the user has no cr account and not an eu user" name="RealAccountSwitcher should render RealAccountCard if the user has no cr account and not an eu user" time="0.002">
    </testcase>
    <testcase classname="RealAccountSwitcher should render Currency Switcher Loader if is_switching is true" name="RealAccountSwitcher should render Currency Switcher Loader if is_switching is true" time="0.003">
    </testcase>
    <testcase classname="RealAccountSwitcher should render empty div" name="RealAccountSwitcher should render empty div" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Test Cases for Multi Action Button Group:" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:47" time="0.592" tests="5">
    <testcase classname="Test Cases for Multi Action Button Group: should display &quot;Open&quot; and &quot;Transfer&quot; button within component" name="Test Cases for Multi Action Button Group: should display &quot;Open&quot; and &quot;Transfer&quot; button within component" time="0.011">
    </testcase>
    <testcase classname="Test Cases for Multi Action Button Group: should display &quot;Top up&quot; button instead of &quot;Transfer&quot; if it is not real" name="Test Cases for Multi Action Button Group: should display &quot;Top up&quot; button instead of &quot;Transfer&quot; if it is not real" time="0.003">
    </testcase>
    <testcase classname="Test Cases for Multi Action Button Group: should disable &quot;Open&quot; button if &quot;is_buttons_disabled&quot; is true" name="Test Cases for Multi Action Button Group: should disable &quot;Open&quot; button if &quot;is_buttons_disabled&quot; is true" time="0.002">
    </testcase>
    <testcase classname="Test Cases for Multi Action Button Group: should execute function when clicking on &quot;Open&quot;" name="Test Cases for Multi Action Button Group: should execute function when clicking on &quot;Open&quot;" time="0.015">
    </testcase>
    <testcase classname="Test Cases for Multi Action Button Group: should redirect to Trade page after &quot;Open&quot; button is clicked" name="Test Cases for Multi Action Button Group: should redirect to Trade page after &quot;Open&quot; button is clicked" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="AddOptionsAccount" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:47" time="0.609" tests="5">
    <testcase classname="AddOptionsAccount should render correctly" name="AddOptionsAccount should render correctly" time="0.015">
    </testcase>
    <testcase classname="AddOptionsAccount should render the proper text" name="AddOptionsAccount should render the proper text" time="0.01">
    </testcase>
    <testcase classname="AddOptionsAccount should call openRealAccountSignup when button is clicked" name="AddOptionsAccount should call openRealAccountSignup when button is clicked" time="0.005">
    </testcase>
    <testcase classname="AddOptionsAccount should call openRealAccountSignup with maltainvest when button is clicked and user is eu" name="AddOptionsAccount should call openRealAccountSignup with maltainvest when button is clicked and user is eu" time="0.005">
    </testcase>
    <testcase classname="AddOptionsAccount should open the setShouldShowCooldownModal" name="AddOptionsAccount should open the setShouldShowCooldownModal" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="DemoAccountCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:47" time="0.724" tests="3">
    <testcase classname="DemoAccountCard should render correctly" name="DemoAccountCard should render correctly" time="0.023">
    </testcase>
    <testcase classname="DemoAccountCard should render correctly with the correct balance and text" name="DemoAccountCard should render correctly with the correct balance and text" time="0.009">
    </testcase>
    <testcase classname="DemoAccountCard should render the reset balance button when the balance is not 10,000" name="DemoAccountCard should render the reset balance button when the balance is not 10,000" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="TransferAccountSelector" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:48" time="0.591" tests="5">
    <testcase classname="TransferAccountSelector Should render placeholder, if there is no selected account" name="TransferAccountSelector Should render placeholder, if there is no selected account" time="0.016">
    </testcase>
    <testcase classname="TransferAccountSelector Should render WalletTransferTile if the account was selected" name="TransferAccountSelector Should render WalletTransferTile if the account was selected" time="0.006">
    </testcase>
    <testcase classname="TransferAccountSelector Should render account selector transfer tile with default values default" name="TransferAccountSelector Should render account selector transfer tile with default values default" time="0.002">
    </testcase>
    <testcase classname="TransferAccountSelector Should render TransferAccountList when the user is clicking on Transfer selector" name="TransferAccountSelector Should render TransferAccountList when the user is clicking on Transfer selector" time="0.015">
    </testcase>
    <testcase classname="TransferAccountSelector Should render proper label" name="TransferAccountSelector Should render proper label" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="BalanceText" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:48" time="0.807" tests="7">
    <testcase classname="BalanceText should render the component" name="BalanceText should render the component" time="0.015">
    </testcase>
    <testcase classname="BalanceText should render the correct balance and currency" name="BalanceText should render the correct balance and currency" time="0.007">
    </testcase>
    <testcase classname="BalanceText should render the correct div class for dotted underline_style" name="BalanceText should render the correct div class for dotted underline_style" time="0.007">
    </testcase>
    <testcase classname="BalanceText should have classname ending with demo if user has selected_account_type demo and has an active real account " name="BalanceText should have classname ending with demo if user has selected_account_type demo and has an active real account " time="0.003">
    </testcase>
    <testcase classname="BalanceText should have classname ending with real if user has selected_account_type demo and has an active real account " name="BalanceText should have classname ending with real if user has selected_account_type demo and has an active real account " time="0.007">
    </testcase>
    <testcase classname="BalanceText should not have classname if selected_account_type is empty " name="BalanceText should not have classname if selected_account_type is empty " time="0.003">
    </testcase>
    <testcase classname="BalanceText should have classname as container if underline_style is none" name="BalanceText should have classname as container if underline_style is none" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="TransferAccountList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:48" time="0.586" tests="3">
    <testcase classname="TransferAccountList Should render proper titles of transfer accounts" name="TransferAccountList Should render proper titles of transfer accounts" time="0.021">
    </testcase>
    <testcase classname="TransferAccountList Should render proper amount of transfer accounts" name="TransferAccountList Should render proper amount of transfer accounts" time="0.005">
    </testcase>
    <testcase classname="TransferAccountList Should render transfer hint for Wallets account list" name="TransferAccountList Should render transfer hint for Wallets account list" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="WalletTransferTile" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:48" time="0.62" tests="7">
    <testcase classname="WalletTransferTile Should render merged icon (App with Wallet)" name="WalletTransferTile Should render merged icon (App with Wallet)" time="0.014">
    </testcase>
    <testcase classname="WalletTransferTile Should render single wallet icon, if there is wallet account type" name="WalletTransferTile Should render single wallet icon, if there is wallet account type" time="0.005">
    </testcase>
    <testcase classname="WalletTransferTile Should render jurisdiction in mobile view" name="WalletTransferTile Should render jurisdiction in mobile view" time="0.004">
    </testcase>
    <testcase classname="WalletTransferTile Should render jurisdiction in desktop view" name="WalletTransferTile Should render jurisdiction in desktop view" time="0.004">
    </testcase>
    <testcase classname="WalletTransferTile Should render proper account label" name="WalletTransferTile Should render proper account label" time="0.002">
    </testcase>
    <testcase classname="WalletTransferTile Should render proper account balance" name="WalletTransferTile Should render proper account balance" time="0.003">
    </testcase>
    <testcase classname="WalletTransferTile Should trigger onClick callback when the user is clicking on Wallet tile" name="WalletTransferTile Should trigger onClick callback when the user is clicking on Wallet tile" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="WalletTransfer" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:48" time="0.69" tests="1">
    <testcase classname="WalletTransfer Should render two amount inputs and two transfer account selectors" name="WalletTransfer Should render two amount inputs and two transfer account selectors" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="MainTitleBar" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:48" time="0.767" tests="4">
    <testcase classname="MainTitleBar should render the component" name="MainTitleBar should render the component" time="0.026">
    </testcase>
    <testcase classname="MainTitleBar should render the correct title text" name="MainTitleBar should render the correct title text" time="0.01">
    </testcase>
    <testcase classname="MainTitleBar should show total assets loader when platforms are not yet loaded" name="MainTitleBar should show total assets loader when platforms are not yet loaded" time="0.006">
    </testcase>
    <testcase classname="MainTitleBar should render the total assets text when platforms are loaded" name="MainTitleBar should render the total assets text when platforms are loaded" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="EmptyState" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:48" time="0.63" tests="2">
    <testcase classname="EmptyState should render correctly" name="EmptyState should render correctly" time="0.036">
    </testcase>
    <testcase classname="EmptyState should render correctly with the correct text" name="EmptyState should render correctly with the correct text" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="AccountTypeDropdown" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:48" time="0.711" tests="4">
    <testcase classname="AccountTypeDropdown should render the component" name="AccountTypeDropdown should render the component" time="0.025">
    </testcase>
    <testcase classname="AccountTypeDropdown should show real account type" name="AccountTypeDropdown should show real account type" time="0.006">
    </testcase>
    <testcase classname="AccountTypeDropdown should show demo account type" name="AccountTypeDropdown should show demo account type" time="0.004">
    </testcase>
    <testcase classname="AccountTypeDropdown should change to demo account type" name="AccountTypeDropdown should change to demo account type" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="WalletModalHeader" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:49" time="0.596" tests="2">
    <testcase classname="WalletModalHeader Should render header with proper title, balance, badge and icons" name="WalletModalHeader Should render header with proper title, balance, badge and icons" time="0.018">
    </testcase>
    <testcase classname="WalletModalHeader Should trigger onClose callback when the user clicked on the cross close button" name="WalletModalHeader Should trigger onClose callback when the user clicked on the cross close button" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletsMigrationFailed /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:49" time="0.768" tests="2">
    <testcase classname="&lt;WalletsMigrationFailed /&gt; Should render the Modal" name="&lt;WalletsMigrationFailed /&gt; Should render the Modal" time="0.021">
    </testcase>
    <testcase classname="&lt;WalletsMigrationFailed /&gt; Should not render the Modal if is_wallet_migration_failed is false" name="&lt;WalletsMigrationFailed /&gt; Should not render the Modal if is_wallet_migration_failed is false" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="WalletModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:49" time="0.742" tests="2">
    <testcase classname="WalletModal Should render cashier modal if is_wallet_modal_visible is true" name="WalletModal Should render cashier modal if is_wallet_modal_visible is true" time="0.017">
    </testcase>
    <testcase classname="WalletModal Should not render cashier modal and show loader if authorize is false" name="WalletModal Should not render cashier modal and show loader if authorize is false" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="WalletModalBody" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:49" time="0.749" tests="4">
    <testcase classname="WalletModalBody Should render proper tabs for demo wallet" name="WalletModalBody Should render proper tabs for demo wallet" time="0.032">
    </testcase>
    <testcase classname="WalletModalBody Should render proper content under the Transfer tab" name="WalletModalBody Should render proper content under the Transfer tab" time="0.024">
    </testcase>
    <testcase classname="WalletModalBody Should trigger setWalletModalActiveTab callback when the user clicked on the tab" name="WalletModalBody Should trigger setWalletModalActiveTab callback when the user clicked on the tab" time="0.014">
    </testcase>
    <testcase classname="WalletModalBody Should trigger contentScrollHandler callback when the user scrolls the content" name="WalletModalBody Should trigger contentScrollHandler callback when the user scrolls the content" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="WalletsIntroComponent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:49" time="0.705" tests="3">
    <testcase classname="WalletsIntroComponent should render Wallet Intro Component" name="WalletsIntroComponent should render Wallet Intro Component" time="0.013">
    </testcase>
    <testcase classname="WalletsIntroComponent should render icon" name="WalletsIntroComponent should render icon" time="0.006">
    </testcase>
    <testcase classname="WalletsIntroComponent should render title, description and bullets" name="WalletsIntroComponent should render title, description and bullets" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RealWalletsUpgrade /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:49" time="0.782" tests="2">
    <testcase classname="&lt;RealWalletsUpgrade /&gt; should render the Modal" name="&lt;RealWalletsUpgrade /&gt; should render the Modal" time="0.046">
    </testcase>
    <testcase classname="&lt;RealWalletsUpgrade /&gt; should not render the Modal if is_real_wallets_upgrade_on is false" name="&lt;RealWalletsUpgrade /&gt; should not render the Modal if is_real_wallets_upgrade_on is false" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="ReadyToUpgradeWallets" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:49" time="0.704" tests="6">
    <testcase classname="ReadyToUpgradeWallets should render ReadyToUpgradeWallets component" name="ReadyToUpgradeWallets should render ReadyToUpgradeWallets component" time="0.038">
    </testcase>
    <testcase classname="ReadyToUpgradeWallets should render checkbox" name="ReadyToUpgradeWallets should render checkbox" time="0.024">
    </testcase>
    <testcase classname="ReadyToUpgradeWallets should render proper info sections for non-eu user" name="ReadyToUpgradeWallets should render proper info sections for non-eu user" time="0.013">
    </testcase>
    <testcase classname="ReadyToUpgradeWallets should render proper info sections for eu user with different content flags should render proper info sections for eu user with eu_demo content flag" name="ReadyToUpgradeWallets should render proper info sections for eu user with different content flags should render proper info sections for eu user with eu_demo content flag" time="0.014">
    </testcase>
    <testcase classname="ReadyToUpgradeWallets should render proper info sections for eu user with different content flags should render proper info sections for eu user with eu_real content flag" name="ReadyToUpgradeWallets should render proper info sections for eu user with different content flags should render proper info sections for eu user with eu_real content flag" time="0.009">
    </testcase>
    <testcase classname="ReadyToUpgradeWallets should render proper info sections for eu user with different content flags should render proper info sections for eu user with low_risk_cr_eu content flag" name="ReadyToUpgradeWallets should render proper info sections for eu user with different content flags should render proper info sections for eu user with low_risk_cr_eu content flag" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OpenPositionsSVGModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:49" time="0.674" tests="10">
    <testcase classname="&lt;OpenPositionsSVGModal/&gt; should render open_order_position_status modal" name="&lt;OpenPositionsSVGModal/&gt; should render open_order_position_status modal" time="0.016">
    </testcase>
    <testcase classname="&lt;OpenPositionsSVGModal/&gt; should render title correctly when status is migrated_with_position" name="&lt;OpenPositionsSVGModal/&gt; should render title correctly when status is migrated_with_position" time="0.007">
    </testcase>
    <testcase classname="&lt;OpenPositionsSVGModal/&gt; should render title correctly when status is migrated_without_position" name="&lt;OpenPositionsSVGModal/&gt; should render title correctly when status is migrated_without_position" time="0.005">
    </testcase>
    <testcase classname="&lt;OpenPositionsSVGModal/&gt; should render modal content correctly when status is migrated_with_position and user migrates to BVI" name="&lt;OpenPositionsSVGModal/&gt; should render modal content correctly when status is migrated_with_position and user migrates to BVI" time="0.004">
    </testcase>
    <testcase classname="&lt;OpenPositionsSVGModal/&gt; should render modal content correctly when status is migrated_with_position and user migrates to Vanuatu" name="&lt;OpenPositionsSVGModal/&gt; should render modal content correctly when status is migrated_with_position and user migrates to Vanuatu" time="0.005">
    </testcase>
    <testcase classname="&lt;OpenPositionsSVGModal/&gt; should render modal content correctly when status is migrated_with_position and market_type is derived" name="&lt;OpenPositionsSVGModal/&gt; should render modal content correctly when status is migrated_with_position and market_type is derived" time="0.004">
    </testcase>
    <testcase classname="&lt;OpenPositionsSVGModal/&gt; should render modal content correctly when status is migrated_without_position and market_type is derived" name="&lt;OpenPositionsSVGModal/&gt; should render modal content correctly when status is migrated_without_position and market_type is derived" time="0.01">
    </testcase>
    <testcase classname="&lt;OpenPositionsSVGModal/&gt; should render modal content correctly when status is migrated_without_position and market_type is financial" name="&lt;OpenPositionsSVGModal/&gt; should render modal content correctly when status is migrated_without_position and market_type is financial" time="0.003">
    </testcase>
    <testcase classname="&lt;OpenPositionsSVGModal/&gt; should render proper buttons" name="&lt;OpenPositionsSVGModal/&gt; should render proper buttons" time="0.021">
    </testcase>
    <testcase classname="&lt;OpenPositionsSVGModal/&gt; should call setModalOpen on OK button click" name="&lt;OpenPositionsSVGModal/&gt; should call setModalOpen on OK button click" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DemoResetBalance /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:49" time="0.668" tests="5">
    <testcase classname="&lt;DemoResetBalance /&gt; should render demo reset balance component correctly" name="&lt;DemoResetBalance /&gt; should render demo reset balance component correctly" time="0.038">
    </testcase>
    <testcase classname="&lt;DemoResetBalance /&gt; should disable reset balance button if the balance is equal to 10000 usd" name="&lt;DemoResetBalance /&gt; should disable reset balance button if the balance is equal to 10000 usd" time="0.011">
    </testcase>
    <testcase classname="&lt;DemoResetBalance /&gt; should call reset balance API when click on Reset balance" name="&lt;DemoResetBalance /&gt; should call reset balance API when click on Reset balance" time="0.025">
    </testcase>
    <testcase classname="&lt;DemoResetBalance /&gt; should change tab when click on transfer funds button" name="&lt;DemoResetBalance /&gt; should change tab when click on transfer funds button" time="0.016">
    </testcase>
    <testcase classname="&lt;DemoResetBalance /&gt; should show success message and transfer funds button if reset balance is reset successfully" name="&lt;DemoResetBalance /&gt; should show success message and transfer funds button if reset balance is reset successfully" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="GetMoreAccounts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:50" time="0.58" tests="2">
    <testcase classname="GetMoreAccounts should render the component" name="GetMoreAccounts should render the component" time="0.012">
    </testcase>
    <testcase classname="GetMoreAccounts should call the onClick prop when clicked" name="GetMoreAccounts should call the onClick prop when clicked" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletCardsCarousel /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:50" time="0.845" tests="3">
    <testcase classname="&lt;WalletCardsCarousel /&gt; Should render slider" name="&lt;WalletCardsCarousel /&gt; Should render slider" time="0.023">
    </testcase>
    <testcase classname="&lt;WalletCardsCarousel /&gt; Should render buttons for REAL" name="&lt;WalletCardsCarousel /&gt; Should render buttons for REAL" time="0.055">
    </testcase>
    <testcase classname="&lt;WalletCardsCarousel /&gt; Should render buttons for DEMO" name="&lt;WalletCardsCarousel /&gt; Should render buttons for DEMO" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="WalletJurisdictionBadge" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:50" time="0.753" tests="3">
    <testcase classname="WalletJurisdictionBadge Should render demo badge" name="WalletJurisdictionBadge Should render demo badge" time="0.015">
    </testcase>
    <testcase classname="WalletJurisdictionBadge Should render svg badge" name="WalletJurisdictionBadge Should render svg badge" time="0.002">
    </testcase>
    <testcase classname="WalletJurisdictionBadge Should render malta badge" name="WalletJurisdictionBadge Should render malta badge" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="WalletWithdrawal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:50" time="0.761" tests="1">
    <testcase classname="WalletWithdrawal should render the component" name="WalletWithdrawal should render the component" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="AddWalletCard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:50" time="0.772" tests="3">
    <testcase classname="AddWalletCard should render currency card" name="AddWalletCard should render currency card" time="0.045">
    </testcase>
    <testcase classname="AddWalletCard should disabled button when it is disabled" name="AddWalletCard should disabled button when it is disabled" time="0.025">
    </testcase>
    <testcase classname="AddWalletCard should show USDT instead of UST for UST currency" name="AddWalletCard should show USDT instead of UST for UST currency" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="AddMoreWallets" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:50" time="0.719" tests="4">
    <testcase classname="AddMoreWallets should render the component without errors" name="AddMoreWallets should render the component without errors" time="0.019">
    </testcase>
    <testcase classname="AddMoreWallets should render the title correctly" name="AddMoreWallets should render the title correctly" time="0.004">
    </testcase>
    <testcase classname="AddMoreWallets should render the carousel" name="AddMoreWallets should render the carousel" time="0.003">
    </testcase>
    <testcase classname="AddMoreWallets should render the wallet add card" name="AddMoreWallets should render the wallet add card" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;WalletsBanner /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:50" time="0.739" tests="17">
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is eligible: &lt;WalletsBannerUpgrade /&gt; Should render upgrade now button" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is eligible: &lt;WalletsBannerUpgrade /&gt; Should render upgrade now button" time="0.022">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is eligible: &lt;WalletsBannerUpgrade /&gt; Should render image properly for desktop" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is eligible: &lt;WalletsBannerUpgrade /&gt; Should render image properly for desktop" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is eligible: &lt;WalletsBannerUpgrade /&gt; Should render image properly for mobile" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is eligible: &lt;WalletsBannerUpgrade /&gt; Should render image properly for mobile" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render right title" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render right title" time="0.005">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render loading dots" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render loading dots" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render image properly for desktop for Non-EU" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render image properly for desktop for Non-EU" time="0.007">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render image properly for mobile for Non-EU" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render image properly for mobile for Non-EU" time="0.004">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render image properly for desktop for EU" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render image properly for desktop for EU" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render image properly for mobile for EU" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is in_progress: &lt;WalletsBannerUpgrading /&gt; Should render image properly for mobile for EU" time="0.007">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render right title" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render right title" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render tick" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render tick" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render right button" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render right button" time="0.002">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render image properly for desktop for Non-EU" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render image properly for desktop for Non-EU" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render image properly for mobile for Non-EU" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render image properly for mobile for Non-EU" time="0.002">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render image properly for desktop for EU" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render image properly for desktop for EU" time="0.007">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render image properly for mobile for EU" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should render image properly for mobile for EU" time="0.003">
    </testcase>
    <testcase classname="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should call logout function when click on button" name="&lt;WalletsBanner /&gt; Should render properly with right banner if status is migrated: &lt;WalletsBannerReady /&gt; Should call logout function when click on button" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="useStatesList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:50" time="0.789" tests="3">
    <testcase classname="useStatesList should return an empty array when the store is not ready" name="useStatesList should return an empty array when the store is not ready" time="0.008">
    </testcase>
    <testcase classname="useStatesList should return data fetched along with correct status" name="useStatesList should return data fetched along with correct status" time="0.001">
    </testcase>
    <testcase classname="useStatesList should call the useQuery with options if passed" name="useStatesList should call the useQuery with options if passed" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="useAdvertiserAdverts" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:50" time="0.806" tests="3">
    <testcase classname="useAdvertiserAdverts should return undefined when there is no data" name="useAdvertiserAdverts should return undefined when there is no data" time="0.012">
    </testcase>
    <testcase classname="useAdvertiserAdverts should return adverts list with the correct details" name="useAdvertiserAdverts should return adverts list with the correct details" time="0.015">
    </testcase>
    <testcase classname="useAdvertiserAdverts should call fetchNextPage when loadMoreAdverts is called" name="useAdvertiserAdverts should call fetchNextPage when loadMoreAdverts is called" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useKycAuthStatus" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:51" time="0.734" tests="1">
    <testcase classname="useKycAuthStatus should return kyc_auth_status" name="useKycAuthStatus should return kyc_auth_status" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="useDynamicLeverage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:51" time="0.731" tests="2">
    <testcase classname="useDynamicLeverage should return modified data and rest properties" name="useDynamicLeverage should return modified data and rest properties" time="0.01">
    </testcase>
    <testcase classname="useDynamicLeverage should handle cases where data is not available" name="useDynamicLeverage should handle cases where data is not available" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useMutation" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:51" time="0.698" tests="1">
    <testcase classname="useMutation should call verify_email and get 1 in response" name="useMutation should call verify_email and get 1 in response" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="useActiveWalletBalance" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:51" time="0.457" tests="3">
    <testcase classname="useActiveWalletBalance returns correct displayBalance" name="useActiveWalletBalance returns correct displayBalance" time="0.016">
    </testcase>
    <testcase classname="useActiveWalletBalance updates the display balance with data update" name="useActiveWalletBalance updates the display balance with data update" time="0.014">
    </testcase>
    <testcase classname="useActiveWalletBalance displays correct number of decimal places" name="useActiveWalletBalance displays correct number of decimal places" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="useQuery" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:51" time="0.366" tests="1">
    <testcase classname="useQuery should call ping and get pong in response" name="useQuery should call ping and get pong in response" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="usePaginatedFetch" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:52" time="0.361" tests="1">
    <testcase classname="usePaginatedFetch should call p2p_advert_list and get data in response" name="usePaginatedFetch should call p2p_advert_list and get data in response" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="useAdvertList" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:51" time="0.818" tests="2">
    <testcase classname="useAdvertList should return undefined if there is no response" name="useAdvertList should return undefined if there is no response" time="0.01">
    </testcase>
    <testcase classname="useAdvertList should return the p2p_advert_list object from response" name="useAdvertList should return the p2p_advert_list object from response" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="displayMoney" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:52" time="0.243" tests="7">
    <testcase classname="displayMoney should work for en-US, USD" name="displayMoney should work for en-US, USD" time="0.002">
    </testcase>
    <testcase classname="displayMoney should work for en-US, USD; round decimals up" name="displayMoney should work for en-US, USD; round decimals up" time="0.001">
    </testcase>
    <testcase classname="displayMoney should work for de-GE, USD" name="displayMoney should work for de-GE, USD" time="0">
    </testcase>
    <testcase classname="displayMoney should work for en-IN, USD" name="displayMoney should work for en-IN, USD" time="0.001">
    </testcase>
    <testcase classname="displayMoney should work for en-US, BTC" name="displayMoney should work for en-US, BTC" time="0">
    </testcase>
    <testcase classname="displayMoney should work for de-GE, BTC" name="displayMoney should work for de-GE, BTC" time="0.001">
    </testcase>
    <testcase classname="displayMoney should work for en_US, USD (invalid locale)" name="displayMoney should work for en_US, USD (invalid locale)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useJurisdictionStatus" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:52" time="0.496" tests="11">
    <testcase classname="useJurisdictionStatus for BVI/Labuan, should have a failed verification status if MT5 account status has failed and IDV status is rejected" name="useJurisdictionStatus for BVI/Labuan, should have a failed verification status if MT5 account status has failed and IDV status is rejected" time="0.012">
    </testcase>
    <testcase classname="useJurisdictionStatus for BVI/Labuan, should have a pending verification status if MT5 account status is currently pending verification and IDV status is pending" name="useJurisdictionStatus for BVI/Labuan, should have a pending verification status if MT5 account status is currently pending verification and IDV status is pending" time="0.013">
    </testcase>
    <testcase classname="useJurisdictionStatus for BVI/Labuan, should have a pending verification status if IDV attempts failed and the next compatible service Onfido is pending" name="useJurisdictionStatus for BVI/Labuan, should have a pending verification status if IDV attempts failed and the next compatible service Onfido is pending" time="0.003">
    </testcase>
    <testcase classname="useJurisdictionStatus for BVI/Labuan, should have a failed verification status if IDV is revoked" name="useJurisdictionStatus for BVI/Labuan, should have a failed verification status if IDV is revoked" time="0.003">
    </testcase>
    <testcase classname="useJurisdictionStatus for BVI/Labuan, should have a verified verification status if IDV is verified" name="useJurisdictionStatus for BVI/Labuan, should have a verified verification status if IDV is verified" time="0.003">
    </testcase>
    <testcase classname="useJurisdictionStatus for Labuan, should have a failed verification status if is_authenticated_with_idv_photoid is present in account status" name="useJurisdictionStatus for Labuan, should have a failed verification status if is_authenticated_with_idv_photoid is present in account status" time="0.006">
    </testcase>
    <testcase classname="useJurisdictionStatus for SVG, status should not be applicable" name="useJurisdictionStatus for SVG, status should not be applicable" time="0.002">
    </testcase>
    <testcase classname="useJurisdictionStatus for Vanuatu, status should be failed if MT5 account status is proof_failed" name="useJurisdictionStatus for Vanuatu, status should be failed if MT5 account status is proof_failed" time="0.003">
    </testcase>
    <testcase classname="useJurisdictionStatus for Vanuatu, status should be pending if MT5 account status is verification_pending" name="useJurisdictionStatus for Vanuatu, status should be pending if MT5 account status is verification_pending" time="0.003">
    </testcase>
    <testcase classname="useJurisdictionStatus for Vanuatu, status should not be failed/pending if MT5 account status is not equal to proof_failed or verification_pending" name="useJurisdictionStatus for Vanuatu, status should not be failed/pending if MT5 account status is not equal to proof_failed or verification_pending" time="0.003">
    </testcase>
    <testcase classname="useJurisdictionStatus for Vanuatu, should have a verified verification status if IDV is verified" name="useJurisdictionStatus for Vanuatu, should have a verified verification status if IDV is verified" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="convertToBase64()" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:52" time="0.251" tests="8">
    <testcase classname="convertToBase64() should convert a File to base64" name="convertToBase64() should convert a File to base64" time="0.002">
    </testcase>
    <testcase classname="convertToBase64() should handle empty files" name="convertToBase64() should handle empty files" time="0.001">
    </testcase>
    <testcase classname="convertToBase64() should handle files with special characters in their names" name="convertToBase64() should handle files with special characters in their names" time="0.002">
    </testcase>
    <testcase classname="convertToBase64() should handle non-image files" name="convertToBase64() should handle non-image files" time="0.002">
    </testcase>
    <testcase classname="convertToBase64() should handle files with no type information" name="convertToBase64() should handle files with no type information" time="0.002">
    </testcase>
    <testcase classname="isSupportedImageFormat() should return true for supported image formats" name="isSupportedImageFormat() should return true for supported image formats" time="0.003">
    </testcase>
    <testcase classname="isSupportedImageFormat() should return false for unsupported image formats" name="isSupportedImageFormat() should return false for unsupported image formats" time="0.001">
    </testcase>
    <testcase classname="isSupportedImageFormat() should handle edge cases" name="isSupportedImageFormat() should handle edge cases" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getQueryKeys()" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:52" time="0.324" tests="4">
    <testcase classname="getQueryKeys() it should return object without req_id" name="getQueryKeys() it should return object without req_id" time="0.002">
    </testcase>
    <testcase classname="getQueryKeys() it should return ordered props" name="getQueryKeys() it should return ordered props" time="0">
    </testcase>
    <testcase classname="getQueryKeys() it should return consistent ordered props even if props are passed in different order" name="getQueryKeys() it should return consistent ordered props even if props are passed in different order" time="0.001">
    </testcase>
    <testcase classname="getQueryKeys() it should return only the name if no props is passed" name="getQueryKeys() it should return only the name if no props is passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="generatePlaceholderText" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:52" time="0.837" tests="37">
    <testcase classname="generatePlaceholderText should return the correct placeholder text for drivers license" name="generatePlaceholderText should return the correct placeholder text for drivers license" time="0.002">
    </testcase>
    <testcase classname="generatePlaceholderText should return the correct placeholder text for ssnit" name="generatePlaceholderText should return the correct placeholder text for ssnit" time="0.001">
    </testcase>
    <testcase classname="generatePlaceholderText should return the correct placeholder text for id card" name="generatePlaceholderText should return the correct placeholder text for id card" time="0.007">
    </testcase>
    <testcase classname="generatePlaceholderText should return the correct placeholder text for passport" name="generatePlaceholderText should return the correct placeholder text for passport" time="0">
    </testcase>
    <testcase classname="generatePlaceholderText should return the correct placeholder text for NIN for Uganda" name="generatePlaceholderText should return the correct placeholder text for NIN for Uganda" time="0.001">
    </testcase>
    <testcase classname="documentAdditionalError should set the correct additional document error when format is incorrect" name="documentAdditionalError should set the correct additional document error when format is incorrect" time="0.001">
    </testcase>
    <testcase classname="documentAdditionalError should set the correct additional document error when value is not provided" name="documentAdditionalError should set the correct additional document error when value is not provided" time="0.001">
    </testcase>
    <testcase classname="documentAdditionalError should return no error when input matches the config" name="documentAdditionalError should return no error when input matches the config" time="0">
    </testcase>
    <testcase classname="shouldShowIdentityInformation should not show IDV if the country is maltainvest" name="shouldShowIdentityInformation should not show IDV if the country is maltainvest" time="0.001">
    </testcase>
    <testcase classname="shouldShowIdentityInformation should not show IDV if the country dosen&apos;t support it" name="shouldShowIdentityInformation should not show IDV if the country dosen&apos;t support it" time="0">
    </testcase>
    <testcase classname="shouldShowIdentityInformation should show IDV if the country is not maltainvest and supports idv" name="shouldShowIdentityInformation should show IDV if the country is not maltainvest and supports idv" time="0.001">
    </testcase>
    <testcase classname="shouldShowIdentityInformation should not show IDV if the account status has skip_idv status" name="shouldShowIdentityInformation should not show IDV if the account status has skip_idv status" time="0">
    </testcase>
    <testcase classname="getDocumentData should return the empty document data" name="getDocumentData should return the empty document data" time="0.001">
    </testcase>
    <testcase classname="getDocumentData should return correct document data for Zimbabwe" name="getDocumentData should return correct document data for Zimbabwe" time="0.001">
    </testcase>
    <testcase classname="getDocumentData should return default document data for other countries" name="getDocumentData should return default document data for other countries" time="0">
    </testcase>
    <testcase classname="getRegex should return the correct regex for Zimbabwe" name="getRegex should return the correct regex for Zimbabwe" time="0">
    </testcase>
    <testcase classname="preventEmptyClipboardPaste should not paste any data when clipboard is empty" name="preventEmptyClipboardPaste should not paste any data when clipboard is empty" time="0">
    </testcase>
    <testcase classname="preventEmptyClipboardPaste should not paste any data when clipboard is empty" name="preventEmptyClipboardPaste should not paste any data when clipboard is empty" time="0.001">
    </testcase>
    <testcase classname="isFieldImmutable should return false if field is mutable" name="isFieldImmutable should return false if field is mutable" time="0">
    </testcase>
    <testcase classname="isFieldImmutable should return true if field is immutable" name="isFieldImmutable should return true if field is immutable" time="0">
    </testcase>
    <testcase classname="getExampleFormat should return the correct example format for Zimbabwe" name="getExampleFormat should return the correct example format for Zimbabwe" time="0.001">
    </testcase>
    <testcase classname="getExampleFormat should return empty string when no example format is provided" name="getExampleFormat should return empty string when no example format is provided" time="0">
    </testcase>
    <testcase classname="isDocumentNumberValid should return error message for empty document number, when document_type text Passport" name="isDocumentNumberValid should return error message for empty document number, when document_type text Passport" time="0.008">
    </testcase>
    <testcase classname="isDocumentNumberValid should return error message for empty Driver License, when document_type text Drivers License" name="isDocumentNumberValid should return error message for empty Driver License, when document_type text Drivers License" time="0.005">
    </testcase>
    <testcase classname="isDocumentNumberValid should return error message for empty SSNIT, when document_type text Social Security and National Insurance Trust" name="isDocumentNumberValid should return error message for empty SSNIT, when document_type text Social Security and National Insurance Trust" time="0.002">
    </testcase>
    <testcase classname="isDocumentNumberValid should return Please enter valid ID, when user inputs same with example" name="isDocumentNumberValid should return Please enter valid ID, when user inputs same with example" time="0">
    </testcase>
    <testcase classname="isDocumentNumberValid should return undefined, when user inputs value correctly" name="isDocumentNumberValid should return undefined, when user inputs value correctly" time="0.001">
    </testcase>
    <testcase classname="getOnfidoSupportedLocaleCode should return the correct language tag for German" name="getOnfidoSupportedLocaleCode should return the correct language tag for German" time="0">
    </testcase>
    <testcase classname="getOnfidoSupportedLocaleCode should return the correct language tag for Indonesian" name="getOnfidoSupportedLocaleCode should return the correct language tag for Indonesian" time="0.001">
    </testcase>
    <testcase classname="getOnfidoSupportedLocaleCode should return the correct language tag for Chinese" name="getOnfidoSupportedLocaleCode should return the correct language tag for Chinese" time="0">
    </testcase>
    <testcase classname="verifyFields should return date field in the list when the error is date of birth" name="verifyFields should return date field in the list when the error is date of birth" time="0">
    </testcase>
    <testcase classname="verifyFields should return first and last name in the list when the error is name" name="verifyFields should return first and last name in the list when the error is name" time="0">
    </testcase>
    <testcase classname="verifyFields should return first name, last name and dob in the list when the the error is regarding rejection" name="verifyFields should return first name, last name and dob in the list when the the error is regarding rejection" time="0.001">
    </testcase>
    <testcase classname="isSpecialPaymentMethod should return false if payment method icon is IcCreditCard" name="isSpecialPaymentMethod should return false if payment method icon is IcCreditCard" time="0.001">
    </testcase>
    <testcase classname="isSpecialPaymentMethod should return true if payment method icon is IcOnlineNaira" name="isSpecialPaymentMethod should return true if payment method icon is IcOnlineNaira" time="0">
    </testcase>
    <testcase classname="isSpecialPaymentMethod should return true if payment method icon is IcAstroPayLight" name="isSpecialPaymentMethod should return true if payment method icon is IcAstroPayLight" time="0">
    </testcase>
    <testcase classname="isSpecialPaymentMethod should return true if payment method icon is IcAstroPayDark" name="isSpecialPaymentMethod should return true if payment method icon is IcAstroPayDark" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ExampleLink" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:52" time="1.392" tests="2">
    <testcase classname="ExampleLink renders ExampleLink component" name="ExampleLink renders ExampleLink component" time="0.013">
    </testcase>
    <testcase classname="ExampleLink should render SampleCreditCardModal when clicked" name="ExampleLink should render SampleCreditCardModal when clicked" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="Card" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:52" time="1.42" tests="3">
    <testcase classname="Card should render payment method card" name="Card should render payment method card" time="0.013">
    </testcase>
    <testcase classname="Card should render expanded card when clicked" name="Card should render expanded card when clicked" time="0.02">
    </testcase>
    <testcase classname="Card should close the rendered expanded card when clicked" name="Card should close the rendered expanded card when clicked" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="expanded-card.jsx" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:52" time="1.337" tests="3">
    <testcase classname="expanded-card.jsx should display correct identifier" name="expanded-card.jsx should display correct identifier" time="0.021">
    </testcase>
    <testcase classname="expanded-card.jsx should show example link for credit/debit card and render the correct identifier label" name="expanded-card.jsx should show example link for credit/debit card and render the correct identifier label" time="0.007">
    </testcase>
    <testcase classname="expanded-card.jsx should render payment method link in the description" name="expanded-card.jsx should render payment method link in the description" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="TradingHubLogout" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:52" time="1.306" tests="2">
    <testcase classname="TradingHubLogout should render logout tab" name="TradingHubLogout should render logout tab" time="0.013">
    </testcase>
    <testcase classname="TradingHubLogout should invoke handleOnLogout when logout tab is clicked" name="TradingHubLogout should invoke handleOnLogout when logout tab is clicked" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="personal-details-config" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:53" time="0.407" tests="4">
    <testcase classname="personal-details-config should return account tax residence as default value if it is already set" name="personal-details-config should return account tax residence as default value if it is already set" time="0.004">
    </testcase>
    <testcase classname="personal-details-config should return residence as the default value for MF clients, If the account tax residence is not set" name="personal-details-config should return residence as the default value for MF clients, If the account tax residence is not set" time="0">
    </testcase>
    <testcase classname="personal-details-config should not set default value for CR clients, If the account tax residence is not set" name="personal-details-config should not set default value for CR clients, If the account tax residence is not set" time="0.001">
    </testcase>
    <testcase classname="personal-details-config should include svg in additional fields if client is not high risk for mt5" name="personal-details-config should include svg in additional fields if client is not high risk for mt5" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Account" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:53" time="1.218" tests="2">
    <testcase classname="Account should render account page" name="Account should render account page" time="0.024">
    </testcase>
    <testcase classname="Account should render loader while the client is still logging in" name="Account should render loader while the client is still logging in" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ResetTradingPassword" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:53" time="0.602" tests="2">
    <testcase classname="ResetTradingPassword should render ResetTradingPassword component for MT5" name="ResetTradingPassword should render ResetTradingPassword component for MT5" time="0.019">
    </testcase>
    <testcase classname="ResetTradingPassword should render ResetTradingPassword component for DxTrade" name="ResetTradingPassword should render ResetTradingPassword component for DxTrade" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getStatusBadgeConfig" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:54" time="0.569" tests="7">
    <testcase classname="getStatusBadgeConfig should render pending status" name="getStatusBadgeConfig should render pending status" time="0.015">
    </testcase>
    <testcase classname="getStatusBadgeConfig should render failed status and trigger &quot;Why?&quot;" name="getStatusBadgeConfig should render failed status and trigger &quot;Why?&quot;" time="0.006">
    </testcase>
    <testcase classname="getStatusBadgeConfig should render needs_verification status and redirect to identity by default" name="getStatusBadgeConfig should render needs_verification status and redirect to identity by default" time="0.016">
    </testcase>
    <testcase classname="getStatusBadgeConfig should render migrated_with_position status" name="getStatusBadgeConfig should render migrated_with_position status" time="0.002">
    </testcase>
    <testcase classname="getStatusBadgeConfig should render migrated_without_position status" name="getStatusBadgeConfig should render migrated_without_position status" time="0.003">
    </testcase>
    <testcase classname="getStatusBadgeConfig should render need_verification status and redirect to POA when POI is verified" name="getStatusBadgeConfig should render need_verification status and redirect to POA when POI is verified" time="0.007">
    </testcase>
    <testcase classname="getStatusBadgeConfig should render need_verification status and redirect to POI when POI status is not verified and POA status is not verified" name="getStatusBadgeConfig should render need_verification status and redirect to POI when POI status is not verified and POA status is not verified" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="useSubscription" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:51" time="2.921" tests="1">
    <testcase classname="useSubscription should subscribe to p2p_order_info and get the order updates" name="useSubscription should subscribe to p2p_order_info and get the order updates" time="2.524">
    </testcase>
  </testsuite>
  <testsuite name="generateIDVError" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:54" time="0.372" tests="3">
    <testcase classname="generateIDVError should return Name &amp; DOB mismatch error config" name="generateIDVError should return Name &amp; DOB mismatch error config" time="0.003">
    </testcase>
    <testcase classname="generateIDVError should return Name mismatch error config" name="generateIDVError should return Name mismatch error config" time="0">
    </testcase>
    <testcase classname="generateIDVError should return DOB mismatch error config" name="generateIDVError should return DOB mismatch error config" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="address-details-config" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:54" time="0.348" tests="2">
    <testcase classname="address-details-config should remove the required rule for non-eu clients" name="address-details-config should remove the required rule for non-eu clients" time="0.002">
    </testcase>
    <testcase classname="address-details-config should remove the required rule for eu clients" name="address-details-config should remove the required rule for eu clients" time="0">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelfExclusionFooter /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:54" time="0.597" tests="3">
    <testcase classname="&lt;SelfExclusionFooter /&gt; should not render SelfExclusionFooter component" name="&lt;SelfExclusionFooter /&gt; should not render SelfExclusionFooter component" time="0.006">
    </testcase>
    <testcase classname="&lt;SelfExclusionFooter /&gt; should render SelfExclusionFooter component" name="&lt;SelfExclusionFooter /&gt; should render SelfExclusionFooter component" time="0.011">
    </testcase>
    <testcase classname="&lt;SelfExclusionFooter /&gt; Should trigger click on the button" name="&lt;SelfExclusionFooter /&gt; Should trigger click on the button" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelfExclusionForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:54" time="0.324" tests="2">
    <testcase classname="&lt;SelfExclusionForm /&gt; should render SelfExclusionForm component with SelfExclusionInputs" name="&lt;SelfExclusionForm /&gt; should render SelfExclusionForm component with SelfExclusionInputs" time="0.014">
    </testcase>
    <testcase classname="&lt;SelfExclusionForm /&gt; should render SelfExclusionForm component with SelfExclusionConfirmPage" name="&lt;SelfExclusionForm /&gt; should render SelfExclusionForm component with SelfExclusionConfirmPage" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelfExclusionConfirmLimits /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:54" time="0.67" tests="3">
    <testcase classname="&lt;SelfExclusionConfirmLimits /&gt; should render SelfExclusionConfirmLimits component" name="&lt;SelfExclusionConfirmLimits /&gt; should render SelfExclusionConfirmLimits component" time="0.044">
    </testcase>
    <testcase classname="&lt;SelfExclusionConfirmLimits /&gt; should render SelfExclusionConfirmLimits component with loading status of submit button" name="&lt;SelfExclusionConfirmLimits /&gt; should render SelfExclusionConfirmLimits component with loading status of submit button" time="0.005">
    </testcase>
    <testcase classname="&lt;SelfExclusionConfirmLimits /&gt; Should trigger click on the button" name="&lt;SelfExclusionConfirmLimits /&gt; Should trigger click on the button" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelfExclusionArticleContent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:54" time="0.903" tests="6">
    <testcase classname="&lt;SelfExclusionArticleContent /&gt; should render SelfExclusionArticleContent component with popup" name="&lt;SelfExclusionArticleContent /&gt; should render SelfExclusionArticleContent component with popup" time="0.025">
    </testcase>
    <testcase classname="&lt;SelfExclusionArticleContent /&gt; should render SelfExclusionArticleContent component without button non EU" name="&lt;SelfExclusionArticleContent /&gt; should render SelfExclusionArticleContent component without button non EU" time="0.024">
    </testcase>
    <testcase classname="&lt;SelfExclusionArticleContent /&gt; should render SelfExclusionArticleContent with items component with button and trigger click EU" name="&lt;SelfExclusionArticleContent /&gt; should render SelfExclusionArticleContent with items component with button and trigger click EU" time="0.025">
    </testcase>
    <testcase classname="&lt;SelfExclusionArticleContent /&gt; should render selfExclusionArticleItems component for EU items" name="&lt;SelfExclusionArticleContent /&gt; should render selfExclusionArticleItems component for EU items" time="0.008">
    </testcase>
    <testcase classname="&lt;SelfExclusionArticleContent /&gt; should render SelfExclusionArticleContent component for EU/UK items" name="&lt;SelfExclusionArticleContent /&gt; should render SelfExclusionArticleContent component for EU/UK items" time="0.012">
    </testcase>
    <testcase classname="&lt;SelfExclusionArticleContent /&gt; should render SelfExclusionArticleContent component for EU/UK items with app settings" name="&lt;SelfExclusionArticleContent /&gt; should render SelfExclusionArticleContent component for EU/UK items with app settings" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Routes /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:53" time="1.922" tests="2">
    <testcase classname="&lt;Routes /&gt; should show error messages when &quot;has_error = true&quot;" name="&lt;Routes /&gt; should show error messages when &quot;has_error = true&quot;" time="0.014">
    </testcase>
    <testcase classname="&lt;Routes /&gt; should render &lt;BinaryRoutes /&gt; component when &quot;has_error = false&quot;" name="&lt;Routes /&gt; should render &lt;BinaryRoutes /&gt; component when &quot;has_error = false&quot;" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelfExclusionModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:55" time="0.655" tests="1">
    <testcase classname="&lt;SelfExclusionModal /&gt; should be shown on the page" name="&lt;SelfExclusionModal /&gt; should be shown on the page" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelfExclusionConfirmPage /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:55" time="0.783" tests="7">
    <testcase classname="&lt;SelfExclusionConfirmPage /&gt; should not render SelfExclusionConfirmPage component" name="&lt;SelfExclusionConfirmPage /&gt; should not render SelfExclusionConfirmPage component" time="0.021">
    </testcase>
    <testcase classname="&lt;SelfExclusionConfirmPage /&gt; should render SelfExclusionConfirmPage component with options" name="&lt;SelfExclusionConfirmPage /&gt; should render SelfExclusionConfirmPage component with options" time="0.039">
    </testcase>
    <testcase classname="&lt;SelfExclusionConfirmPage /&gt; Should trigger click on the &quot;Back&quot; icon" name="&lt;SelfExclusionConfirmPage /&gt; Should trigger click on the &quot;Back&quot; icon" time="0.013">
    </testcase>
    <testcase classname="&lt;SelfExclusionConfirmPage /&gt; should render SelfExclusionConfirmPage component for non EU" name="&lt;SelfExclusionConfirmPage /&gt; should render SelfExclusionConfirmPage component for non EU" time="0.05">
    </testcase>
    <testcase classname="&lt;SelfExclusionConfirmPage /&gt; should render SelfExclusionConfirmPage component for EU" name="&lt;SelfExclusionConfirmPage /&gt; should render SelfExclusionConfirmPage component for EU" time="0.008">
    </testcase>
    <testcase classname="&lt;SelfExclusionConfirmPage /&gt; Should trigger click on the &quot;Accept&quot; button for non EU" name="&lt;SelfExclusionConfirmPage /&gt; Should trigger click on the &quot;Accept&quot; button for non EU" time="0.016">
    </testcase>
    <testcase classname="&lt;SelfExclusionConfirmPage /&gt; Should trigger click on the &quot;Confirm my limits&quot; button for EU" name="&lt;SelfExclusionConfirmPage /&gt; Should trigger click on the &quot;Confirm my limits&quot; button for EU" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelfExclusionInputs /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:55" time="1.222" tests="9">
    <testcase classname="&lt;SelfExclusionInputs /&gt; should render SelfExclusionFooter instead of Next Button" name="&lt;SelfExclusionInputs /&gt; should render SelfExclusionFooter instead of Next Button" time="0.07">
    </testcase>
    <testcase classname="&lt;SelfExclusionInputs /&gt; should render &quot;Next&quot; button and trigger click" name="&lt;SelfExclusionInputs /&gt; should render &quot;Next&quot; button and trigger click" time="0.039">
    </testcase>
    <testcase classname="&lt;SelfExclusionInputs /&gt; should render SelfExclusionInputs component with options mlt and should render &quot;Next&quot; button and trigger click" name="&lt;SelfExclusionInputs /&gt; should render SelfExclusionInputs component with options mlt and should render &quot;Next&quot; button and trigger click" time="0.037">
    </testcase>
    <testcase classname="&lt;SelfExclusionInputs /&gt; should render SelfExclusionInputs component with options mx" name="&lt;SelfExclusionInputs /&gt; should render SelfExclusionInputs component with options mx" time="0.032">
    </testcase>
    <testcase classname="&lt;SelfExclusionInputs /&gt; Should trigger handleChange callback when the input field changes in StakeLossAndLimitsInputs" name="&lt;SelfExclusionInputs /&gt; Should trigger handleChange callback when the input field changes in StakeLossAndLimitsInputs" time="0.059">
    </testcase>
    <testcase classname="&lt;SelfExclusionInputs /&gt; Should trigger handleChange callback when the input field changes in SessionAndLoginLimitsInputs" name="&lt;SelfExclusionInputs /&gt; Should trigger handleChange callback when the input field changes in SessionAndLoginLimitsInputs" time="0.063">
    </testcase>
    <testcase classname="&lt;SelfExclusionInputs /&gt; Should trigger handleChange callback when the input field changes in MaximumAccountBalanceAndOpenPositionsInputs" name="&lt;SelfExclusionInputs /&gt; Should trigger handleChange callback when the input field changes in MaximumAccountBalanceAndOpenPositionsInputs" time="0.067">
    </testcase>
    <testcase classname="&lt;SelfExclusionInputs /&gt; Should trigger handleChange callback when the input field changes in MaximumDepositLimitInputs" name="&lt;SelfExclusionInputs /&gt; Should trigger handleChange callback when the input field changes in MaximumDepositLimitInputs" time="0.088">
    </testcase>
    <testcase classname="&lt;SelfExclusionInputs /&gt; Should trigger onChange callback when the date field changes in SessionAndLoginLimitsInputs" name="&lt;SelfExclusionInputs /&gt; Should trigger onChange callback when the date field changes in SessionAndLoginLimitsInputs" time="0.082">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelfExclusionWrapper /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:55" time="0.723" tests="4">
    <testcase classname="&lt;SelfExclusionWrapper /&gt; should render SelfExclusionWrapper component without wrapper" name="&lt;SelfExclusionWrapper /&gt; should render SelfExclusionWrapper component without wrapper" time="0.021">
    </testcase>
    <testcase classname="&lt;SelfExclusionWrapper /&gt; should render SelfExclusionWrapper mobile component without wrapper" name="&lt;SelfExclusionWrapper /&gt; should render SelfExclusionWrapper mobile component without wrapper" time="0.063">
    </testcase>
    <testcase classname="&lt;SelfExclusionWrapper /&gt; should render SelfExclusionWrapper component with wrapper" name="&lt;SelfExclusionWrapper /&gt; should render SelfExclusionWrapper component with wrapper" time="0.007">
    </testcase>
    <testcase classname="&lt;SelfExclusionWrapper /&gt; should render SelfExclusionWrapper mobile component with wrapper" name="&lt;SelfExclusionWrapper /&gt; should render SelfExclusionWrapper mobile component with wrapper" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelfExclusionArticle /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:54" time="1.708" tests="4">
    <testcase classname="&lt;SelfExclusionArticle /&gt; should render SelfExclusionArticle desktop component with selfExclusionArticleItems" name="&lt;SelfExclusionArticle /&gt; should render SelfExclusionArticle desktop component with selfExclusionArticleItems" time="0.031">
    </testcase>
    <testcase classname="&lt;SelfExclusionArticle /&gt; should render SelfExclusionArticle desktop component without is_appstore for EU items" name="&lt;SelfExclusionArticle /&gt; should render SelfExclusionArticle desktop component without is_appstore for EU items" time="0.009">
    </testcase>
    <testcase classname="&lt;SelfExclusionArticle /&gt; should render SelfExclusionArticle desktop component for non EU items" name="&lt;SelfExclusionArticle /&gt; should render SelfExclusionArticle desktop component for non EU items" time="0.02">
    </testcase>
    <testcase classname="&lt;SelfExclusionArticle /&gt; should render SelfExclusionArticle mobile component and trigger click" name="&lt;SelfExclusionArticle /&gt; should render SelfExclusionArticle mobile component and trigger click" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;USTPopover /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:55" time="0.651" tests="3">
    <testcase classname="&lt;USTPopover /&gt; should render USTPopover with UST info" name="&lt;USTPopover /&gt; should render USTPopover with UST info" time="0.009">
    </testcase>
    <testcase classname="&lt;USTPopover /&gt; should render USTPopover with tUSDT info" name="&lt;USTPopover /&gt; should render USTPopover with tUSDT info" time="0.002">
    </testcase>
    <testcase classname="&lt;USTPopover /&gt; should render USTPopover with default info" name="&lt;USTPopover /&gt; should render USTPopover with default info" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RadioButton /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:55" time="0.645" tests="4">
    <testcase classname="&lt;RadioButton /&gt; should render radiobutton" name="&lt;RadioButton /&gt; should render radiobutton" time="0.022">
    </testcase>
    <testcase classname="&lt;RadioButton /&gt; should render icon if icons is passed" name="&lt;RadioButton /&gt; should render icon if icons is passed" time="0.005">
    </testcase>
    <testcase classname="&lt;RadioButton /&gt; should render USTPopover if icons is not passed and id is UST" name="&lt;RadioButton /&gt; should render USTPopover if icons is not passed and id is UST" time="0.005">
    </testcase>
    <testcase classname="&lt;RadioButton /&gt; should render USTPopover if icons is not passed and id is eUSDT" name="&lt;RadioButton /&gt; should render USTPopover if icons is not passed and id is eUSDT" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RadioButtonGroup/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:56" time="0.713" tests="6">
    <testcase classname="&lt;RadioButtonGroup/&gt; should render currencyselector" name="&lt;RadioButtonGroup/&gt; should render currencyselector" time="0.013">
    </testcase>
    <testcase classname="&lt;RadioButtonGroup/&gt; should not display label if is_title_enabled is false" name="&lt;RadioButtonGroup/&gt; should not display label if is_title_enabled is false" time="0.001">
    </testcase>
    <testcase classname="&lt;RadioButtonGroup/&gt; should show limited_fiat msg if is_fiat and has_fiat are true" name="&lt;RadioButtonGroup/&gt; should show limited_fiat msg if is_fiat and has_fiat are true" time="0.008">
    </testcase>
    <testcase classname="&lt;RadioButtonGroup/&gt; should render the children" name="&lt;RadioButtonGroup/&gt; should render the children" time="0.008">
    </testcase>
    <testcase classname="&lt;RadioButtonGroup/&gt; if is_fiat is true it should show description on clicking the child component" name="&lt;RadioButtonGroup/&gt; if is_fiat is true it should show description on clicking the child component" time="0.008">
    </testcase>
    <testcase classname="&lt;RadioButtonGroup/&gt; if is_fiat is false it should not show description on clicking the child component" name="&lt;RadioButtonGroup/&gt; if is_fiat is false it should not show description on clicking the child component" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TestWarningModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:56" time="0.646" tests="2">
    <testcase classname="&lt;TestWarningModal /&gt; should render modal correctly on desktop" name="&lt;TestWarningModal /&gt; should render modal correctly on desktop" time="0.014">
    </testcase>
    <testcase classname="&lt;TestWarningModal /&gt; should render modal correctly on mobile" name="&lt;TestWarningModal /&gt; should render modal correctly on mobile" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="TradingAssessmentRadioButton" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:56" time="0.728" tests="4">
    <testcase classname="TradingAssessmentRadioButton should render on the DOM" name="TradingAssessmentRadioButton should render on the DOM" time="0.037">
    </testcase>
    <testcase classname="TradingAssessmentRadioButton should render the correct text" name="TradingAssessmentRadioButton should render the correct text" time="0.013">
    </testcase>
    <testcase classname="TradingAssessmentRadioButton should updates values and calls onChange when a radio item is selected" name="TradingAssessmentRadioButton should updates values and calls onChange when a radio item is selected" time="0.024">
    </testcase>
    <testcase classname="TradingAssessmentRadioButton calls setEnableNextSection based on existence of form_control value in values" name="TradingAssessmentRadioButton calls setEnableNextSection based on existence of form_control value in values" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="TradingAssessmentNewUser" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:56" time="0.851" tests="1">
    <testcase classname="TradingAssessmentNewUser should handle the cancel event correctly" name="TradingAssessmentNewUser should handle the cancel event correctly" time="0.063">
    </testcase>
  </testsuite>
  <testsuite name="TradingAssessmentForm" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:56" time="1.035" tests="4">
    <testcase classname="TradingAssessmentForm should display the provided question" name="TradingAssessmentForm should display the provided question" time="0.036">
    </testcase>
    <testcase classname="TradingAssessmentForm should display the provided options in the form" name="TradingAssessmentForm should display the provided options in the form" time="0.012">
    </testcase>
    <testcase classname="TradingAssessmentForm should go to the next question on when the checkbox is &quot;yes&quot; and next button is selected" name="TradingAssessmentForm should go to the next question on when the checkbox is &quot;yes&quot; and next button is selected" time="0.071">
    </testcase>
    <testcase classname="TradingAssessmentForm should call onCancel when displaying the first question and &quot;Previous&quot; is clicked" name="TradingAssessmentForm should call onCancel when displaying the first question and &quot;Previous&quot; is clicked" time="0.048">
    </testcase>
  </testsuite>
  <testsuite name="TradingAssessmentDropdown" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:56" time="0.685" tests="4">
    <testcase classname="TradingAssessmentDropdown renders questions from item_list" name="TradingAssessmentDropdown renders questions from item_list" time="0.025">
    </testcase>
    <testcase classname="TradingAssessmentDropdown calls setEnableNextSection with false if not all fields are filled" name="TradingAssessmentDropdown calls setEnableNextSection with false if not all fields are filled" time="0.005">
    </testcase>
    <testcase classname="TradingAssessmentDropdown should show all the options" name="TradingAssessmentDropdown should show all the options" time="0.025">
    </testcase>
    <testcase classname="TradingAssessmentDropdown updates form values on dropdown change" name="TradingAssessmentDropdown updates form values on dropdown change" time="0.045">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RouteWithSubRoutes /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:57" time="0.447" tests="2">
    <testcase classname="&lt;RouteWithSubRoutes /&gt; should render one &lt;RouteWithSubRoutesRender /&gt; component" name="&lt;RouteWithSubRoutes /&gt; should render one &lt;RouteWithSubRoutesRender /&gt; component" time="0.014">
    </testcase>
    <testcase classname="&lt;RouteWithSubRoutes /&gt; should have props as passed as route" name="&lt;RouteWithSubRoutes /&gt; should have props as passed as route" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BinaryLink /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:57" time="0.378" tests="3">
    <testcase classname="&lt;BinaryLink /&gt; should show and trigger Navlink with path and active className" name="&lt;BinaryLink /&gt; should show and trigger Navlink with path and active className" time="0.023">
    </testcase>
    <testcase classname="&lt;BinaryLink /&gt; should show simple link text" name="&lt;BinaryLink /&gt; should show simple link text" time="0.006">
    </testcase>
    <testcase classname="&lt;BinaryLink /&gt; should thorw error if the path is not found" name="&lt;BinaryLink /&gt; should thorw error if the path is not found" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RiskToleranceWarningModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:57" time="0.714" tests="3">
    <testcase classname="&lt;RiskToleranceWarningModal/&gt; should render modal correctly on desktop" name="&lt;RiskToleranceWarningModal/&gt; should render modal correctly on desktop" time="0.063">
    </testcase>
    <testcase classname="&lt;RiskToleranceWarningModal/&gt; should render modal correctly on mobile" name="&lt;RiskToleranceWarningModal/&gt; should render modal correctly on mobile" time="0.008">
    </testcase>
    <testcase classname="&lt;RiskToleranceWarningModal/&gt; should show trigger handleAcceptRisk when click on button" name="&lt;RiskToleranceWarningModal/&gt; should show trigger handleAcceptRisk when click on button" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="helpers" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:57" time="0.467" tests="5">
    <testcase classname="helpers normalizePath should return string path" name="helpers normalizePath should return string path" time="0.002">
    </testcase>
    <testcase classname="helpers isRouteVisible should return expected boolean" name="helpers isRouteVisible should return expected boolean" time="0.001">
    </testcase>
    <testcase classname="helpers findRouteByPath should return expected route object" name="helpers findRouteByPath should return expected route object" time="0.003">
    </testcase>
    <testcase classname="helpers getPath should return expected path" name="helpers getPath should return expected path" time="0">
    </testcase>
    <testcase classname="helpers getContractPath should return expected contract path with passed contract id" name="helpers getContractPath should return expected contract path with passed contract id" time="0.059">
    </testcase>
  </testsuite>
  <testsuite name="&lt;BinaryRoutes /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:57" time="0.769" tests="1">
    <testcase classname="&lt;BinaryRoutes /&gt; should render BinaryRoutes with mocked route component" name="&lt;BinaryRoutes /&gt; should render BinaryRoutes with mocked route component" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountArticle/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:57" time="0.765" tests="2">
    <testcase classname="&lt;AccountArticle/&gt; should render AccountArticle and show proper descriptions" name="&lt;AccountArticle/&gt; should render AccountArticle and show proper descriptions" time="0.024">
    </testcase>
    <testcase classname="&lt;AccountArticle/&gt; should invoke the callback on clicking the &apos;Learn more&apos; link" name="&lt;AccountArticle/&gt; should invoke the callback on clicking the &apos;Learn more&apos; link" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="splitValidationResultTypes" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:57" time="0.546" tests="4">
    <testcase classname="splitValidationResultTypes should return object" name="splitValidationResultTypes should return object" time="0.002">
    </testcase>
    <testcase classname="splitValidationResultTypes should return warnings object with warning message inside and errors with empty object" name="splitValidationResultTypes should return warnings object with warning message inside and errors with empty object" time="0">
    </testcase>
    <testcase classname="splitValidationResultTypes should return errors object with error message inside and warnings with empty object" name="splitValidationResultTypes should return errors object with error message inside and warnings with empty object" time="0.001">
    </testcase>
    <testcase classname="splitValidationResultTypes should return with both warnings and errors empty object" name="splitValidationResultTypes should return with both warnings and errors empty object" time="0">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountLimitsExtraInfo/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:58" time="0.619" tests="3">
    <testcase classname="&lt;AccountLimitsExtraInfo/&gt; should render AccountLimitsExtraInfo component" name="&lt;AccountLimitsExtraInfo/&gt; should render AccountLimitsExtraInfo component" time="0.008">
    </testcase>
    <testcase classname="&lt;AccountLimitsExtraInfo/&gt; should render PopoverComponent if isMobile is false" name="&lt;AccountLimitsExtraInfo/&gt; should render PopoverComponent if isMobile is false" time="0.006">
    </testcase>
    <testcase classname="&lt;AccountLimitsExtraInfo/&gt; should pass props to PopoverComponent if isMobile is false" name="&lt;AccountLimitsExtraInfo/&gt; should pass props to PopoverComponent if isMobile is false" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountLimitsFooterPortal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:57" time="0.908" tests="3">
    <testcase classname="&lt;AccountLimitsFooterPortal/&gt; should render AccountLimitsFooterPortal component" name="&lt;AccountLimitsFooterPortal/&gt; should render AccountLimitsFooterPortal component" time="0.013">
    </testcase>
    <testcase classname="&lt;AccountLimitsFooterPortal/&gt; should render anchor tag" name="&lt;AccountLimitsFooterPortal/&gt; should render anchor tag" time="0.003">
    </testcase>
    <testcase classname="&lt;AccountLimitsFooterPortal/&gt; should trigger toggleOverlay" name="&lt;AccountLimitsFooterPortal/&gt; should trigger toggleOverlay" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountLimitsArticle/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:58" time="0.527" tests="2">
    <testcase classname="&lt;AccountLimitsArticle/&gt; should render AccountLimitsArticle component" name="&lt;AccountLimitsArticle/&gt; should render AccountLimitsArticle component" time="0.019">
    </testcase>
    <testcase classname="&lt;AccountLimitsArticle/&gt; should show the descriptions for the account limit" name="&lt;AccountLimitsArticle/&gt; should show the descriptions for the account limit" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountLimitsTableHeader/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:58" time="0.535" tests="4">
    <testcase classname="&lt;AccountLimitsTableHeader/&gt; should render AccountLimitsTableHeader component" name="&lt;AccountLimitsTableHeader/&gt; should render AccountLimitsTableHeader component" time="0.007">
    </testcase>
    <testcase classname="&lt;AccountLimitsTableHeader/&gt; should render the children if children is passed" name="&lt;AccountLimitsTableHeader/&gt; should render the children if children is passed" time="0.004">
    </testcase>
    <testcase classname="&lt;AccountLimitsTableHeader/&gt; should not render Text component if children is not passed " name="&lt;AccountLimitsTableHeader/&gt; should not render Text component if children is not passed " time="0.003">
    </testcase>
    <testcase classname="&lt;AccountLimitsTableHeader/&gt; should render renderExtraInfo if it is passed" name="&lt;AccountLimitsTableHeader/&gt; should render renderExtraInfo if it is passed" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountLimitsTableCell/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:58" time="0.53" tests="4">
    <testcase classname="&lt;AccountLimitsTableCell/&gt; should render AccountLimitsTableCell component" name="&lt;AccountLimitsTableCell/&gt; should render AccountLimitsTableCell component" time="0.009">
    </testcase>
    <testcase classname="&lt;AccountLimitsTableCell/&gt; should render the children if children is passed" name="&lt;AccountLimitsTableCell/&gt; should render the children if children is passed" time="0.004">
    </testcase>
    <testcase classname="&lt;AccountLimitsTableCell/&gt; should not render Text component if children is not passed " name="&lt;AccountLimitsTableCell/&gt; should not render Text component if children is not passed " time="0.008">
    </testcase>
    <testcase classname="&lt;AccountLimitsTableCell/&gt; should render renderExtraInfo if it is passed" name="&lt;AccountLimitsTableCell/&gt; should render renderExtraInfo if it is passed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountLimitsTurnoverLimitRow/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:58" time="0.615" tests="4">
    <testcase classname="&lt;AccountLimitsTurnoverLimitRow/&gt; should render AccountLimitsTurnoverLimitRow component" name="&lt;AccountLimitsTurnoverLimitRow/&gt; should render AccountLimitsTurnoverLimitRow component" time="0.019">
    </testcase>
    <testcase classname="&lt;AccountLimitsTurnoverLimitRow/&gt; should return null if collection is empty array" name="&lt;AccountLimitsTurnoverLimitRow/&gt; should return null if collection is empty array" time="0.004">
    </testcase>
    <testcase classname="&lt;AccountLimitsTurnoverLimitRow/&gt; should display title and item name" name="&lt;AccountLimitsTurnoverLimitRow/&gt; should display title and item name" time="0.006">
    </testcase>
    <testcase classname="&lt;AccountLimitsTurnoverLimitRow/&gt; should call formatMoney function" name="&lt;AccountLimitsTurnoverLimitRow/&gt; should call formatMoney function" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountLimitsOverlay/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:58" time="0.885" tests="3">
    <testcase classname="&lt;AccountLimitsOverlay/&gt; should render AccountLimitsOverlay component" name="&lt;AccountLimitsOverlay/&gt; should render AccountLimitsOverlay component" time="0.083">
    </testcase>
    <testcase classname="&lt;AccountLimitsOverlay/&gt; should go to help-centre page if the Help Centre link on the text is clicked" name="&lt;AccountLimitsOverlay/&gt; should go to help-centre page if the Help Centre link on the text is clicked" time="0.004">
    </testcase>
    <testcase classname="&lt;AccountLimitsOverlay/&gt; should show Done Button" name="&lt;AccountLimitsOverlay/&gt; should show Done Button" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="&lt;POAAddressMismatchHintBox/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:59" time="0.854" tests="1">
    <testcase classname="&lt;POAAddressMismatchHintBox/&gt; should render POAAddressMismatchHintBox component" name="&lt;POAAddressMismatchHintBox/&gt; should render POAAddressMismatchHintBox component" time="0.074">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AccountLimits/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:58" time="1.617" tests="24">
    <testcase classname="&lt;AccountLimits/&gt; should render the Loading component if is_switching is true" name="&lt;AccountLimits/&gt; should render the Loading component if is_switching is true" time="0.038">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should render DemoMessage component if is_virtual is true" name="&lt;AccountLimits/&gt; should render DemoMessage component if is_virtual is true" time="0.007">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should render LoadErrorMessage component if there is api_initial_load_error" name="&lt;AccountLimits/&gt; should render LoadErrorMessage component if there is api_initial_load_error" time="0.013">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should render AccountLimits component" name="&lt;AccountLimits/&gt; should render AccountLimits component" time="0.028">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should call setIsPopupOverlayShown fn " name="&lt;AccountLimits/&gt; should call setIsPopupOverlayShown fn " time="0.029">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should render Loading component if is_loading is true" name="&lt;AccountLimits/&gt; should render Loading component if is_loading is true" time="0.025">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should render AccountLimitsArticle component if should_show_article is true in mobile mode" name="&lt;AccountLimits/&gt; should render AccountLimitsArticle component if should_show_article is true in mobile mode" time="0.031">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should not render AccountLimitsArticle component if should_show_article is false" name="&lt;AccountLimits/&gt; should not render AccountLimitsArticle component if should_show_article is false" time="0.012">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should render Trading limits table and its trading limits contents properly" name="&lt;AccountLimits/&gt; should render Trading limits table and its trading limits contents properly" time="0.151">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should render Maximum number of open positions- table cell and its contents properly" name="&lt;AccountLimits/&gt; should render Maximum number of open positions- table cell and its contents properly" time="0.171">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should call formatMoney" name="&lt;AccountLimits/&gt; should call formatMoney" time="0.032">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should render Trading limits table and its maximum daily turnover contents properly" name="&lt;AccountLimits/&gt; should render Trading limits table and its maximum daily turnover contents properly" time="0.235">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should not render withdrawal_limits_table is_app_settings is true" name="&lt;AccountLimits/&gt; should not render withdrawal_limits_table is_app_settings is true" time="0.013">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should render withdrawal_limits_table is_app_settings is false" name="&lt;AccountLimits/&gt; should render withdrawal_limits_table is_app_settings is false" time="0.036">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; withdrawal_limits_table should have a Limits header if is_fully_authenticated is true" name="&lt;AccountLimits/&gt; withdrawal_limits_table should have a Limits header if is_fully_authenticated is true" time="0.008">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; show show withdrawal limit lifted message if is_fully_authenticated is true" name="&lt;AccountLimits/&gt; show show withdrawal limit lifted message if is_fully_authenticated is true" time="0.014">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; withdrawal_limits_table should show `Total withdrawal limit` if is_fully_authenticated is false and is_appstore is true" name="&lt;AccountLimits/&gt; withdrawal_limits_table should show `Total withdrawal limit` if is_fully_authenticated is false and is_appstore is true" time="0.016">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; withdrawal_limits_table should show `Total withdrawal allowed` when is_fully_authenticated is false and is_appstore is true" name="&lt;AccountLimits/&gt; withdrawal_limits_table should show `Total withdrawal allowed` when is_fully_authenticated is false and is_appstore is true" time="0.01">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; withdrawal_limits_table should show the verfiy button when is_fully_authenticated is false and is_appstore is true" name="&lt;AccountLimits/&gt; withdrawal_limits_table should show the verfiy button when is_fully_authenticated is false and is_appstore is true" time="0.031">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; withdrawal_limits_table should show total withdrawn and withdrawn remaining details" name="&lt;AccountLimits/&gt; withdrawal_limits_table should show total withdrawn and withdrawn remaining details" time="0.012">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should show limit_notice message when is_appstore is false and is_fully_authenticated is false in mobile mode" name="&lt;AccountLimits/&gt; should show limit_notice message when is_appstore is false and is_fully_authenticated is false in mobile mode" time="0.01">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should not  show limit_notice message when is_appstore is false and is_fully_authenticated is false" name="&lt;AccountLimits/&gt; should not  show limit_notice message when is_appstore is false and is_fully_authenticated is false" time="0.014">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should show AccountLimitsArticle when should_show_article and isDesktop is true" name="&lt;AccountLimits/&gt; should show AccountLimitsArticle when should_show_article and isDesktop is true" time="0.021">
    </testcase>
    <testcase classname="&lt;AccountLimits/&gt; should show AccountLimitsFooter if footer_ref is passed" name="&lt;AccountLimits/&gt; should show AccountLimitsFooter if footer_ref is passed" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="POAAddressMismatchHintBox" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:59" time="0.921" tests="1">
    <testcase classname="POAAddressMismatchHintBox should render POAAddressMismatchHintBox" name="POAAddressMismatchHintBox should render POAAddressMismatchHintBox" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PoincLimited/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:59" time="0.679" tests="1">
    <testcase classname="&lt;PoincLimited/&gt; should render PoincLimited component" name="&lt;PoincLimited/&gt; should render PoincLimited component" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ResetTradingPasswordModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:58" time="1.51" tests="11">
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should render ResetTradingPasswordModal component" name="&lt;ResetTradingPasswordModal/&gt; should render ResetTradingPasswordModal component" time="0.1">
    </testcase>
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should remove the ResetTradingPasswordModal component when is_visible is false" name="&lt;ResetTradingPasswordModal/&gt; should remove the ResetTradingPasswordModal component when is_visible is false" time="0.004">
    </testcase>
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should render dialog title to specific CFDPlatform label" name="&lt;ResetTradingPasswordModal/&gt; should render dialog title to specific CFDPlatform label" time="0.083">
    </testcase>
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should display error message returned by API" name="&lt;ResetTradingPasswordModal/&gt; should display error message returned by API" time="0.054">
    </testcase>
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should close the dialog when Ok button is clicked" name="&lt;ResetTradingPasswordModal/&gt; should close the dialog when Ok button is clicked" time="0.128">
    </testcase>
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should get the account status on successful submission" name="&lt;ResetTradingPasswordModal/&gt; should get the account status on successful submission" time="0.055">
    </testcase>
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should close the dialog when Done button is clicked" name="&lt;ResetTradingPasswordModal/&gt; should close the dialog when Done button is clicked" time="0.252">
    </testcase>
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should display the password in text format when visibility icon clicked" name="&lt;ResetTradingPasswordModal/&gt; should display the password in text format when visibility icon clicked" time="0.024">
    </testcase>
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should display the password in hidden format when visibility icon clicked consecutively twice" name="&lt;ResetTradingPasswordModal/&gt; should display the password in hidden format when visibility icon clicked consecutively twice" time="0.026">
    </testcase>
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should close the dialog when cancel button is clicked" name="&lt;ResetTradingPasswordModal/&gt; should close the dialog when cancel button is clicked" time="0.025">
    </testcase>
    <testcase classname="&lt;ResetTradingPasswordModal/&gt; should navigate to previous route when modal is closed " name="&lt;ResetTradingPasswordModal/&gt; should navigate to previous route when modal is closed " time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PoincFailed/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:00" time="0.705" tests="1">
    <testcase classname="&lt;PoincFailed/&gt; should render PoincFailed component and trigger click" name="&lt;PoincFailed/&gt; should render PoincFailed component and trigger click" time="0.038">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PoincReceived/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:00" time="0.746" tests="1">
    <testcase classname="&lt;PoincReceived/&gt; should render PoincReceived component" name="&lt;PoincReceived/&gt; should render PoincReceived component" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PoincVerified/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:00" time="0.511" tests="1">
    <testcase classname="&lt;PoincVerified/&gt; should render PoincVerified component" name="&lt;PoincVerified/&gt; should render PoincVerified component" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;InlineNoteWithIcon /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:00" time="0.529" tests="1">
    <testcase classname="&lt;InlineNoteWithIcon /&gt; should render the InlineNoteWithIcon component" name="&lt;InlineNoteWithIcon /&gt; should render the InlineNoteWithIcon component" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="&lt;UnlinkModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:00" time="0.526" tests="1">
    <testcase classname="&lt;UnlinkModal /&gt; should show the proper messages" name="&lt;UnlinkModal /&gt; should show the proper messages" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CurrencySelector/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:24:56" time="4.699" tests="13">
    <testcase classname="&lt;CurrencySelector/&gt; should render Currency selector" name="&lt;CurrencySelector/&gt; should render Currency selector" time="0.03">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should render Fiat currencies and submit the form" name="&lt;CurrencySelector/&gt; should render Fiat currencies and submit the form" time="0.57">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should disable fiat if user already have a fiat " name="&lt;CurrencySelector/&gt; should disable fiat if user already have a fiat " time="0.223">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should render Fiat currencies when is_dxtrade_allowed and is_mt5_allowed are true" name="&lt;CurrencySelector/&gt; should render Fiat currencies when is_dxtrade_allowed and is_mt5_allowed are true" time="0.531">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should render Fiat currencies when is_dxtrade_allowed,is_eu and is_mt5_allowed are true" name="&lt;CurrencySelector/&gt; should render Fiat currencies when is_dxtrade_allowed,is_eu and is_mt5_allowed are true" time="0.464">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should render Fiat currencies when is_mt5_allowed and is_eu are true" name="&lt;CurrencySelector/&gt; should render Fiat currencies when is_mt5_allowed and is_eu are true" time="0.578">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should render Fiat currencies when is_mt5_allowed is true" name="&lt;CurrencySelector/&gt; should render Fiat currencies when is_mt5_allowed is true" time="0.432">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should render Cryptocurrencies and submit the form " name="&lt;CurrencySelector/&gt; should render Cryptocurrencies and submit the form " time="0.436">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should submit the form when getCurrentStep is not passed " name="&lt;CurrencySelector/&gt; should submit the form when getCurrentStep is not passed " time="0.435">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should render the selector__container with proper div height" name="&lt;CurrencySelector/&gt; should render the selector__container with proper div height" time="0.011">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should call handleCancel when previous button is called" name="&lt;CurrencySelector/&gt; should call handleCancel when previous button is called" time="0.113">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should bypass to next step in case of personal details form error" name="&lt;CurrencySelector/&gt; should bypass to next step in case of personal details form error" time="0.01">
    </testcase>
    <testcase classname="&lt;CurrencySelector/&gt; should bypass to address step in case of address details form error" name="&lt;CurrencySelector/&gt; should bypass to address step in case of address details form error" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;UnsupportedFailed /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:00" time="0.557" tests="1">
    <testcase classname="&lt;UnsupportedFailed /&gt; should render &lt;UnsupportedFailed /&gt; component with its content" name="&lt;UnsupportedFailed /&gt; should render &lt;UnsupportedFailed /&gt; component with its content" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;POORejected /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:00" time="0.611" tests="1">
    <testcase classname="&lt;POORejected /&gt; Should render &lt;POORejected /&gt; and its contents" name="&lt;POORejected /&gt; Should render &lt;POORejected /&gt; and its contents" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="&lt;POOSubmitted /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:00" time="0.62" tests="1">
    <testcase classname="&lt;POOSubmitted /&gt; Should render &lt;POOSubmitted and its contents" name="&lt;POOSubmitted /&gt; Should render &lt;POOSubmitted and its contents" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;POOVerified /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:00" time="0.599" tests="1">
    <testcase classname="&lt;POOVerified /&gt; Should render &lt;POOVerified /&gt; and its contents" name="&lt;POOVerified /&gt; Should render &lt;POOVerified /&gt; and its contents" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;POONotRequired /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:01" time="0.686" tests="1">
    <testcase classname="&lt;POONotRequired /&gt; should render &lt;POONotRequired /&gt; component with its content" name="&lt;POONotRequired /&gt; should render &lt;POONotRequired /&gt; component with its content" time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="CommonMistakeExamples" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:01" time="0.797" tests="1">
    <testcase classname="CommonMistakeExamples should render the component with 6 mistake descriptions" name="CommonMistakeExamples should render the component with 6 mistake descriptions" time="0.098">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Expired/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:01" time="0.786" tests="1">
    <testcase classname="&lt;Expired/&gt; should render Expired component" name="&lt;Expired/&gt; should render Expired component" time="0.051">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Unverified/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:01" time="0.831" tests="1">
    <testcase classname="&lt;Unverified/&gt; should render Unverified component" name="&lt;Unverified/&gt; should render Unverified component" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="&lt;NeedsReview/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:01" time="0.824" tests="3">
    <testcase classname="&lt;NeedsReview/&gt; should render NeedsReview component if it does not need poi" name="&lt;NeedsReview/&gt; should render NeedsReview component if it does not need poi" time="0.022">
    </testcase>
    <testcase classname="&lt;NeedsReview/&gt; should render NeedsReview component if it does not need poi and is_description_enabled" name="&lt;NeedsReview/&gt; should render NeedsReview component if it does not need poi and is_description_enabled" time="0.019">
    </testcase>
    <testcase classname="&lt;NeedsReview/&gt; should render NeedsReview component if it needs poi" name="&lt;NeedsReview/&gt; should render NeedsReview component if it needs poi" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Submitted /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:01" time="0.881" tests="4">
    <testcase classname="&lt;Submitted /&gt; should render the Submitted component" name="&lt;Submitted /&gt; should render the Submitted component" time="0.027">
    </testcase>
    <testcase classname="&lt;Submitted /&gt; should show submit_poi message if needs_poi is true" name="&lt;Submitted /&gt; should show submit_poi message if needs_poi is true" time="0.005">
    </testcase>
    <testcase classname="&lt;Submitted /&gt; should show review message if needs_poi is true" name="&lt;Submitted /&gt; should show review message if needs_poi is true" time="0.005">
    </testcase>
    <testcase classname="&lt;Submitted /&gt; should show ContinueTradingButton if needs_poi is false and is_description_enabled is false" name="&lt;Submitted /&gt; should show ContinueTradingButton if needs_poi is false and is_description_enabled is false" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Verified/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:01" time="0.957" tests="3">
    <testcase classname="&lt;Verified/&gt; should render Verified component without needs_poi" name="&lt;Verified/&gt; should render Verified component without needs_poi" time="0.028">
    </testcase>
    <testcase classname="&lt;Verified/&gt; should render Verified component without needs_poi and is_description_enabled" name="&lt;Verified/&gt; should render Verified component without needs_poi and is_description_enabled" time="0.006">
    </testcase>
    <testcase classname="&lt;Verified/&gt; should render Verified component with needs_poi" name="&lt;Verified/&gt; should render Verified component with needs_poi" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PoaNotRequired /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:01" time="0.777" tests="1">
    <testcase classname="&lt;PoaNotRequired /&gt; should render &lt;PoaNotRequired /&gt; component with its content" name="&lt;PoaNotRequired /&gt; should render &lt;PoaNotRequired /&gt; component with its content" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ContinueTradingButton/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:02" time="0.72" tests="3">
    <testcase classname="&lt;ContinueTradingButton/&gt; should render ContinueTradingButton component" name="&lt;ContinueTradingButton/&gt; should render ContinueTradingButton component" time="0.01">
    </testcase>
    <testcase classname="&lt;ContinueTradingButton/&gt; should render ContinueTradingButton component with default message" name="&lt;ContinueTradingButton/&gt; should render ContinueTradingButton component with default message" time="0.003">
    </testcase>
    <testcase classname="&lt;ContinueTradingButton/&gt; should navigate to base url on clicking the text" name="&lt;ContinueTradingButton/&gt; should navigate to base url on clicking the text" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PoaButton/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:02" time="0.685" tests="4">
    <testcase classname="&lt;PoaButton/&gt; should render PoaButton component" name="&lt;PoaButton/&gt; should render PoaButton component" time="0.01">
    </testcase>
    <testcase classname="&lt;PoaButton/&gt; should render PoaButton component with default message" name="&lt;PoaButton/&gt; should render PoaButton component with default message" time="0.003">
    </testcase>
    <testcase classname="&lt;PoaButton/&gt; should render custom_text passed to the component" name="&lt;PoaButton/&gt; should render custom_text passed to the component" time="0.011">
    </testcase>
    <testcase classname="&lt;PoaButton/&gt; should navigate to proof_of_address page on clicking the text" name="&lt;PoaButton/&gt; should navigate to proof_of_address page on clicking the text" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="ApiTokenTableRow" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:02" time="0.711" tests="1">
    <testcase classname="ApiTokenTableRow should render ApiTokenTableRow" name="ApiTokenTableRow should render ApiTokenTableRow" time="0.059">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:02" time="0.6" tests="1">
    <testcase classname=" should render ApiTokenArticle" name=" should render ApiTokenArticle" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="ApiTokenTable" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:02" time="0.77" tests="3">
    <testcase classname="ApiTokenTable should render ApiTokenTable" name="ApiTokenTable should render ApiTokenTable" time="0.059">
    </testcase>
    <testcase classname="ApiTokenTable should render in mobile view" name="ApiTokenTable should render in mobile view" time="0.025">
    </testcase>
    <testcase classname="ApiTokenTable should display Never if last_used is undefined" name="ApiTokenTable should display Never if last_used is undefined" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="ApiTokenTableRowCell" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:02" time="0.705" tests="2">
    <testcase classname="ApiTokenTableRowCell should render ApiTokenTableRowCell" name="ApiTokenTableRowCell should render ApiTokenTableRowCell" time="0.018">
    </testcase>
    <testcase classname="ApiTokenTableRowCell should render ApiTokenTableRowCell with table data if should_bypass_text is true" name="ApiTokenTableRowCell should render ApiTokenTableRowCell with table data if should_bypass_text is true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ApiTokenCard /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:02" time="0.576" tests="2">
    <testcase classname="&lt;ApiTokenCard /&gt; should render ApiTokenCard" name="&lt;ApiTokenCard /&gt; should render ApiTokenCard" time="0.032">
    </testcase>
    <testcase classname="&lt;ApiTokenCard /&gt; should render ApiTokenCard with children" name="&lt;ApiTokenCard /&gt; should render ApiTokenCard with children" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="ApiTokenDeleteButton" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:02" time="1.23" tests="6">
    <testcase classname="ApiTokenDeleteButton should render ApiTokenDeleteButton" name="ApiTokenDeleteButton should render ApiTokenDeleteButton" time="0.022">
    </testcase>
    <testcase classname="ApiTokenDeleteButton should display Delete this token when mouse enter" name="ApiTokenDeleteButton should display Delete this token when mouse enter" time="0.017">
    </testcase>
    <testcase classname="ApiTokenDeleteButton should not display Delete this token when mouse leave" name="ApiTokenDeleteButton should not display Delete this token when mouse leave" time="0.027">
    </testcase>
    <testcase classname="ApiTokenDeleteButton should display Popup when delete icon is clicked" name="ApiTokenDeleteButton should display Popup when delete icon is clicked" time="0.041">
    </testcase>
    <testcase classname="ApiTokenDeleteButton should close the modal when clicked on Cancel" name="ApiTokenDeleteButton should close the modal when clicked on Cancel" time="0.295">
    </testcase>
    <testcase classname="ApiTokenDeleteButton should should trigger deleteToken when clicked on Yes, delete" name="ApiTokenDeleteButton should should trigger deleteToken when clicked on Yes, delete" time="0.059">
    </testcase>
  </testsuite>
  <testsuite name="ApiTokenTableRowScopeCell" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:03" time="0.276" tests="1">
    <testcase classname="ApiTokenTableRowScopeCell should render ApiTokenTableRowScopesCell" name="ApiTokenTableRowScopeCell should render ApiTokenTableRowScopesCell" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="ApiTokenClipboard" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:03" time="0.935" tests="6">
    <testcase classname="ApiTokenClipboard should render ApiTokenClipboard with the copy icon" name="ApiTokenClipboard should render ApiTokenClipboard with the copy icon" time="0.014">
    </testcase>
    <testcase classname="ApiTokenClipboard should display &quot;Copy this token&quot; message when mouse enters" name="ApiTokenClipboard should display &quot;Copy this token&quot; message when mouse enters" time="0.02">
    </testcase>
    <testcase classname="ApiTokenClipboard should remove &quot;Copy this token&quot; message when mouse leaves" name="ApiTokenClipboard should remove &quot;Copy this token&quot; message when mouse leaves" time="0.021">
    </testcase>
    <testcase classname="ApiTokenClipboard should display Popup Modal when user clicks on copy_icon" name="ApiTokenClipboard should display Popup Modal when user clicks on copy_icon" time="0.029">
    </testcase>
    <testcase classname="ApiTokenClipboard should remove Popup modal when user clicks on OK" name="ApiTokenClipboard should remove Popup modal when user clicks on OK" time="0.307">
    </testcase>
    <testcase classname="ApiTokenClipboard should not display Popup Modal when user clicks on copy_icon with no Admin scope" name="ApiTokenClipboard should not display Popup Modal when user clicks on copy_icon with no Admin scope" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="ApiTokenTableRowTokenCell" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:03" time="0.66" tests="2">
    <testcase classname="ApiTokenTableRowTokenCell should render ApiTokenTableRowTokenCell" name="ApiTokenTableRowTokenCell should render ApiTokenTableRowTokenCell" time="0.043">
    </testcase>
    <testcase classname="ApiTokenTableRowTokenCell should show token after clicking on dt_toggle_visibility_icon" name="ApiTokenTableRowTokenCell should show token after clicking on dt_toggle_visibility_icon" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="ApiTokenTableRowHeader" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:03" time="0.678" tests="1">
    <testcase classname="ApiTokenTableRowHeader should render ApiTokenTableRowHeader" name="ApiTokenTableRowHeader should render ApiTokenTableRowHeader" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="Test coverage for FormBodySection component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:03" time="0.855" tests="4">
    <testcase classname="Test coverage for FormBodySection component Should render children" name="Test coverage for FormBodySection component Should render children" time="0.013">
    </testcase>
    <testcase classname="Test coverage for FormBodySection component When we pass &quot;has_side_note&quot; property, it should render a different ui" name="Test coverage for FormBodySection component When we pass &quot;has_side_note&quot; property, it should render a different ui" time="0.003">
    </testcase>
    <testcase classname="Test coverage for FormBodySection component When &quot;side_note&quot; value is string, it should render inside Text component" name="Test coverage for FormBodySection component When &quot;side_note&quot; value is string, it should render inside Text component" time="0.003">
    </testcase>
    <testcase classname="Test coverage for FormBodySection component When &quot;side_note&quot; value is not string, it should not render inside Text component" name="Test coverage for FormBodySection component When &quot;side_note&quot; value is not string, it should not render inside Text component" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;MissingPersonalDetails /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:03" time="0.718" tests="4">
    <testcase classname="&lt;MissingPersonalDetails /&gt; should render the MissingPersonalDetails component" name="&lt;MissingPersonalDetails /&gt; should render the MissingPersonalDetails component" time="0.035">
    </testcase>
    <testcase classname="&lt;MissingPersonalDetails /&gt; should show invalid msg and update link if has_invalid_postal_code is true" name="&lt;MissingPersonalDetails /&gt; should show invalid msg and update link if has_invalid_postal_code is true" time="0.012">
    </testcase>
    <testcase classname="&lt;MissingPersonalDetails /&gt; should show missing msg with proper icon if has_invalid_postal_code is false and is_appstore is true" name="&lt;MissingPersonalDetails /&gt; should show missing msg with proper icon if has_invalid_postal_code is false and is_appstore is true" time="0.017">
    </testcase>
    <testcase classname="&lt;MissingPersonalDetails /&gt; should show missing msg with proper icon if has_invalid_postal_code is false and is_appstore is false" name="&lt;MissingPersonalDetails /&gt; should show missing msg with proper icon if has_invalid_postal_code is false and is_appstore is false" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Expired /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:04" time="0.801" tests="3">
    <testcase classname="&lt;Expired /&gt; should render &quot;Expired&quot; window with redirect button" name="&lt;Expired /&gt; should render &quot;Expired&quot; window with redirect button" time="0.031">
    </testcase>
    <testcase classname="&lt;Expired /&gt; should render &quot;Expired&quot; window without redirect button" name="&lt;Expired /&gt; should render &quot;Expired&quot; window without redirect button" time="0.013">
    </testcase>
    <testcase classname="&lt;Expired /&gt; should trigger callback after clicking on the &quot;Upload Document&quot; button" name="&lt;Expired /&gt; should trigger callback after clicking on the &quot;Upload Document&quot; button" time="0.051">
    </testcase>
  </testsuite>
  <testsuite name="&lt;UploadComplete /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:04" time="0.714" tests="7">
    <testcase classname="&lt;UploadComplete /&gt; should display Icon if is_appstore is false" name="&lt;UploadComplete /&gt; should display Icon if is_appstore is false" time="0.023">
    </testcase>
    <testcase classname="&lt;UploadComplete /&gt; should render &lt;UploadComplete /&gt; component for manual upload" name="&lt;UploadComplete /&gt; should render &lt;UploadComplete /&gt; component for manual upload" time="0.016">
    </testcase>
    <testcase classname="&lt;UploadComplete /&gt; should render &lt;UploadComplete /&gt; component for manual upload" name="&lt;UploadComplete /&gt; should render &lt;UploadComplete /&gt; component for manual upload" time="0.006">
    </testcase>
    <testcase classname="&lt;UploadComplete /&gt; should not show redirect_button if it redirect_button passed and is_from_external is true, but needs_poa is false" name="&lt;UploadComplete /&gt; should not show redirect_button if it redirect_button passed and is_from_external is true, but needs_poa is false" time="0.01">
    </testcase>
    <testcase classname="&lt;UploadComplete /&gt; should show redirect button if needs_poa and is_from_external are false and have redirect button" name="&lt;UploadComplete /&gt; should show redirect button if needs_poa and is_from_external are false and have redirect button" time="0.018">
    </testcase>
    <testcase classname="&lt;UploadComplete /&gt; should show needs_poa review message and extra submission message, and poa_buttons" name="&lt;UploadComplete /&gt; should show needs_poa review message and extra submission message, and poa_buttons" time="0.008">
    </testcase>
    <testcase classname="&lt;UploadComplete /&gt; should show needs_poa review message and extra submission message, and poa_buttons but redirect_button will not display" name="&lt;UploadComplete /&gt; should show needs_poa review message and extra submission message, and poa_buttons but redirect_button will not display" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;POILimited/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:04" time="0.635" tests="1">
    <testcase classname="&lt;POILimited/&gt; should render POILimited component" name="&lt;POILimited/&gt; should render POILimited component" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="&lt;RejectedReasons /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:04" time="0.733" tests="1">
    <testcase classname="&lt;RejectedReasons /&gt; should render RejectedReasons with rejected reasons and trigger continue " name="&lt;RejectedReasons /&gt; should render RejectedReasons with rejected reasons and trigger continue " time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PoiConfirmWithExampleFormContainer/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:04" time="1.276" tests="2">
    <testcase classname="&lt;PoiConfirmWithExampleFormContainer/&gt; should render PersonalDetailsForm with image and checkbox" name="&lt;PoiConfirmWithExampleFormContainer/&gt; should render PersonalDetailsForm with image and checkbox" time="0.12">
    </testcase>
    <testcase classname="&lt;PoiConfirmWithExampleFormContainer/&gt; should change fields and trigger submit" name="&lt;PoiConfirmWithExampleFormContainer/&gt; should change fields and trigger submit" time="0.488">
    </testcase>
  </testsuite>
  <testsuite name="&lt;IdvDocumentSubmit/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:03" time="1.645" tests="3">
    <testcase classname="&lt;IdvDocumentSubmit/&gt; should render IdvDocumentSubmit component" name="&lt;IdvDocumentSubmit/&gt; should render IdvDocumentSubmit component" time="0.139">
    </testcase>
    <testcase classname="&lt;IdvDocumentSubmit/&gt; should  trigger &quot;go back&quot; button, inputs and check document_type validation after rendering IdvDocumentSubmit component" name="&lt;IdvDocumentSubmit/&gt; should  trigger &quot;go back&quot; button, inputs and check document_type validation after rendering IdvDocumentSubmit component" time="0.227">
    </testcase>
    <testcase classname="&lt;IdvDocumentSubmit/&gt; should change inputs, check document_number validation and trigger &quot;Verify&quot; button after rendering IdvDocumentSubmit component" name="&lt;IdvDocumentSubmit/&gt; should change inputs, check document_number validation and trigger &quot;Verify&quot; button after rendering IdvDocumentSubmit component" time="0.429">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OnfidoNotRequired /&gt; " errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:04" time="0.565" tests="1">
    <testcase classname="&lt;OnfidoNotRequired /&gt;  should render &lt;OnfidoNotRequired /&gt; component with content" name="&lt;OnfidoNotRequired /&gt;  should render &lt;OnfidoNotRequired /&gt; component with content" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Verified/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:04" time="0.722" tests="5">
    <testcase classname="&lt;Verified/&gt; should render Verified component" name="&lt;Verified/&gt; should render Verified component" time="0.012">
    </testcase>
    <testcase classname="&lt;Verified/&gt; should show icon with message if needs_poa is false" name="&lt;Verified/&gt; should show icon with message if needs_poa is false" time="0.003">
    </testcase>
    <testcase classname="&lt;Verified/&gt; should show redirect button if needs_poa and is_from_external are false and have redirect_button" name="&lt;Verified/&gt; should show redirect button if needs_poa and is_from_external are false and have redirect_button" time="0.018">
    </testcase>
    <testcase classname="&lt;Verified/&gt; should not show redirect button if redirect_button is not passed" name="&lt;Verified/&gt; should not show redirect button if redirect_button is not passed" time="0.002">
    </testcase>
    <testcase classname="&lt;Verified/&gt; should show poa buttons and the message if needs_poa is true and is_from_external is false " name="&lt;Verified/&gt; should show poa buttons and the message if needs_poa is true and is_from_external is false " time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PoiButton/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:05" time="0.572" tests="2">
    <testcase classname="&lt;PoiButton/&gt; should render PoiButton component" name="&lt;PoiButton/&gt; should render PoiButton component" time="0.009">
    </testcase>
    <testcase classname="&lt;PoiButton/&gt; should navigate to proof_of_identity page after clicking" name="&lt;PoiButton/&gt; should navigate to proof_of_identity page after clicking" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;IdvLimited/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:05" time="0.555" tests="1">
    <testcase classname="&lt;IdvLimited/&gt; should render IdvLimited component and trigger click" name="&lt;IdvLimited/&gt; should render IdvLimited component and trigger click" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="&lt;CountrySelector/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:05" time="0.819" tests="5">
    <testcase classname="&lt;CountrySelector/&gt; should render CountrySelector component external" name="&lt;CountrySelector/&gt; should render CountrySelector component external" time="0.03">
    </testcase>
    <testcase classname="&lt;CountrySelector/&gt; should show error message after clicking the input without choosing the country" name="&lt;CountrySelector/&gt; should show error message after clicking the input without choosing the country" time="0.062">
    </testcase>
    <testcase classname="&lt;CountrySelector/&gt; should render error status and country selector when error is verification failed or expired" name="&lt;CountrySelector/&gt; should render error status and country selector when error is verification failed or expired" time="0.023">
    </testcase>
    <testcase classname="&lt;CountrySelector/&gt; should trigger selection functions and next button" name="&lt;CountrySelector/&gt; should trigger selection functions and next button" time="0.068">
    </testcase>
    <testcase classname="&lt;CountrySelector/&gt; should render high risk error message" name="&lt;CountrySelector/&gt; should render high risk error message" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;IdvVerified /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:05" time="0.541" tests="2">
    <testcase classname="&lt;IdvVerified /&gt; should render the IdvVerified component when needs_poa is true and is_from_external is false in desktop" name="&lt;IdvVerified /&gt; should render the IdvVerified component when needs_poa is true and is_from_external is false in desktop" time="0.036">
    </testcase>
    <testcase classname="&lt;IdvVerified /&gt; should render the IdvVerified component when needs_poa is false and is_from_external is true in mobile" name="&lt;IdvVerified /&gt; should render the IdvVerified component when needs_poa is false and is_from_external is true in mobile" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="&lt;IdvFailed/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:05" time="0.735" tests="5">
    <testcase classname="&lt;IdvFailed/&gt; should render IDVfailed component with name mismatch message" name="&lt;IdvFailed/&gt; should render IDVfailed component with name mismatch message" time="0.024">
    </testcase>
    <testcase classname="&lt;IdvFailed/&gt; should render IDVfailed component with dob mismatch message" name="&lt;IdvFailed/&gt; should render IDVfailed component with dob mismatch message" time="0.007">
    </testcase>
    <testcase classname="&lt;IdvFailed/&gt; should render IDVfailed component with name &amp; DOB mismatch message" name="&lt;IdvFailed/&gt; should render IDVfailed component with name &amp; DOB mismatch message" time="0.03">
    </testcase>
    <testcase classname="&lt;IdvFailed/&gt; should render IDVfailed component with expired message" name="&lt;IdvFailed/&gt; should render IDVfailed component with expired message" time="0.008">
    </testcase>
    <testcase classname="&lt;IdvFailed/&gt; should render IDVfailed component with verification failed message" name="&lt;IdvFailed/&gt; should render IDVfailed component with verification failed message" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:05" time="0.366" tests="1">
    <testcase classname=" should render DemoMessage component" name=" should render DemoMessage component" time="0.043">
    </testcase>
  </testsuite>
  <testsuite name="FormFieldInfo" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:05" time="0.664" tests="3">
    <testcase classname="FormFieldInfo should render the component" name="FormFieldInfo should render the component" time="0.017">
    </testcase>
    <testcase classname="FormFieldInfo should toggle popover on click" name="FormFieldInfo should toggle popover on click" time="0.027">
    </testcase>
    <testcase classname="FormFieldInfo should close popover when clicking outside" name="FormFieldInfo should close popover when clicking outside" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;IdvSubmitComplete/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:05" time="0.72" tests="4">
    <testcase classname="&lt;IdvSubmitComplete/&gt; should render IdvSubmitComplete component external, no needs_poa, without mismatch_status" name="&lt;IdvSubmitComplete/&gt; should render IdvSubmitComplete component external, no needs_poa, without mismatch_status" time="0.04">
    </testcase>
    <testcase classname="&lt;IdvSubmitComplete/&gt; should render IdvSubmitComplete component needs_poa not external, without mismatch_status and redirect_button" name="&lt;IdvSubmitComplete/&gt; should render IdvSubmitComplete component needs_poa not external, without mismatch_status and redirect_button" time="0.027">
    </testcase>
    <testcase classname="&lt;IdvSubmitComplete/&gt; should render IdvSubmitComplete component with mismatch_status " name="&lt;IdvSubmitComplete/&gt; should render IdvSubmitComplete component with mismatch_status " time="0.018">
    </testcase>
    <testcase classname="&lt;IdvSubmitComplete/&gt; should render IdvSubmitComplete component with mismatch_status" name="&lt;IdvSubmitComplete/&gt; should render IdvSubmitComplete component with mismatch_status" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ScrollbarsContainer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:06" time="0.599" tests="3">
    <testcase classname="&lt;ScrollbarsContainer /&gt; should render children with ScrollbarsContainer component for desktop without scroll_offset for desktop " name="&lt;ScrollbarsContainer /&gt; should render children with ScrollbarsContainer component for desktop without scroll_offset for desktop " time="0.014">
    </testcase>
    <testcase classname="&lt;ScrollbarsContainer /&gt; should render children with ScrollbarsContainer component for desktop with scroll_offset and extra className for desktop " name="&lt;ScrollbarsContainer /&gt; should render children with ScrollbarsContainer component for desktop with scroll_offset and extra className for desktop " time="0.008">
    </testcase>
    <testcase classname="&lt;ScrollbarsContainer /&gt; should render children with ScrollbarsContainer component with scroll_offset and extra className for mobile" name="&lt;ScrollbarsContainer /&gt; should render children with ScrollbarsContainer component with scroll_offset and extra className for mobile" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Testing FormSubHeader component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:06" time="0.562" tests="2">
    <testcase classname="Testing FormSubHeader component should render properties" name="Testing FormSubHeader component should render properties" time="0.017">
    </testcase>
    <testcase classname="Testing FormSubHeader component Should has a title as class" name="Testing FormSubHeader component Should has a title as class" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="UnlinkAccountModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:06" time="0.75" tests="4">
    <testcase classname="UnlinkAccountModal should render modal body" name="UnlinkAccountModal should render modal body" time="0.024">
    </testcase>
    <testcase classname="UnlinkAccountModal should render 2 buttons" name="UnlinkAccountModal should render 2 buttons" time="0.028">
    </testcase>
    <testcase classname="UnlinkAccountModal should invoke onClickSendEmail when clicking on Unlink button" name="UnlinkAccountModal should invoke onClickSendEmail when clicking on Unlink button" time="0.018">
    </testcase>
    <testcase classname="UnlinkAccountModal should invoke onClose when clicking on Cancel button" name="UnlinkAccountModal should invoke onClose when clicking on Cancel button" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="LoadErrorMessage" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:06" time="0.534" tests="1">
    <testcase classname="LoadErrorMessage should render LoadErrorMessage component with content" name="LoadErrorMessage should render LoadErrorMessage component with content" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="&lt;AddressDetails/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:06" time="1.29" tests="6">
    <testcase classname="&lt;AddressDetails/&gt; should render AddressDetails component for mobile" name="&lt;AddressDetails/&gt; should render AddressDetails component for mobile" time="0.08">
    </testcase>
    <testcase classname="&lt;AddressDetails/&gt; should show a loader when states list is not fully fetched" name="&lt;AddressDetails/&gt; should show a loader when states list is not fully fetched" time="0.014">
    </testcase>
    <testcase classname="&lt;AddressDetails/&gt; should render AddressDetails component and trigger buttons" name="&lt;AddressDetails/&gt; should render AddressDetails component and trigger buttons" time="0.157">
    </testcase>
    <testcase classname="&lt;AddressDetails/&gt; should render AddressDetails component with states_list for mobile" name="&lt;AddressDetails/&gt; should render AddressDetails component with states_list for mobile" time="0.032">
    </testcase>
    <testcase classname="&lt;AddressDetails/&gt; should render AddressDetails component with states_list for desktop" name="&lt;AddressDetails/&gt; should render AddressDetails component with states_list for desktop" time="0.059">
    </testcase>
    <testcase classname="&lt;AddressDetails/&gt; should disable the field if it is immutable from BE" name="&lt;AddressDetails/&gt; should disable the field if it is immutable from BE" time="0.048">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ErrorComponent/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:06" time="0.526" tests="1">
    <testcase classname="&lt;ErrorComponent/&gt; should render PageError component" name="&lt;ErrorComponent/&gt; should render PageError component" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FileUploaderContainer /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:06" time="0.63" tests="5">
    <testcase classname="&lt;FileUploaderContainer /&gt; should render FileUploaderContainer component and show descriptions" name="&lt;FileUploaderContainer /&gt; should render FileUploaderContainer component and show descriptions" time="0.022">
    </testcase>
    <testcase classname="&lt;FileUploaderContainer /&gt; should render FileUploaderContainer component if getSocket is not passed as prop" name="&lt;FileUploaderContainer /&gt; should render FileUploaderContainer component if getSocket is not passed as prop" time="0.008">
    </testcase>
    <testcase classname="&lt;FileUploaderContainer /&gt; files description and examples should be shown when passed" name="&lt;FileUploaderContainer /&gt; files description and examples should be shown when passed" time="0.005">
    </testcase>
    <testcase classname="&lt;FileUploaderContainer /&gt; should show hint message for desktop" name="&lt;FileUploaderContainer /&gt; should show hint message for desktop" time="0.01">
    </testcase>
    <testcase classname="&lt;FileUploaderContainer /&gt; should show hint message for mobile" name="&lt;FileUploaderContainer /&gt; should show hint message for mobile" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SentEmailModal/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:06" time="0.797" tests="11">
    <testcase classname="&lt;SentEmailModal/&gt; should render SentEmailModal component to change dmt5 password" name="&lt;SentEmailModal/&gt; should render SentEmailModal component to change dmt5 password" time="0.026">
    </testcase>
    <testcase classname="&lt;SentEmailModal/&gt; should render SentEmailModal component to change deriv x password" name="&lt;SentEmailModal/&gt; should render SentEmailModal component to change deriv x password" time="0.006">
    </testcase>
    <testcase classname="&lt;SentEmailModal/&gt; should render SentEmailModal component to change password through google account" name="&lt;SentEmailModal/&gt; should render SentEmailModal component to change password through google account" time="0.004">
    </testcase>
    <testcase classname="&lt;SentEmailModal/&gt; should render SentEmailModal component to change email" name="&lt;SentEmailModal/&gt; should render SentEmailModal component to change email" time="0.003">
    </testcase>
    <testcase classname="&lt;SentEmailModal/&gt; should display default message when no appropriate identifier_title is passed" name="&lt;SentEmailModal/&gt; should display default message when no appropriate identifier_title is passed" time="0.016">
    </testcase>
    <testcase classname="&lt;SentEmailModal/&gt; should trigger onClose function when modal close button is clicked" name="&lt;SentEmailModal/&gt; should trigger onClose function when modal close button is clicked" time="0.004">
    </testcase>
    <testcase classname="&lt;SentEmailModal/&gt; should render SentEmailModal component when isMobile is true" name="&lt;SentEmailModal/&gt; should render SentEmailModal component when isMobile is true" time="0.005">
    </testcase>
    <testcase classname="&lt;SentEmailModal/&gt; should not have model content when is_open is false" name="&lt;SentEmailModal/&gt; should not have model content when is_open is false" time="0.002">
    </testcase>
    <testcase classname="&lt;SentEmailModal/&gt; should have live chat displayed when live chat is enabled" name="&lt;SentEmailModal/&gt; should have live chat displayed when live chat is enabled" time="0.029">
    </testcase>
    <testcase classname="&lt;SentEmailModal/&gt; should have onClose called when live chat option is clicked" name="&lt;SentEmailModal/&gt; should have onClose called when live chat option is clicked" time="0.015">
    </testcase>
    <testcase classname="&lt;SentEmailModal/&gt; should have onClickSendEmail called when resend email is clicked" name="&lt;SentEmailModal/&gt; should have onClickSendEmail called when resend email is clicked" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FileUploader /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:06" time="0.687" tests="8">
    <testcase classname="&lt;FileUploader /&gt; should render FileUploader component in desktop mode" name="&lt;FileUploader /&gt; should render FileUploader component in desktop mode" time="0.019">
    </testcase>
    <testcase classname="&lt;FileUploader /&gt; should render FileUploader component in mobile mode" name="&lt;FileUploader /&gt; should render FileUploader component in mobile mode" time="0.008">
    </testcase>
    <testcase classname="&lt;FileUploader /&gt; should upload supported file" name="&lt;FileUploader /&gt; should upload supported file" time="0.016">
    </testcase>
    <testcase classname="&lt;FileUploader /&gt; should show error message when unsupported file is uploaded" name="&lt;FileUploader /&gt; should show error message when unsupported file is uploaded" time="0.016">
    </testcase>
    <testcase classname="&lt;FileUploader /&gt; should show error message when multiple files are uploaded" name="&lt;FileUploader /&gt; should show error message when multiple files are uploaded" time="0.015">
    </testcase>
    <testcase classname="&lt;FileUploader /&gt; should show error message when larger files are uploaded" name="&lt;FileUploader /&gt; should show error message when larger files are uploaded" time="0.011">
    </testcase>
    <testcase classname="&lt;FileUploader /&gt; should remove the file when close icon is clicked" name="&lt;FileUploader /&gt; should remove the file when close icon is clicked" time="0.013">
    </testcase>
    <testcase classname="&lt;FileUploader /&gt; upload methods should reject if readFile returns empty array " name="&lt;FileUploader /&gt; upload methods should reject if readFile returns empty array " time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="Testing form-footer component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:07" time="0.298" tests="2">
    <testcase classname="Testing form-footer component Should render children" name="Testing form-footer component Should render children" time="0.008">
    </testcase>
    <testcase classname="Testing form-footer component Container should render with a className prop" name="Testing form-footer component Container should render with a className prop" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;IconMessageContent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:07" time="0.613" tests="2">
    <testcase classname="&lt;IconMessageContent /&gt; should render the IconWithMessage component" name="&lt;IconMessageContent /&gt; should render the IconWithMessage component" time="0.021">
    </testcase>
    <testcase classname="&lt;IconMessageContent /&gt; renders the children" name="&lt;IconMessageContent /&gt; renders the children" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FormBody /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:07" time="0.568" tests="2">
    <testcase classname="&lt;FormBody /&gt; should render FormBody component with children in desktop" name="&lt;FormBody /&gt; should render FormBody component with children in desktop" time="0.019">
    </testcase>
    <testcase classname="&lt;FormBody /&gt; should render FormBody component with children in mobile" name="&lt;FormBody /&gt; should render FormBody component with children in mobile" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="SampleCreditCardModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:07" time="0.554" tests="2">
    <testcase classname="SampleCreditCardModal should render modal props" name="SampleCreditCardModal should render modal props" time="0.031">
    </testcase>
    <testcase classname="SampleCreditCardModal should not render modal when is_open is false" name="SampleCreditCardModal should not render modal when is_open is false" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Tesing &lt;FormInputField/&gt; component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:07" time="0.536" tests="2">
    <testcase classname="Tesing &lt;FormInputField/&gt; component should render properties" name="Tesing &lt;FormInputField/&gt; component should render properties" time="0.016">
    </testcase>
    <testcase classname="Tesing &lt;FormInputField/&gt; component should render Input field with optional status" name="Tesing &lt;FormInputField/&gt; component should render Input field with optional status" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Tesing &lt;DateOfBirthField/&gt; component" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:07" time="0.551" tests="1">
    <testcase classname="Tesing &lt;DateOfBirthField/&gt; component should render properties" name="Tesing &lt;DateOfBirthField/&gt; component should render properties" time="0.032">
    </testcase>
  </testsuite>
  <testsuite name="FormSelectField" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:08" time="0.702" tests="3">
    <testcase classname="FormSelectField should render label" name="FormSelectField should render label" time="0.016">
    </testcase>
    <testcase classname="FormSelectField should render and select an option" name="FormSelectField should render and select an option" time="0.044">
    </testcase>
    <testcase classname="FormSelectField should render error message for invalid input" name="FormSelectField should render error message for invalid input" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="PersonalDetailsForm" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:08" time="0.774" tests="3">
    <testcase classname="PersonalDetailsForm should display the salutations &apos;Mr&apos; and &apos;Ms&apos; on screen" name="PersonalDetailsForm should display the salutations &apos;Mr&apos; and &apos;Ms&apos; on screen" time="0.066">
    </testcase>
    <testcase classname="PersonalDetailsForm should select the respective salutation when radio button is clicked" name="PersonalDetailsForm should select the respective salutation when radio button is clicked" time="0.083">
    </testcase>
    <testcase classname="PersonalDetailsForm should display crs confirmation checkbox if tax residence &amp; tin fields are filled" name="PersonalDetailsForm should display crs confirmation checkbox if tax residence &amp; tin fields are filled" time="0.043">
    </testcase>
  </testsuite>
  <testsuite name="&lt;IconWithMessage /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:08" time="0.797" tests="5">
    <testcase classname="&lt;IconWithMessage /&gt; should render the IconWithMessage component" name="&lt;IconWithMessage /&gt; should render the IconWithMessage component" time="0.032">
    </testcase>
    <testcase classname="&lt;IconWithMessage /&gt; should not render the button component if has_button is false" name="&lt;IconWithMessage /&gt; should not render the button component if has_button is false" time="0.008">
    </testcase>
    <testcase classname="&lt;IconWithMessage /&gt; should show &quot;Switch to real account&quot; button label if user have real account" name="&lt;IconWithMessage /&gt; should show &quot;Switch to real account&quot; button label if user have real account" time="0.015">
    </testcase>
    <testcase classname="&lt;IconWithMessage /&gt; should show &quot;Add a real account&quot; button label if user doesnt have real account" name="&lt;IconWithMessage /&gt; should show &quot;Add a real account&quot; button label if user doesnt have real account" time="0.012">
    </testcase>
    <testcase classname="&lt;IconWithMessage /&gt; Should trigger click on the button" name="&lt;IconWithMessage /&gt; Should trigger click on the button" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="getFormFieldsConfig" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:08" time="0.478" tests="3">
    <testcase classname="getFormFieldsConfig should return the correct form fields configuration" name="getFormFieldsConfig should return the correct form fields configuration" time="0.025">
    </testcase>
    <testcase classname="getFormConfig should return the correct form configuration" name="getFormConfig should return the correct form configuration" time="0.006">
    </testcase>
    <testcase classname="getFormConfig should return the correct form configuration with input types" name="getFormConfig should return the correct form configuration with input types" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="&lt;IDVForm/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:08" time="1.071" tests="4">
    <testcase classname="&lt;IDVForm/&gt; should render IDVForm component" name="&lt;IDVForm/&gt; should render IDVForm component" time="0.04">
    </testcase>
    <testcase classname="&lt;IDVForm/&gt; Should change the document type value when document type is changed" name="&lt;IDVForm/&gt; Should change the document type value when document type is changed" time="0.162">
    </testcase>
    <testcase classname="&lt;IDVForm/&gt; should render the hint messages for the selected document" name="&lt;IDVForm/&gt; should render the hint messages for the selected document" time="0.031">
    </testcase>
    <testcase classname="&lt;IDVForm/&gt; Should hide document number field when &apos;I dont have any of these is chosen&apos;" name="&lt;IDVForm/&gt; Should hide document number field when &apos;I dont have any of these is chosen&apos;" time="0.187">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FinancialDetails /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:07" time="2.482" tests="8">
    <testcase classname="&lt;FinancialDetails /&gt; should render &quot;FinancialDetails&quot; for desktop" name="&lt;FinancialDetails /&gt; should render &quot;FinancialDetails&quot; for desktop" time="0.058">
    </testcase>
    <testcase classname="&lt;FinancialDetails /&gt; should render &quot;FinancialDetails&quot; for mobile" name="&lt;FinancialDetails /&gt; should render &quot;FinancialDetails&quot; for mobile" time="0.098">
    </testcase>
    <testcase classname="&lt;FinancialDetails /&gt; should trigger &quot;Previous&quot; button" name="&lt;FinancialDetails /&gt; should trigger &quot;Previous&quot; button" time="0.057">
    </testcase>
    <testcase classname="&lt;FinancialDetails /&gt; should trigger &quot;Previous&quot; or &quot;Submit&quot; button" name="&lt;FinancialDetails /&gt; should trigger &quot;Previous&quot; or &quot;Submit&quot; button" time="0.407">
    </testcase>
    <testcase classname="&lt;FinancialDetails /&gt; should change the selected value when user changes the value in the dropdown" name="&lt;FinancialDetails /&gt; should change the selected value when user changes the value in the dropdown" time="0.805">
    </testcase>
    <testcase classname="&lt;FinancialDetails /&gt; should show &quot;Unemployed&quot; in occupation list if employment status is not &quot;Employed&quot;" name="&lt;FinancialDetails /&gt; should show &quot;Unemployed&quot; in occupation list if employment status is not &quot;Employed&quot;" time="0.396">
    </testcase>
    <testcase classname="&lt;FinancialDetails /&gt; should not show Occupation field if employment status is &quot;Unemployed&quot;" name="&lt;FinancialDetails /&gt; should not show Occupation field if employment status is &quot;Unemployed&quot;" time="0.023">
    </testcase>
    <testcase classname="&lt;FinancialDetails /&gt; should not show Occupation field if employment status is &quot;Self employed&quot;" name="&lt;FinancialDetails /&gt; should not show Occupation field if employment status is &quot;Self employed&quot;" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="AdditionalKycInfoModal" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:09" time="0.759" tests="1">
    <testcase classname="AdditionalKycInfoModal should render the modal when is_additional_kyc_info_modal_open is true" name="AdditionalKycInfoModal should render the modal when is_additional_kyc_info_modal_open is true" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="LanguageRadioButton" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:09" time="0.66" tests="2">
    <testcase classname="LanguageRadioButton should render active LanguageRadioButton" name="LanguageRadioButton should render active LanguageRadioButton" time="0.023">
    </testcase>
    <testcase classname="LanguageRadioButton should render not active LanguageRadioButton and trigger onchange" name="LanguageRadioButton should render not active LanguageRadioButton and trigger onchange" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TermsOfUse/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:09" time="0.815" tests="3">
    <testcase classname="&lt;TermsOfUse/&gt; should render TermsOfUse component for svg accounts" name="&lt;TermsOfUse/&gt; should render TermsOfUse component for svg accounts" time="0.042">
    </testcase>
    <testcase classname="&lt;TermsOfUse/&gt; should render TermsOfUse component for maltainvest accounts and show &quot;Add account&quot; button" name="&lt;TermsOfUse/&gt; should render TermsOfUse component for maltainvest accounts and show &quot;Add account&quot; button" time="0.045">
    </testcase>
    <testcase classname="&lt;TermsOfUse/&gt; should render TermsOfUse component for maltainvest accounts and show &quot;Add account&quot; button for mobile" name="&lt;TermsOfUse/&gt; should render TermsOfUse component for maltainvest accounts and show &quot;Add account&quot; button for mobile" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="AdditionalKycInfoForm" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:08" time="1.587" tests="5">
    <testcase classname="AdditionalKycInfoForm should render the form fields" name="AdditionalKycInfoForm should render the form fields" time="0.051">
    </testcase>
    <testcase classname="AdditionalKycInfoForm should render loading state upon fetching data" name="AdditionalKycInfoForm should render loading state upon fetching data" time="0.008">
    </testcase>
    <testcase classname="AdditionalKycInfoForm should submit the form when all fields are valid" name="AdditionalKycInfoForm should submit the form when all fields are valid" time="0.366">
    </testcase>
    <testcase classname="AdditionalKycInfoForm should be able to submit the form without filling optional fields" name="AdditionalKycInfoForm should be able to submit the form without filling optional fields" time="0.154">
    </testcase>
    <testcase classname="AdditionalKycInfoForm should show an error message if form validation fails" name="AdditionalKycInfoForm should show an error message if form validation fails" time="0.225">
    </testcase>
  </testsuite>
  <testsuite name="InputGroup" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:10" time="0.264" tests="2">
    <testcase classname="InputGroup should render InputGroup with children passed inside" name="InputGroup should render InputGroup with children passed inside" time="0.009">
    </testcase>
    <testcase classname="InputGroup should have children_class passed into the component" name="InputGroup should have children_class passed into the component" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ListItem/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:09" time="0.714" tests="2">
    <testcase classname="&lt;ListItem/&gt; should render ListItem component" name="&lt;ListItem/&gt; should render ListItem component" time="0.017">
    </testcase>
    <testcase classname="&lt;ListItem/&gt; should render ListItem component with index" name="&lt;ListItem/&gt; should render ListItem component with index" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getPersonalDetailsValidationSchema" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:10" time="0.479" tests="5">
    <testcase classname="getPersonalDetailsValidationSchema should validate a valid input for non-eu users" name="getPersonalDetailsValidationSchema should validate a valid input for non-eu users" time="0.009">
    </testcase>
    <testcase classname="getPersonalDetailsValidationSchema should not validate an invalid input for non-eu users" name="getPersonalDetailsValidationSchema should not validate an invalid input for non-eu users" time="0.003">
    </testcase>
    <testcase classname="getPersonalDetailsValidationSchema should validate a valid input for eu users" name="getPersonalDetailsValidationSchema should validate a valid input for eu users" time="0.017">
    </testcase>
    <testcase classname="getPersonalDetailsValidationSchema should not validate a non-eu input for eu users" name="getPersonalDetailsValidationSchema should not validate a non-eu input for eu users" time="0.008">
    </testcase>
    <testcase classname="getPersonalDetailsInitialValues should return correct initial values" name="getPersonalDetailsInitialValues should return correct initial values" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="&lt;IconMessageList/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:10" time="0.802" tests="5">
    <testcase classname="&lt;IconMessageList/&gt; should render IconMessageList component" name="&lt;IconMessageList/&gt; should render IconMessageList component" time="0.02">
    </testcase>
    <testcase classname="&lt;IconMessageList/&gt; should render icon passed to the component" name="&lt;IconMessageList/&gt; should render icon passed to the component" time="0.036">
    </testcase>
    <testcase classname="&lt;IconMessageList/&gt; should show message passed to the component" name="&lt;IconMessageList/&gt; should show message passed to the component" time="0.011">
    </testcase>
    <testcase classname="&lt;IconMessageList/&gt; should render the messages based on Onfido Error codes" name="&lt;IconMessageList/&gt; should render the messages based on Onfido Error codes" time="0.022">
    </testcase>
    <testcase classname="&lt;IconMessageList/&gt; should show continue_btn if OnContinue is passed" name="&lt;IconMessageList/&gt; should show continue_btn if OnContinue is passed" time="0.066">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PersonalDetails/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:06" time="4.778" tests="29">
    <testcase classname="&lt;PersonalDetails/&gt; should have called trackEvent on mount" name="&lt;PersonalDetails/&gt; should have called trackEvent on mount" time="0.09">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should have validation errors on form fields" name="&lt;PersonalDetails/&gt; should have validation errors on form fields" time="0.255">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; submit button should be enabled if TIN or tax_residence is optional in case of CR accounts" name="&lt;PersonalDetails/&gt; submit button should be enabled if TIN or tax_residence is optional in case of CR accounts" time="0.529">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should not display confirmation checkbox if opt-out of IDV" name="&lt;PersonalDetails/&gt; should not display confirmation checkbox if opt-out of IDV" time="0.479">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should autopopulate tax_residence for MF clients" name="&lt;PersonalDetails/&gt; should autopopulate tax_residence for MF clients" time="0.053">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should render PersonalDetails component" name="&lt;PersonalDetails/&gt; should render PersonalDetails component" time="0.019">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should show proper salutation message when is_virtual is true" name="&lt;PersonalDetails/&gt; should show proper salutation message when is_virtual is true" time="0.028">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should show proper salutation message when is_virtual is false" name="&lt;PersonalDetails/&gt; should show proper salutation message when is_virtual is false" time="0.061">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should show title and Name label when salutation is passed" name="&lt;PersonalDetails/&gt; should show title and Name label when salutation is passed" time="0.041">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should show Name label when salutation is not passed" name="&lt;PersonalDetails/&gt; should show Name label when salutation is not passed" time="0.03">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should show salutation options" name="&lt;PersonalDetails/&gt; should show salutation options" time="0.117">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should display the correct field details " name="&lt;PersonalDetails/&gt; should display the correct field details " time="0.228">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should display the correct field details when is_svg is true " name="&lt;PersonalDetails/&gt; should display the correct field details when is_svg is true " time="0.235">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should display the correct field details when is_svg is false " name="&lt;PersonalDetails/&gt; should display the correct field details when is_svg is false " time="0.375">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should not enable fields which are disabled and empty" name="&lt;PersonalDetails/&gt; should not enable fields which are disabled and empty" time="0.116">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should disable citizen field if the client is_fully_authenticated" name="&lt;PersonalDetails/&gt; should disable citizen field if the client is_fully_authenticated" time="0.089">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should display proper data in mobile mode" name="&lt;PersonalDetails/&gt; should display proper data in mobile mode" time="0.382">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should select correct dropdown options in mobile mode" name="&lt;PersonalDetails/&gt; should select correct dropdown options in mobile mode" time="0.037">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should show error for invalid TIN" name="&lt;PersonalDetails/&gt; should show error for invalid TIN" time="0.05">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should submit the form if there is no validation error on desktop" name="&lt;PersonalDetails/&gt; should submit the form if there is no validation error on desktop" time="0.111">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should submit the form if there is no validation error on mobile" name="&lt;PersonalDetails/&gt; should submit the form if there is no validation error on mobile" time="0.176">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should save filled date when cancel button is clicked " name="&lt;PersonalDetails/&gt; should save filled date when cancel button is clicked " time="0.034">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should close tax_residence pop-over when clicked outside" name="&lt;PersonalDetails/&gt; should close tax_residence pop-over when clicked outside" time="0.061">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should close tax_identification_number_pop_over when clicked outside" name="&lt;PersonalDetails/&gt; should close tax_identification_number_pop_over when clicked outside" time="0.168">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should close tax_residence pop-over when scrolled" name="&lt;PersonalDetails/&gt; should close tax_residence pop-over when scrolled" time="0.076">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should close tax_identification_number_pop_over when scrolled" name="&lt;PersonalDetails/&gt; should close tax_identification_number_pop_over when scrolled" time="0.125">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should validate idv values when a document type is selected" name="&lt;PersonalDetails/&gt; should validate idv values when a document type is selected" time="0.031">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should validate idv values along with additional document number when a document type is selected" name="&lt;PersonalDetails/&gt; should validate idv values along with additional document number when a document type is selected" time="0.025">
    </testcase>
    <testcase classname="&lt;PersonalDetails/&gt; should disable tax_residence field if it is immutable from BE" name="&lt;PersonalDetails/&gt; should disable tax_residence field if it is immutable from BE" time="0.039">
    </testcase>
  </testsuite>
  <testsuite name="LeaveConfirm" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:10" time="1.073" tests="8">
    <testcase classname="LeaveConfirm should render LeaveConfirm component in desktop mode" name="LeaveConfirm should render LeaveConfirm component in desktop mode" time="0.179">
    </testcase>
    <testcase classname="LeaveConfirm should render LeaveConfirm component in mobile mode" name="LeaveConfirm should render LeaveConfirm component in mobile mode" time="0.019">
    </testcase>
    <testcase classname="LeaveConfirm should show proper icon" name="LeaveConfirm should show proper icon" time="0.056">
    </testcase>
    <testcase classname="LeaveConfirm should trigger onclick callback when the user clicks cancel button" name="LeaveConfirm should trigger onclick callback when the user clicks cancel button" time="0.033">
    </testcase>
    <testcase classname="LeaveConfirm should sehow modal when value is dirty and trigger unblock function" name="LeaveConfirm should sehow modal when value is dirty and trigger unblock function" time="0.026">
    </testcase>
    <testcase classname="LeaveConfirm should set values as dirty when the user leaves modal" name="LeaveConfirm should set values as dirty when the user leaves modal" time="0.023">
    </testcase>
    <testcase classname="LeaveConfirm should change pathname when user leaves form" name="LeaveConfirm should change pathname when user leaves form" time="0.036">
    </testcase>
    <testcase classname="LeaveConfirm should not change pathname when user leaves form" name="LeaveConfirm should not change pathname when user leaves form" time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="LanguageSettings" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:10" time="0.898" tests="3">
    <testcase classname="LanguageSettings should render LanguageSettings" name="LanguageSettings should render LanguageSettings" time="0.038">
    </testcase>
    <testcase classname="LanguageSettings should trigger language change" name="LanguageSettings should trigger language change" time="0.019">
    </testcase>
    <testcase classname="LanguageSettings should redirect for mobile" name="LanguageSettings should redirect for mobile" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="proof-of-ownership.jsx" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:10" time="0.865" tests="5">
    <testcase classname="proof-of-ownership.jsx should render no poo required status page" name="proof-of-ownership.jsx should render no poo required status page" time="0.024">
    </testcase>
    <testcase classname="proof-of-ownership.jsx should render poo verified status page" name="proof-of-ownership.jsx should render poo verified status page" time="0.009">
    </testcase>
    <testcase classname="proof-of-ownership.jsx should render poo submitted status page" name="proof-of-ownership.jsx should render poo submitted status page" time="0.018">
    </testcase>
    <testcase classname="proof-of-ownership.jsx should render poo rejected status page" name="proof-of-ownership.jsx should render poo rejected status page" time="0.005">
    </testcase>
    <testcase classname="proof-of-ownership.jsx should render ProofOfOwnershipForm" name="proof-of-ownership.jsx should render ProofOfOwnershipForm" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="ProofOfIdentityContainer" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:11" time="0.699" tests="13">
    <testcase classname="ProofOfIdentityContainer should render proof of identity container with loader" name="ProofOfIdentityContainer should render proof of identity container with loader" time="0.011">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render message when account is virtual" name="ProofOfIdentityContainer should render message when account is virtual" time="0.01">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render API error message returned in response" name="ProofOfIdentityContainer should render API error message returned in response" time="0.004">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render messages that POA is not required" name="ProofOfIdentityContainer should render messages that POA is not required" time="0.003">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render POI submission section when status is none" name="ProofOfIdentityContainer should render POI submission section when status is none" time="0.006">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render POI submission section when allow_poi_resubmission is set" name="ProofOfIdentityContainer should render POI submission section when allow_poi_resubmission is set" time="0.003">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render Upload complete section when status is pending" name="ProofOfIdentityContainer should render Upload complete section when status is pending" time="0.003">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render Verified section when status is verified" name="ProofOfIdentityContainer should render Verified section when status is verified" time="0.003">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render Expired section when status is expired" name="ProofOfIdentityContainer should render Expired section when status is expired" time="0.003">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render Limited section when status is rejected" name="ProofOfIdentityContainer should render Limited section when status is rejected" time="0.002">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render Onfido section when there was a previous onfido submission" name="ProofOfIdentityContainer should render Onfido section when there was a previous onfido submission" time="0.003">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render IDV section when there was a previous IDV submission" name="ProofOfIdentityContainer should render IDV section when there was a previous IDV submission" time="0.002">
    </testcase>
    <testcase classname="ProofOfIdentityContainer should render Manual section when there was a previous manual submission" name="ProofOfIdentityContainer should render Manual section when there was a previous manual submission" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="proof-of-ownership-form.jsx" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:10" time="0.936" tests="3">
    <testcase classname="proof-of-ownership-form.jsx should render a single card item inside the form" name="proof-of-ownership-form.jsx should render a single card item inside the form" time="0.023">
    </testcase>
    <testcase classname="proof-of-ownership-form.jsx should render multiple card items inside the form" name="proof-of-ownership-form.jsx should render multiple card items inside the form" time="0.009">
    </testcase>
    <testcase classname="proof-of-ownership-form.jsx should format identifier" name="proof-of-ownership-form.jsx should format identifier" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="&lt;OnfidoSdkView/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:11" time="0.631" tests="2">
    <testcase classname="&lt;OnfidoSdkView/&gt; should render OnfidoSdkView component with disabled onfido" name="&lt;OnfidoSdkView/&gt; should render OnfidoSdkView component with disabled onfido" time="0.015">
    </testcase>
    <testcase classname="&lt;OnfidoSdkView/&gt; should render OnfidoSdkView component after confirming the form and show success message for 5 seconds" name="&lt;OnfidoSdkView/&gt; should render OnfidoSdkView component after confirming the form and show success message for 5 seconds" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="ProofOfIncome" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:11" time="1.176" tests="4">
    <testcase classname="ProofOfIncome Should not render ProofOfIncome for demo account" name="ProofOfIncome Should not render ProofOfIncome for demo account" time="0.016">
    </testcase>
    <testcase classname="ProofOfIncome Should redirect if ProofOfIncome is not required " name="ProofOfIncome Should redirect if ProofOfIncome is not required " time="0.013">
    </testcase>
    <testcase classname="ProofOfIncome Should render ProofOfIncome form when it is required" name="ProofOfIncome Should render ProofOfIncome form when it is required" time="0.077">
    </testcase>
    <testcase classname="ProofOfIncome Should render ProofOfIncome and upload the document successfully" name="ProofOfIncome Should render ProofOfIncome and upload the document successfully" time="0.281">
    </testcase>
  </testsuite>
  <testsuite name="&lt;FinancialAssessment/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:11" time="0.677" tests="2">
    <testcase classname="&lt;FinancialAssessment/&gt; should render FinancialAssessment component" name="&lt;FinancialAssessment/&gt; should render FinancialAssessment component" time="0.072">
    </testcase>
    <testcase classname="&lt;FinancialAssessment/&gt; should render FinancialAssessment component without occupation field when Employment status is self employed" name="&lt;FinancialAssessment/&gt; should render FinancialAssessment component without occupation field when Employment status is self employed" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ClosingAccountHasPendingConditions /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:11" time="0.612" tests="2">
    <testcase classname="&lt;ClosingAccountHasPendingConditions /&gt; should show the dxtrade accounts with balance" name="&lt;ClosingAccountHasPendingConditions /&gt; should show the dxtrade accounts with balance" time="0.018">
    </testcase>
    <testcase classname="&lt;ClosingAccountHasPendingConditions /&gt; should show the mt5 accounts with balance" name="&lt;ClosingAccountHasPendingConditions /&gt; should show the mt5 accounts with balance" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ClosingAccountSteps /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:11" time="0.676" tests="5">
    <testcase classname="&lt;ClosingAccountSteps /&gt; should render the ClosingAccountSteps component" name="&lt;ClosingAccountSteps /&gt; should render the ClosingAccountSteps component" time="0.035">
    </testcase>
    <testcase classname="&lt;ClosingAccountSteps /&gt; should have link to security and privacy policy pdf" name="&lt;ClosingAccountSteps /&gt; should have link to security and privacy policy pdf" time="0.02">
    </testcase>
    <testcase classname="&lt;ClosingAccountSteps /&gt; should call redirectToReasons when close_account_button is clicked " name="&lt;ClosingAccountSteps /&gt; should call redirectToReasons when close_account_button is clicked " time="0.016">
    </testcase>
    <testcase classname="&lt;ClosingAccountSteps /&gt; should navigate to root page on clicking the cancel button" name="&lt;ClosingAccountSteps /&gt; should navigate to root page on clicking the cancel button" time="0.019">
    </testcase>
    <testcase classname="&lt;ClosingAccountSteps /&gt; should render proper button if is_from_derivgo is true" name="&lt;ClosingAccountSteps /&gt; should render proper button if is_from_derivgo is true" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ClosingAccountHasPendingConditions /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:12" time="0.607" tests="2">
    <testcase classname="&lt;ClosingAccountHasPendingConditions /&gt; should show the mt5 accounts with open_positions" name="&lt;ClosingAccountHasPendingConditions /&gt; should show the mt5 accounts with open_positions" time="0.018">
    </testcase>
    <testcase classname="&lt;ClosingAccountHasPendingConditions /&gt; should show the derivx accounts with open_positions" name="&lt;ClosingAccountHasPendingConditions /&gt; should show the derivx accounts with open_positions" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="ClosingAccountPendingWrapper" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:12" time="0.549" tests="3">
    <testcase classname="ClosingAccountPendingWrapper should render the ClosingAccountPendingWrapper component" name="ClosingAccountPendingWrapper should render the ClosingAccountPendingWrapper component" time="0.011">
    </testcase>
    <testcase classname="ClosingAccountPendingWrapper should render the ClosingAccountPendingWrapper component with description" name="ClosingAccountPendingWrapper should render the ClosingAccountPendingWrapper component with description" time="0.014">
    </testcase>
    <testcase classname="ClosingAccountPendingWrapper should render the children" name="ClosingAccountPendingWrapper should render the children" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PersonalDetailsForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:10" time="2.404" tests="12">
    <testcase classname="&lt;PersonalDetailsForm /&gt; should render successfully" name="&lt;PersonalDetailsForm /&gt; should render successfully" time="0.1">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should render all the personal details fields" name="&lt;PersonalDetailsForm /&gt; should render all the personal details fields" time="0.083">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should have &quot;required&quot; validation errors on required form fields" name="&lt;PersonalDetailsForm /&gt; should have &quot;required&quot; validation errors on required form fields" time="0.252">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should display error for 2-50 characters length validation, for First name when entered characters are less than 2" name="&lt;PersonalDetailsForm /&gt; should display error for 2-50 characters length validation, for First name when entered characters are less than 2" time="0.252">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should display error for the regex validation, for First name when unacceptable characters are entered" name="&lt;PersonalDetailsForm /&gt; should display error for the regex validation, for First name when unacceptable characters are entered" time="0.558">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should not display error for the regex validation, for First name when acceptable characters are entered" name="&lt;PersonalDetailsForm /&gt; should not display error for the regex validation, for First name when acceptable characters are entered" time="0.047">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should render professional client if support_professional_client is true with not verified account" name="&lt;PersonalDetailsForm /&gt; should render professional client if support_professional_client is true with not verified account" time="0.059">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should render POI auth link" name="&lt;PersonalDetailsForm /&gt; should render POI auth link" time="0.031">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should render POA auth link" name="&lt;PersonalDetailsForm /&gt; should render POA auth link" time="0.032">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should render professional client if support_professional_client is true with verified account" name="&lt;PersonalDetailsForm /&gt; should render professional client if support_professional_client is true with verified account" time="0.077">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should update user profile after clicking on submit" name="&lt;PersonalDetailsForm /&gt; should update user profile after clicking on submit" time="0.102">
    </testcase>
    <testcase classname="&lt;PersonalDetailsForm /&gt; should only display country of residence if isVirtual is true" name="&lt;PersonalDetailsForm /&gt; should only display country of residence if isVirtual is true" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="ClosingAccountPendingContent" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:12" time="0.591" tests="2">
    <testcase classname="ClosingAccountPendingContent should render the ClosingAccountPendingContent component" name="ClosingAccountPendingContent should render the ClosingAccountPendingContent component" time="0.012">
    </testcase>
    <testcase classname="ClosingAccountPendingContent should render  title and loginid" name="ClosingAccountPendingContent should render  title and loginid" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ClosingAccountReason /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:12" time="0.316" tests="3">
    <testcase classname="&lt;ClosingAccountReason /&gt; should render the ClosingAccountReason component" name="&lt;ClosingAccountReason /&gt; should render the ClosingAccountReason component" time="0.008">
    </testcase>
    <testcase classname="&lt;ClosingAccountReason /&gt; should render the ClosingAccountSteps component if render_close_account_reason is false" name="&lt;ClosingAccountReason /&gt; should render the ClosingAccountSteps component if render_close_account_reason is false" time="0.002">
    </testcase>
    <testcase classname="&lt;ClosingAccountReason /&gt; should render the ClosingAccountReason component if render_close_account_reason is true" name="&lt;ClosingAccountReason /&gt; should render the ClosingAccountReason component if render_close_account_reason is true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ClosingAccountWarningModal /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:12" time="0.616" tests="3">
    <testcase classname="&lt;ClosingAccountWarningModal /&gt; should render the ClosingAccountWarningModal component" name="&lt;ClosingAccountWarningModal /&gt; should render the ClosingAccountWarningModal component" time="0.029">
    </testcase>
    <testcase classname="&lt;ClosingAccountWarningModal /&gt; calls startDeactivating when &quot;Close account&quot; button is clicked" name="&lt;ClosingAccountWarningModal /&gt; calls startDeactivating when &quot;Close account&quot; button is clicked" time="0.041">
    </testcase>
    <testcase classname="&lt;ClosingAccountWarningModal /&gt; calls closeModal when &quot;Go Back&quot; button is clicked" name="&lt;ClosingAccountWarningModal /&gt; calls closeModal when &quot;Go Back&quot; button is clicked" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ClosingAccountHasPendingConditions /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:12" time="0.68" tests="4">
    <testcase classname="&lt;ClosingAccountHasPendingConditions /&gt; should render the ClosingAccountHasPendingConditions component" name="&lt;ClosingAccountHasPendingConditions /&gt; should render the ClosingAccountHasPendingConditions component" time="0.04">
    </testcase>
    <testcase classname="&lt;ClosingAccountHasPendingConditions /&gt; should show deriv accounts with balance" name="&lt;ClosingAccountHasPendingConditions /&gt; should show deriv accounts with balance" time="0.007">
    </testcase>
    <testcase classname="&lt;ClosingAccountHasPendingConditions /&gt; should show deriv accounts with open_positions" name="&lt;ClosingAccountHasPendingConditions /&gt; should show deriv accounts with open_positions" time="0.005">
    </testcase>
    <testcase classname="&lt;ClosingAccountHasPendingConditions /&gt; should show deriv accounts with pending withdrawals" name="&lt;ClosingAccountHasPendingConditions /&gt; should show deriv accounts with pending withdrawals" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ClosingAccountGeneralErrorContent /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:12" time="0.65" tests="2">
    <testcase classname="&lt;ClosingAccountGeneralErrorContent /&gt; should render the ClosingAccountGeneralErrorContent component" name="&lt;ClosingAccountGeneralErrorContent /&gt; should render the ClosingAccountGeneralErrorContent component" time="0.014">
    </testcase>
    <testcase classname="&lt;ClosingAccountGeneralErrorContent /&gt; should call onClick when button is clicked" name="&lt;ClosingAccountGeneralErrorContent /&gt; should call onClick when button is clicked" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="&lt;LoginHistory /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:13" time="0.745" tests="8">
    <testcase classname="&lt;LoginHistory /&gt; should render Login History List when is_mobile is true" name="&lt;LoginHistory /&gt; should render Login History List when is_mobile is true" time="0.023">
    </testcase>
    <testcase classname="&lt;LoginHistory /&gt; should render Login History Table" name="&lt;LoginHistory /&gt; should render Login History Table" time="0.017">
    </testcase>
    <testcase classname="&lt;LoginHistory /&gt; should render Table Header." name="&lt;LoginHistory /&gt; should render Table Header." time="0.017">
    </testcase>
    <testcase classname="&lt;LoginHistory /&gt; should render Table Items." name="&lt;LoginHistory /&gt; should render Table Items." time="0.013">
    </testcase>
    <testcase classname="&lt;LoginHistory /&gt; should render Loading if client: is_switching is true" name="&lt;LoginHistory /&gt; should render Loading if client: is_switching is true" time="0.003">
    </testcase>
    <testcase classname="&lt;LoginHistory /&gt; should render Table Item text: Logout if action is not login" name="&lt;LoginHistory /&gt; should render Table Item text: Logout if action is not login" time="0.007">
    </testcase>
    <testcase classname="&lt;LoginHistory /&gt; should render Table Item text: Failed under status if status is not 1" name="&lt;LoginHistory /&gt; should render Table Item text: Failed under status if status is not 1" time="0.005">
    </testcase>
    <testcase classname="&lt;LoginHistory /&gt; should render Error with error message" name="&lt;LoginHistory /&gt; should render Error with error message" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="LoginHistoryListRow" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:13" time="0.65" tests="2">
    <testcase classname="LoginHistoryListRow should render LoginHistoryTableRow Table Content" name="LoginHistoryListRow should render LoginHistoryTableRow Table Content" time="0.013">
    </testcase>
    <testcase classname="LoginHistoryListRow should display unknown in browser if browser return value is unknown" name="LoginHistoryListRow should display unknown in browser if browser return value is unknown" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ClosingAccountReasonForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:12" time="1.555" tests="6">
    <testcase classname="&lt;ClosingAccountReasonForm /&gt; Should render ClosingAccountReasonForm component" name="&lt;ClosingAccountReasonForm /&gt; Should render ClosingAccountReasonForm component" time="0.059">
    </testcase>
    <testcase classname="&lt;ClosingAccountReasonForm /&gt; should call the onBackClick function when cancel button is clicked" name="&lt;ClosingAccountReasonForm /&gt; should call the onBackClick function when cancel button is clicked" time="0.029">
    </testcase>
    <testcase classname="&lt;ClosingAccountReasonForm /&gt; Should be disabled when no reason has been selected" name="&lt;ClosingAccountReasonForm /&gt; Should be disabled when no reason has been selected" time="0.19">
    </testcase>
    <testcase classname="&lt;ClosingAccountReasonForm /&gt; should reduce remaining chars from maximum characters count when input is typed" name="&lt;ClosingAccountReasonForm /&gt; should reduce remaining chars from maximum characters count when input is typed" time="0.13">
    </testcase>
    <testcase classname="&lt;ClosingAccountReasonForm /&gt; should show validation error on invalid characters in input box" name="&lt;ClosingAccountReasonForm /&gt; should show validation error on invalid characters in input box" time="0.181">
    </testcase>
    <testcase classname="&lt;ClosingAccountReasonForm /&gt; should call the onConfirmClick function when continue button is clicked" name="&lt;ClosingAccountReasonForm /&gt; should call the onConfirmClick function when continue button is clicked" time="0.398">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ClosingAccountReason /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:13" time="1.542" tests="3">
    <testcase classname="&lt;ClosingAccountReason /&gt; Should render ClosingAccountReason component" name="&lt;ClosingAccountReason /&gt; Should render ClosingAccountReason component" time="0.03">
    </testcase>
    <testcase classname="&lt;ClosingAccountReason /&gt; should call redirectToSteps when back button is clicked" name="&lt;ClosingAccountReason /&gt; should call redirectToSteps when back button is clicked" time="0.175">
    </testcase>
    <testcase classname="&lt;ClosingAccountReason /&gt; should show warning modal when continue button is clicked" name="&lt;ClosingAccountReason /&gt; should show warning modal when continue button is clicked" time="0.615">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DeactivateAccount /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:14" time="0.354" tests="1">
    <testcase classname="&lt;DeactivateAccount /&gt; should render DeactivateAccount component" name="&lt;DeactivateAccount /&gt; should render DeactivateAccount component" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="LoginHistoryListRow" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:13" time="0.744" tests="4">
    <testcase classname="LoginHistoryListRow should render LoginHistoryListRow Table Title" name="LoginHistoryListRow should render LoginHistoryListRow Table Title" time="0.025">
    </testcase>
    <testcase classname="LoginHistoryListRow should render LoginHistoryListRow Table Content" name="LoginHistoryListRow should render LoginHistoryListRow Table Content" time="0.015">
    </testcase>
    <testcase classname="LoginHistoryListRow should display unknown in browser if browser return value is unknown" name="LoginHistoryListRow should display unknown in browser if browser return value is unknown" time="0.007">
    </testcase>
    <testcase classname="LoginHistoryListRow should not render Status if is not desktop" name="LoginHistoryListRow should not render Status if is not desktop" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:14" time="0.484" tests="1">
    <testcase classname=" should render ListCell" name=" should render ListCell" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TwoFactorDisabled /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:14" time="0.744" tests="9">
    <testcase classname="&lt;TwoFactorDisabled /&gt; should render TwoFactorDisabled component if has_enabled_two_fa is false" name="&lt;TwoFactorDisabled /&gt; should render TwoFactorDisabled component if has_enabled_two_fa is false" time="0.031">
    </testcase>
    <testcase classname="&lt;TwoFactorDisabled /&gt; should render timeline_1 component title " name="&lt;TwoFactorDisabled /&gt; should render timeline_1 component title " time="0.032">
    </testcase>
    <testcase classname="&lt;TwoFactorDisabled /&gt; should render QR code" name="&lt;TwoFactorDisabled /&gt; should render QR code" time="0.014">
    </testcase>
    <testcase classname="&lt;TwoFactorDisabled /&gt; should render clipboard component to setup 2FA" name="&lt;TwoFactorDisabled /&gt; should render clipboard component to setup 2FA" time="0.014">
    </testcase>
    <testcase classname="&lt;TwoFactorDisabled /&gt; should render step-2 title for setting up 2FA" name="&lt;TwoFactorDisabled /&gt; should render step-2 title for setting up 2FA" time="0.014">
    </testcase>
    <testcase classname="&lt;TwoFactorDisabled /&gt; should render digitform component if 2FA is disabled" name="&lt;TwoFactorDisabled /&gt; should render digitform component if 2FA is disabled" time="0.007">
    </testcase>
    <testcase classname="&lt;TwoFactorDisabled /&gt; should render 2FA article component for mobile" name="&lt;TwoFactorDisabled /&gt; should render 2FA article component for mobile" time="0.007">
    </testcase>
    <testcase classname="&lt;TwoFactorDisabled /&gt; should render 2FA article component for desktop" name="&lt;TwoFactorDisabled /&gt; should render 2FA article component for desktop" time="0.007">
    </testcase>
    <testcase classname="&lt;TwoFactorDisabled /&gt; should render Loader component if is_qr_loading is true" name="&lt;TwoFactorDisabled /&gt; should render Loader component if is_qr_loading is true" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TwoFactorEnabled /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:14" time="0.598" tests="2">
    <testcase classname="&lt;TwoFactorEnabled /&gt; should render TwoFactorEnabled component if 2FA is enabled" name="&lt;TwoFactorEnabled /&gt; should render TwoFactorEnabled component if 2FA is enabled" time="0.027">
    </testcase>
    <testcase classname="&lt;TwoFactorEnabled /&gt; should render DigitForm component if 2FA is enabled" name="&lt;TwoFactorEnabled /&gt; should render DigitForm component if 2FA is enabled" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TwoFactorAuthentication/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:14" time="0.724" tests="5">
    <testcase classname="&lt;TwoFactorAuthentication/&gt; should render Loader component if is_switching is true" name="&lt;TwoFactorAuthentication/&gt; should render Loader component if is_switching is true" time="0.012">
    </testcase>
    <testcase classname="&lt;TwoFactorAuthentication/&gt; should render LoadErrorMessage component if getTwoFAStatus call returns error object" name="&lt;TwoFactorAuthentication/&gt; should render LoadErrorMessage component if getTwoFAStatus call returns error object" time="0.014">
    </testcase>
    <testcase classname="&lt;TwoFactorAuthentication/&gt; should render LoadErrorMessage component if generate_response call returns error" name="&lt;TwoFactorAuthentication/&gt; should render LoadErrorMessage component if generate_response call returns error" time="0.027">
    </testcase>
    <testcase classname="&lt;TwoFactorAuthentication/&gt; should render TwoFactorDisabled component when has_enabled_two_fa is false" name="&lt;TwoFactorAuthentication/&gt; should render TwoFactorDisabled component when has_enabled_two_fa is false" time="0.035">
    </testcase>
    <testcase classname="&lt;TwoFactorAuthentication/&gt; should render TwoFactorEnabled component when has_enabled_two_fa is true" name="&lt;TwoFactorAuthentication/&gt; should render TwoFactorEnabled component when has_enabled_two_fa is true" time="0.053">
    </testcase>
  </testsuite>
  <testsuite name="&lt;SelfExclusion /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:13" time="2.429" tests="7">
    <testcase classname="&lt;SelfExclusion /&gt; should render SelfExclusion component for virtual account" name="&lt;SelfExclusion /&gt; should render SelfExclusion component for virtual account" time="0.02">
    </testcase>
    <testcase classname="&lt;SelfExclusion /&gt; should render SelfExclusion component with SelfExclusionModal" name="&lt;SelfExclusion /&gt; should render SelfExclusion component with SelfExclusionModal" time="0.123">
    </testcase>
    <testcase classname="&lt;SelfExclusion /&gt; should render SelfExclusion component with error" name="&lt;SelfExclusion /&gt; should render SelfExclusion component with error" time="0.049">
    </testcase>
    <testcase classname="&lt;SelfExclusion /&gt; Should trigger session_duration_limit input and show error if the value is greater than 60480 or does not show if less than 60480" name="&lt;SelfExclusion /&gt; Should trigger session_duration_limit input and show error if the value is greater than 60480 or does not show if less than 60480" time="0.502">
    </testcase>
    <testcase classname="&lt;SelfExclusion /&gt; Should trigger exclude_until input and show error depends on input value" name="&lt;SelfExclusion /&gt; Should trigger exclude_until input and show error depends on input value" time="0.145">
    </testcase>
    <testcase classname="&lt;SelfExclusion /&gt; should trigger inputs with data, add new data, and show error wih invalid input data" name="&lt;SelfExclusion /&gt; should trigger inputs with data, add new data, and show error wih invalid input data" time="0.275">
    </testcase>
    <testcase classname="&lt;SelfExclusion /&gt; should trigger inputs with correct data set timeout limit and logout" name="&lt;SelfExclusion /&gt; should trigger inputs with correct data set timeout limit and logout" time="0.627">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DigitForm /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:14" time="1.073" tests="8">
    <testcase classname="&lt;DigitForm /&gt; should render the DigitForm component" name="&lt;DigitForm /&gt; should render the DigitForm component" time="0.027">
    </testcase>
    <testcase classname="&lt;DigitForm /&gt; should disable button when form is empty or validation fails" name="&lt;DigitForm /&gt; should disable button when form is empty or validation fails" time="0.052">
    </testcase>
    <testcase classname="&lt;DigitForm /&gt; should change button text when user enables or disables 2FA" name="&lt;DigitForm /&gt; should change button text when user enables or disables 2FA" time="0.064">
    </testcase>
    <testcase classname="&lt;DigitForm /&gt; should display error if submits empty form" name="&lt;DigitForm /&gt; should display error if submits empty form" time="0.053">
    </testcase>
    <testcase classname="&lt;DigitForm /&gt; should display error if user types alphanumeric characters" name="&lt;DigitForm /&gt; should display error if user types alphanumeric characters" time="0.08">
    </testcase>
    <testcase classname="&lt;DigitForm /&gt; should display error if user types less than 6 digits" name="&lt;DigitForm /&gt; should display error if user types less than 6 digits" time="0.031">
    </testcase>
    <testcase classname="&lt;DigitForm /&gt; should display error if user sends invalid OTP" name="&lt;DigitForm /&gt; should display error if user sends invalid OTP" time="0.085">
    </testcase>
    <testcase classname="&lt;DigitForm /&gt; should display error if code inside error object is not equal to InvalidOTP " name="&lt;DigitForm /&gt; should display error if code inside error object is not equal to InvalidOTP " time="0.076">
    </testcase>
  </testsuite>
  <testsuite name="ConnectedAppsInfoBullets" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:15" time="0.646" tests="1">
    <testcase classname="ConnectedAppsInfoBullets should render the 3 informative ordered list items" name="ConnectedAppsInfoBullets should render the 3 informative ordered list items" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ApiToken/&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:13" time="2.808" tests="8">
    <testcase classname="&lt;ApiToken/&gt; should render ApiToken component" name="&lt;ApiToken/&gt; should render ApiToken component" time="0.06">
    </testcase>
    <testcase classname="&lt;ApiToken/&gt; should render ApiToken component for mobile" name="&lt;ApiToken/&gt; should render ApiToken component for mobile" time="0.033">
    </testcase>
    <testcase classname="&lt;ApiToken/&gt; should not render ApiToken component if data is still loading" name="&lt;ApiToken/&gt; should not render ApiToken component if data is still loading" time="0.025">
    </testcase>
    <testcase classname="&lt;ApiToken/&gt; should choose checkbox, enter a valid value and create token" name="&lt;ApiToken/&gt; should choose checkbox, enter a valid value and create token" time="1.05">
    </testcase>
    <testcase classname="&lt;ApiToken/&gt; should render created tokens and trigger delete" name="&lt;ApiToken/&gt; should render created tokens and trigger delete" time="0.706">
    </testcase>
    <testcase classname="&lt;ApiToken/&gt; should trigger hide/unhide icon and trigger copy icon, should show dialog only for admin scope" name="&lt;ApiToken/&gt; should trigger hide/unhide icon and trigger copy icon, should show dialog only for admin scope" time="0.182">
    </testcase>
    <testcase classname="&lt;ApiToken/&gt; should render created tokens for mobile" name="&lt;ApiToken/&gt; should render created tokens for mobile" time="0.059">
    </testcase>
    <testcase classname="&lt;ApiToken/&gt; should show token error if exists" name="&lt;ApiToken/&gt; should show token error if exists" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="DataTableTemplate" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:15" time="0.626" tests="1">
    <testcase classname="DataTableTemplate should render the &apos;DataTableTemplate&apos; component with correct details" name="DataTableTemplate should render the &apos;DataTableTemplate&apos; component with correct details" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;TwoFactorAuthenticationArticle /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:15" time="0.834" tests="2">
    <testcase classname="&lt;TwoFactorAuthenticationArticle /&gt; should render TwoFactorAuthenticationArticle component" name="&lt;TwoFactorAuthenticationArticle /&gt; should render TwoFactorAuthenticationArticle component" time="0.017">
    </testcase>
    <testcase classname="&lt;TwoFactorAuthenticationArticle /&gt; should render article description properly" name="&lt;TwoFactorAuthenticationArticle /&gt; should render article description properly" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="ConnectedApps" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:15" time="1.265" tests="7">
    <testcase classname="ConnectedApps should render the Loading component initially" name="ConnectedApps should render the Loading component initially" time="0.039">
    </testcase>
    <testcase classname="ConnectedApps should render the &apos;Know more&apos; component" name="ConnectedApps should render the &apos;Know more&apos; component" time="0.012">
    </testcase>
    <testcase classname="ConnectedApps should render the &apos;Earn more&apos; component" name="ConnectedApps should render the &apos;Earn more&apos; component" time="0.023">
    </testcase>
    <testcase classname="ConnectedApps should render the app list in Desktop view" name="ConnectedApps should render the app list in Desktop view" time="0.054">
    </testcase>
    <testcase classname="ConnectedApps should render the app list in Mobile view" name="ConnectedApps should render the app list in Mobile view" time="0.132">
    </testcase>
    <testcase classname="ConnectedApps should open the modal to revoke access on clicking the button" name="ConnectedApps should open the modal to revoke access on clicking the button" time="0.253">
    </testcase>
    <testcase classname="ConnectedApps should render the empty apps informative text component if there are no connected apps" name="ConnectedApps should render the empty apps informative text component if there are no connected apps" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="ConnectedAppsKnowMore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:16" time="0.858" tests="1">
    <testcase classname="ConnectedAppsKnowMore should render the &apos;Know more&apos; section with correct details" name="ConnectedAppsKnowMore should render the &apos;Know more&apos; section with correct details" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="DataListTemplate" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:15" time="0.996" tests="1">
    <testcase classname="DataListTemplate should render the &apos;DataListTemplate&apos; component with correct details" name="DataListTemplate should render the &apos;DataListTemplate&apos; component with correct details" time="0.076">
    </testcase>
  </testsuite>
  <testsuite name="ConnectedAppsEarnMore" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:15" time="0.989" tests="1">
    <testcase classname="ConnectedAppsEarnMore should render the &apos;Earn more&apos; section with correct details" name="ConnectedAppsEarnMore should render the &apos;Earn more&apos; section with correct details" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="ConnectedAppsEmpty" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:15" time="1.256" tests="1">
    <testcase classname="ConnectedAppsEmpty should render the empty apps informative text component with correct details" name="ConnectedAppsEmpty should render the empty apps informative text component with correct details" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="DataListTemplateEntry" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:16" time="0.908" tests="1">
    <testcase classname="DataListTemplateEntry should render the &apos;DataListTemplateEntry&apos; component with correct details" name="DataListTemplateEntry should render the &apos;DataListTemplateEntry&apos; component with correct details" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="&lt;ConnectedAppsInfo /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:16" time="0.698" tests="4">
    <testcase classname="&lt;ConnectedAppsInfo /&gt; should have h4 element with text &quot;What are connected apps&quot;" name="&lt;ConnectedAppsInfo /&gt; should have h4 element with text &quot;What are connected apps&quot;" time="0.044">
    </testcase>
    <testcase classname="&lt;ConnectedAppsInfo /&gt; should have an ordered list" name="&lt;ConnectedAppsInfo /&gt; should have an ordered list" time="0.01">
    </testcase>
    <testcase classname="&lt;ConnectedAppsInfo /&gt; should have three list items" name="&lt;ConnectedAppsInfo /&gt; should have three list items" time="0.019">
    </testcase>
    <testcase classname="&lt;ConnectedAppsInfo /&gt; displays connected apps information" name="&lt;ConnectedAppsInfo /&gt; displays connected apps information" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PlatformPartials /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:16" time="0.641" tests="2">
    <testcase classname="&lt;PlatformPartials /&gt; should render mt5 partials" name="&lt;PlatformPartials /&gt; should render mt5 partials" time="0.052">
    </testcase>
    <testcase classname="&lt;PlatformPartials /&gt; should call handleClick when button is clicked" name="&lt;PlatformPartials /&gt; should call handleClick when button is clicked" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="DerivEmail" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:16" time="0.844" tests="5">
    <testcase classname="DerivEmail should render email address in disabled form" name="DerivEmail should render email address in disabled form" time="0.04">
    </testcase>
    <testcase classname="DerivEmail should display button when it is not redirected from deriv-go" name="DerivEmail should display button when it is not redirected from deriv-go" time="0.018">
    </testcase>
    <testcase classname="DerivEmail should not display button when it is redirected from deriv-go" name="DerivEmail should not display button when it is redirected from deriv-go" time="0.008">
    </testcase>
    <testcase classname="DerivEmail should not display unlink account modal when not associated with social media" name="DerivEmail should not display unlink account modal when not associated with social media" time="0.059">
    </testcase>
    <testcase classname="DerivEmail should display unlink account modal when button is clicked" name="DerivEmail should display unlink account modal when button is clicked" time="0.073">
    </testcase>
  </testsuite>
  <testsuite name="&lt;Passwords /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:17" time="0.765" tests="3">
    <testcase classname="&lt;Passwords /&gt; should render Email and password section" name="&lt;Passwords /&gt; should render Email and password section" time="0.051">
    </testcase>
    <testcase classname="&lt;Passwords /&gt; should render MT5 platform section" name="&lt;Passwords /&gt; should render MT5 platform section" time="0.03">
    </testcase>
    <testcase classname="&lt;Passwords /&gt; should render DerivX platform section" name="&lt;Passwords /&gt; should render DerivX platform section" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="&lt;DerivPassword /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:16" time="0.841" tests="6">
    <testcase classname="&lt;DerivPassword /&gt; Should render properly" name="&lt;DerivPassword /&gt; Should render properly" time="0.088">
    </testcase>
    <testcase classname="&lt;DerivPassword /&gt; displays the correct platform information for non-MF clients &amp; restricted countries" name="&lt;DerivPassword /&gt; displays the correct platform information for non-MF clients &amp; restricted countries" time="0.02">
    </testcase>
    <testcase classname="&lt;DerivPassword /&gt; displays the correct platform information for MF clients" name="&lt;DerivPassword /&gt; displays the correct platform information for MF clients" time="0.022">
    </testcase>
    <testcase classname="&lt;DerivPassword /&gt; displays a change password button for non-social signups" name="&lt;DerivPassword /&gt; displays a change password button for non-social signups" time="0.022">
    </testcase>
    <testcase classname="&lt;DerivPassword /&gt; should invoke verifyEmail when change password is clicked" name="&lt;DerivPassword /&gt; should invoke verifyEmail when change password is clicked" time="0.03">
    </testcase>
    <testcase classname="&lt;DerivPassword /&gt; displays a button to unlink social identity provider" name="&lt;DerivPassword /&gt; displays a button to unlink social identity provider" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="&lt;PasswordsPlatform /&gt;" errors="0" failures="0" skipped="0" timestamp="2024-02-01T03:25:17" time="0.858" tests="3">
    <testcase classname="&lt;PasswordsPlatform /&gt; should render DX password section when platform is MT5" name="&lt;PasswordsPlatform /&gt; should render DX password section when platform is MT5" time="0.021">
    </testcase>
    <testcase classname="&lt;PasswordsPlatform /&gt; should render DX password section when platform is DerivX" name="&lt;PasswordsPlatform /&gt; should render DX password section when platform is DerivX" time="0.011">
    </testcase>
    <testcase classname="&lt;PasswordsPlatform /&gt; should open Send email modal when Change password button is clicked" name="&lt;PasswordsPlatform /&gt; should open Send email modal when Change password button is clicked" time="0.047">
    </testcase>
  </testsuite>
</testsuites>